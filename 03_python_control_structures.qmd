## Python Control Structures for Business Applications

Control structures in Python allow you to control the flow of your program based on conditions and loops. This tutorial will focus on using control structures in business-related scenarios, including if statements, for loops, and while loops.

### Conditional Statements

Conditional statements execute code based on whether a condition is true or false.

#### If Statements

If statements are used to execute a block of code only if a specified condition is true.

##### Example: Discount Calculation

Let's say you want to apply a discount to a product based on the purchase quantity.

```python
quantity = 15
unit_price = 100
total_cost = quantity * unit_price

if quantity > 10:
    discount = 0.1  # 10% discount
    total_cost *= (1 - discount)

print(f"Total cost after discount: ${total_cost:.2f}")
```

#### If-Else Statements

If-else statements provide an alternative block of code to execute if the condition is false.

##### Example: Determine Employee Bonus Eligibility

```python
employee_performance = "Excellent"
bonus = 0

if employee_performance == "Excellent":
    bonus = 1000
else:
    bonus = 500

print(f"Employee bonus: ${bonus}")
```

#### Elif Statements

Elif statements are used to check multiple conditions.

##### Example: Categorize Sales Performance

```python
monthly_sales = 75000

if monthly_sales >= 100000:
    performance_category = "Outstanding"
elif monthly_sales >= 75000:
    performance_category = "Good"
elif monthly_sales >= 50000:
    performance_category = "Average"
else:
    performance_category = "Needs Improvement"

print(f"Sales performance: {performance_category}")
```

### Loops

Loops allow you to repeat a block of code multiple times.

#### For Loops

For loops are used to iterate over a sequence (such as a list, tuple, or range).

##### Example: Calculate Total Revenue from Sales Data

```python
sales_data = [1000, 2000, 1500, 3000, 2500]
total_revenue = 0

for sale in sales_data:
    total_revenue += sale

print(f"Total revenue: ${total_revenue}")
```

##### Example: Generate Quarterly Sales Report

```python
quarterly_sales = {
    "Q1": 20000,
    "Q2": 25000,
    "Q3": 30000,
    "Q4": 35000
}

for quarter, sales in quarterly_sales.items():
    print(f"{quarter} sales: ${sales}")
```

#### While Loops

While loops are used to execute a block of code as long as a specified condition is true.

##### Example: Track Inventory Levels

```python
inventory = 100

while inventory > 0:
    print(f"Inventory level: {inventory}")
    inventory -= 10  # Selling 10 units

print("Inventory depleted")
```

##### Example: Customer Payment Processing

```python
balance_due = 500

while balance_due > 0:
    payment = float(input("Enter payment amount: $"))
    balance_due -= payment
    print(f"Remaining balance: ${balance_due:.2f}")

print("Payment complete")
```

### Nested Control Structures

You can nest control structures within each other to handle more complex logic.

##### Example: Approve Loan Application

```python
credit_score = 720
annual_income = 50000
loan_amount = 20000

if credit_score >= 700:
    if annual_income >= 40000:
        if loan_amount <= 25000:
            loan_approved = True
        else:
            loan_approved = False
    else:
        loan_approved = False
else:
    loan_approved = False

if loan_approved:
    print("Loan application approved")
else:
    print("Loan application denied")
```

### Conclusion

Control structures are essential for managing the flow of your programs based on conditions and repetitions. By using if statements, for loops, and while loops, you can create efficient and effective business applications. These examples demonstrate how to apply these concepts to common business scenarios, helping you to develop practical and functional Python programs.

# Deep Dive Tutorial into Python Control Structures with Business Analytics and Information Systems Examples

Control structures in Python allow you to control the flow of execution based on certain conditions or repetitive tasks. These structures include conditional statements, loops, and control flow tools like break, continue, and pass statements. Understanding these structures is crucial for writing efficient and effective Python programs. This tutorial provides a comprehensive overview of Python control structures with practical examples in business analytics and information systems (BAIS).

## Table of Contents

1. [Conditional Statements](#conditional-statements)
    - [if Statement](#if-statement)
    - [else Statement](#else-statement)
    - [elif Statement](#elif-statement)
2. [Loops](#loops)
    - [for Loop](#for-loop)
    - [while Loop](#while-loop)
    - [Nested Loops](#nested-loops)
3. [Control Flow Tools](#control-flow-tools)
    - [break Statement](#break-statement)
    - [continue Statement](#continue-statement)
    - [pass Statement](#pass-statement)
    - [else Clause in Loops](#else-clause-in-loops)
4. [List Comprehensions](#list-comprehensions)
5. [Exception Handling](#exception-handling)
6. [Conclusion](#conclusion)

## Conditional Statements

Conditional statements allow you to execute certain blocks of code based on specific conditions. Python provides `if`, `elif`, and `else` statements to handle conditional execution.

### if Statement

The `if` statement is used to test a condition. If the condition evaluates to `True`, the block of code inside the `if` statement is executed.

**Example: Analyzing Sales Data**

```python
# Example: Check if sales exceed a target
sales = 12000
target = 10000
if sales > target:
    print("Sales target exceeded")
```

### else Statement

The `else` statement follows an `if` statement and is executed if the `if` condition evaluates to `False`.

**Example: Analyzing Sales Data**

```python
# Example: Check if sales exceed a target
sales = 8000
target = 10000
if sales > target:
    print("Sales target exceeded")
else:
    print("Sales target not met")
```

### elif Statement

The `elif` statement stands for "else if" and allows you to check multiple conditions. If the `if` condition is `False`, the `elif` condition is checked. If it is `True`, the corresponding block of code is executed.

**Example: Categorizing Sales Performance**

```python
# Example: Categorizing sales performance
sales = 10000
target = 10000
if sales > target:
    print("Sales target exceeded")
elif sales == target:
    print("Sales target met exactly")
else:
    print("Sales target not met")
```

### Nested If Statements

You can nest `if`, `elif`, and `else` statements to create complex conditional logic.

**Example: Advanced Sales Analysis**

```python
# Example: Advanced sales analysis
sales = 15000
target = 10000
region = "North"

if sales > target:
    print("Sales target exceeded")
    if region == "North":
        print("Great performance in the North region!")
    else:
        print("Consider boosting sales in other regions.")
else:
    print("Sales target not met")
```

## Loops

Loops are used to execute a block of code repeatedly. Python provides `for` and `while` loops to handle iterative execution.

### for Loop

The `for` loop is used to iterate over a sequence (e.g., list, tuple, dictionary, set, or string).

**Example: Analyzing Multiple Sales Records**

```python
# Example: Analyzing multiple sales records
sales_records = [12000, 8000, 15000, 9000, 13000]
for sales in sales_records:
    if sales > 10000:
        print(f"Sales target exceeded with {sales} in sales")
    else:
        print(f"Sales target not met with {sales} in sales")
```

The `range()` function is often used with the `for` loop to generate a sequence of numbers.

**Example: Monthly Sales Analysis**

```python
# Example: Monthly sales analysis
for month in range(1, 13):
    print(f"Analyzing sales data for month {month}")
```

### while Loop

The `while` loop is used to execute a block of code as long as the condition is `True`.

**Example: Simulating Sales Until Target Met**

```python
# Example: Simulating sales until target met
sales = 0
target = 50000
increment = 10000
while sales < target:
    sales += increment
    print(f"Current sales: {sales}")
```

### Nested Loops

You can nest loops to perform more complex iterative tasks.

**Example: Comparing Sales Across Regions and Months**

```python
# Example: Comparing sales across regions and months
regions = ["North", "South", "East", "West"]
months = ["January", "February", "March"]

for region in regions:
    for month in months:
        print(f"Analyzing sales data for {region} region in {month}")
```

## Control Flow Tools

Control flow tools like `break`, `continue`, and `pass` provide additional control over the execution of loops and conditional statements.

### break Statement

The `break` statement is used to exit a loop prematurely.

**Example: Stop Analysis When Target Achieved**

```python
# Example: Stop analysis when target achieved
sales_records = [8000, 9000, 15000, 7000, 12000]
for sales in sales_records:
    if sales > 10000:
        print(f"Sales target exceeded with {sales} in sales")
        break
    print(f"Sales target not met with {sales} in sales")
```

### continue Statement

The `continue` statement is used to skip the rest of the code inside the loop for the current iteration and move to the next iteration.

**Example: Skip Underperforming Sales Data**

```python
# Example: Skip underperforming sales data
sales_records = [8000, 9000, 15000, 7000, 12000]
for sales in sales_records:
    if sales < 10000:
        continue
    print(f"Sales target exceeded with {sales} in sales")
```

### pass Statement

The `pass` statement is a null operation; nothing happens when it executes. It can be used as a placeholder.

**Example: Placeholder for Future Code**

```python
# Example: Placeholder for future code
for sales in sales_records:
    if sales < 10000:
        pass  # TODO: Handle underperforming sales data later
    else:
        print(f"Sales target exceeded with {sales} in sales")
```

### else Clause in Loops

The `else` clause can be used with loops. It is executed when the loop terminates naturally (i.e., not terminated by a `break` statement).

**Example: Verify All Sales Records Analyzed**

```python
# Example: Verify all sales records analyzed
sales_records = [8000, 9000, 15000, 7000, 12000]
for sales in sales_records:
    if sales > 10000:
        print(f"Sales target exceeded with {sales} in sales")
else:
    print("All sales records analyzed")
```

## List Comprehensions

List comprehensions provide a concise way to create lists. They consist of brackets containing an expression followed by a `for` clause and can have optional `if` clauses.

**Example: Filter Sales Data**

```python
# Example: Filter sales data
sales_records = [8000, 9000, 15000, 7000, 12000]
high_sales = [sales for sales in sales_records if sales > 10000]
print(high_sales)
```

## Exception Handling

Exception handling allows you to handle runtime errors gracefully. The `try` block lets you test a block of code for errors, the `except` block lets you handle the error, and the `finally` block lets you execute code regardless of the result.

**Example: Handle Division by Zero in Financial Calculations**

```python
# Example: Handle division by zero in financial calculations
try:
    revenue = 100000
    expenses = 0
    profit_margin = revenue / expenses
except ZeroDivisionError:
    print("Expenses cannot be zero when calculating profit margin")
finally:
    print("Financial calculation completed")
```

## Conclusion

This deep dive tutorial covered the fundamentals of Python control structures, including conditional statements, loops, control flow tools, list comprehensions, and exception handling, with examples tailored to business analytics and information systems (BAIS). By mastering these concepts, you can write more efficient and readable Python code, handle complex logic, and manage errors effectively. Understanding and utilizing control structures is essential for any Python programmer, as they form the backbone of decision-making and iterative processes in your programs.