## Introduction to Database Interaction with Python

Interacting with databases is a crucial aspect of many applications. Python provides robust libraries for connecting to databases, performing CRUD (Create, Read, Update, Delete) operations, and managing database connections. This tutorial will cover connecting to and interacting with databases using Python, focusing on `sqlite3` for SQLite databases and `SQLAlchemy` for Object Relational Mapping (ORM).

### Interacting with SQLite Databases using `sqlite3`

SQLite is a C library that provides a lightweight, disk-based database. It doesn't require a separate server process, making it an excellent choice for embedded systems and small applications.

#### Connecting to a Database

You can connect to an SQLite database using the `sqlite3` module. If the database does not exist, it will be created.

```python
import sqlite3

# Connect to SQLite database
connection = sqlite3.connect('example.db')

# Create a cursor object
cursor = connection.cursor()
```

#### Creating a Table

You can create a table using the `CREATE TABLE` SQL statement.

```python
# Create a table
cursor.execute('''
CREATE TABLE IF NOT EXISTS employees (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    age INTEGER,
    department TEXT
)
''')

# Commit the changes
connection.commit()
```

#### Inserting Data

You can insert data into the table using the `INSERT INTO` SQL statement.

```python
# Insert data into the table
cursor.execute('''
INSERT INTO employees (name, age, department)
VALUES ('John Doe', 30, 'Finance')
''')

# Commit the changes
connection.commit()
```

#### Reading Data

You can read data from the table using the `SELECT` SQL statement.

```python
# Read data from the table
cursor.execute('SELECT * FROM employees')
rows = cursor.fetchall()

for row in rows:
    print(row)
```

#### Updating Data

You can update data in the table using the `UPDATE` SQL statement.

```python
# Update data in the table
cursor.execute('''
UPDATE employees
SET age = 31
WHERE name = 'John Doe'
''')

# Commit the changes
connection.commit()
```

#### Deleting Data

You can delete data from the table using the `DELETE` SQL statement.

```python
# Delete data from the table
cursor.execute('''
DELETE FROM employees
WHERE name = 'John Doe'
''')

# Commit the changes
connection.commit()
```

#### Closing the Connection

Always close the connection when you're done interacting with the database.

```python
# Close the connection
connection.close()
```

### Interacting with Databases using SQLAlchemy

SQLAlchemy is a powerful ORM library that provides a high-level interface for interacting with databases in Python.

#### Installing SQLAlchemy

First, install SQLAlchemy using pip:

```bash
pip install sqlalchemy
```

#### Connecting to a Database

You can connect to a database using SQLAlchemy's `create_engine` function.

```python
from sqlalchemy import create_engine

# Create an engine
engine = create_engine('sqlite:///example.db')
```

#### Defining a Model

You define models using Python classes and SQLAlchemy's ORM features.

```python
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String

Base = declarative_base()

class Employee(Base):
    __tablename__ = 'employees'

    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    age = Column(Integer)
    department = Column(String)

    def __repr__(self):
        return f"<Employee(name={self.name}, age={self.age}, department={self.department})>"
```

#### Creating a Table

You can create tables in the database using the `create_all` method.

```python
# Create tables
Base.metadata.create_all(engine)
```

#### Creating a Session

You need a session to interact with the database.

```python
from sqlalchemy.orm import sessionmaker

# Create a session
Session = sessionmaker(bind=engine)
session = Session()
```

#### Inserting Data

You can insert data into the database by creating instances of the model and adding them to the session.

```python
# Insert data
new_employee = Employee(name='Jane Doe', age=28, department='Marketing')
session.add(new_employee)
session.commit()
```

#### Reading Data

You can read data from the database using the session's `query` method.

```python
# Read data
employees = session.query(Employee).all()
for employee in employees:
    print(employee)
```

#### Updating Data

You can update data in the database by modifying the attributes of the model instance and committing the session.

```python
# Update data
employee = session.query(Employee).filter_by(name='Jane Doe').first()
employee.age = 29
session.commit()
```

#### Deleting Data

You can delete data from the database by deleting the model instance from the session.

```python
# Delete data
employee = session.query(Employee).filter_by(name='Jane Doe').first()
session.delete(employee)
session.commit()
```

### Conclusion

Interacting with databases is a fundamental skill for developing data-driven applications. Python provides powerful libraries like `sqlite3` for simple database interactions and `SQLAlchemy` for advanced ORM capabilities. By mastering these tools, you can efficiently manage database connections, perform CRUD operations, and build robust applications.
