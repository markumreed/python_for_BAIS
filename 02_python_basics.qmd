## Introduction to Python Programming Basics for Business

Python is a versatile, high-level programming language known for its readability and broad applicability, especially in the business world. This tutorial will introduce you to the fundamentals of Python, focusing on business-related examples. You will learn about variables, data types, control structures, functions, and basic modules.

### Variables and Data Types

#### Variables

In Python, variables are used to store data values. You do not need to declare a variable before using it.

```python
# Example
company_name = "Tech Solutions Inc."
number_of_employees = 250
is_public = True
```

#### Data Types

1. **Strings**: A sequence of characters.
    ```python
    greeting = "Welcome to our company!"
    ```
2. **Integers**: Whole numbers.
    ```python
    total_sales = 150000
    ```
3. **Floats**: Decimal numbers.
    ```python
    quarterly_profit = 35000.75
    ```
4. **Booleans**: True or False values.
    ```python
    is_profit_increasing = False
    ```

### Basic Operations

Python supports various operations on data types.

#### Arithmetic Operations

```python
revenue = 100000
expenses = 75000

net_income = revenue - expenses  # Subtraction
print(net_income)  # Output: 25000

profit_margin = (net_income / revenue) * 100  # Division
print(profit_margin)  # Output: 25.0
```

#### String Operations

```python
department1 = "Finance"
department2 = "Marketing"

# Concatenation
combined_departments = department1 + " and " + department2
print(combined_departments)  # Output: Finance and Marketing

# Length
department_length = len(department1)
print(department_length)  # Output: 7
```

### Control Structures

#### Conditional Statements

Conditional statements allow you to execute code based on conditions.

```python
annual_revenue = 1200000

if annual_revenue > 1000000:
    print("The company qualifies for the large enterprise category.")
else:
    print("The company qualifies for the small enterprise category.")
```

#### Loops

Loops are used to iterate over a sequence of elements.

##### For Loop

```python
departments = ["Finance", "Marketing", "HR", "IT"]

for department in departments:
    print(department)
```

##### While Loop

```python
pending_tasks = 5

while pending_tasks > 0:
    print(f"Tasks remaining: {pending_tasks}")
    pending_tasks -= 1
```

### Functions

Functions are blocks of code that perform a specific task and can be reused.

#### Defining and Calling Functions

```python
def calculate_bonus(salary, performance_rating):
    bonus_percentage = 0.1 if performance_rating >= 4 else 0.05
    return salary * bonus_percentage

print(calculate_bonus(50000, 4.5))  # Output: 5000.0
```

#### Functions with Multiple Arguments

```python
def calculate_total_cost(unit_price, quantity):
    return unit_price * quantity

print(calculate_total_cost(50, 100))  # Output: 5000
```

### Lists

Lists are ordered collections of items.

#### Creating and Accessing Lists

```python
clients = ["Client A", "Client B", "Client C"]

print(clients[0])  # Accessing first element, Output: Client A
print(clients[-1]) # Accessing last element, Output: Client C
```

#### Adding and Removing Elements

```python
clients.append("Client D")  # Adding an element
clients.remove("Client B")  # Removing an element
print(clients)  # Output: ['Client A', 'Client C', 'Client D']
```

### Dictionaries

Dictionaries store data in key-value pairs.

#### Creating and Accessing Dictionaries

```python
employee = {
    "name": "John Doe",
    "age": 30,
    "position": "Data Analyst"
}

print(employee["name"])  # Accessing value by key, Output: John Doe
```

#### Adding and Removing Key-Value Pairs

```python
employee["salary"] = 70000  # Adding a new key-value pair
del employee["age"]         # Removing a key-value pair
print(employee)  # Output: {'name': 'John Doe', 'position': 'Data Analyst', 'salary': 70000}
```

### Basic Modules and Importing

Python has a rich standard library of modules you can import to extend functionality.

#### Importing Modules

```python
import math

# Calculating the ceiling value of monthly earnings
monthly_earnings = 10234.56
print(math.ceil(monthly_earnings))  # Output: 10235
```

#### Importing Specific Functions

```python
from math import sqrt

# Calculating the square root of the annual growth percentage
annual_growth = 16
print(sqrt(annual_growth))  # Output: 4.0
```

### Conclusion

This tutorial covered the basics of Python programming with a focus on business-related examples, including variables, data types, control structures, functions, lists, dictionaries, and basic module usage. With these fundamentals, you can start building simple Python programs to solve business problems and gradually move on to more complex projects.
