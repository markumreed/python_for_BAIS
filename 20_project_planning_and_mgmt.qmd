# Python Practical: Using Python for Creating Gantt Charts and Project Timelines

## Introduction

This tutorial introduces students to using Python for project management tasks, specifically creating Gantt charts and detailed project timelines. We will use Python libraries such as Matplotlib and Plotly to visualize project schedules, track critical milestones, and manage timelines effectively. By the end of this tutorial, you will have hands-on experience integrating technical skills with project management theories, enhancing your ability to oversee projects from conception to completion.

### Prerequisites
- Basic understanding of programming concepts
- Familiarity with project management theories and practices
- Python installed on your system

## 1. Setting Up the Python Development Environment

### Step 1: Install Python
Download the latest version from the [official Python website](https://www.python.org/downloads/) and follow the installation instructions for your operating system.

### Step 2: Verify Installation
Open your terminal (Command Prompt on Windows, Terminal on macOS/Linux) and run the following command to verify that Python is installed correctly:
```bash
python --version
```
or
```bash
python3 --version
```
You should see the installed Python version.

### Step 3: Install Required Libraries
We will use Matplotlib and Plotly for creating Gantt charts and project timelines. Install these libraries using pip:
```bash
pip install matplotlib plotly pandas
```

## 2. Creating Gantt Charts with Matplotlib

### Example Project: Simple Gantt Chart

#### Step 1: Create a Project Directory
Create a new directory for your project and navigate into it:
```bash
mkdir gantt_chart_project
cd gantt_chart_project
```

#### Step 2: Create the Gantt Chart Script
Create a file named `gantt_chart.py` and open it in your IDE. Add the following code:
```python
import matplotlib.pyplot as plt
import pandas as pd

# Sample data
data = {
    'Task': ['Task A', 'Task B', 'Task C', 'Task D'],
    'Start': ['2024-07-01', '2024-07-02', '2024-07-03', '2024-07-04'],
    'Finish': ['2024-07-05', '2024-07-06', '2024-07-07', '2024-07-08']
}

# Create DataFrame
df = pd.DataFrame(data)
df['Start'] = pd.to_datetime(df['Start'])
df['Finish'] = pd.to_datetime(df['Finish'])

# Calculate duration
df['Duration'] = df['Finish'] - df['Start']

# Plot Gantt chart
fig, ax = plt.subplots(figsize=(10, 5))
for i, task in df.iterrows():
    ax.barh(task['Task'], task['Duration'].days, left=task['Start'], height=0.5)

# Formatting
ax.set_xlabel('Date')
ax.set_ylabel('Task')
ax.set_title('Project Gantt Chart')
plt.grid(axis='x')

# Show plot
plt.show()
```

#### Step 3: Run Your Script
Run your script from the terminal:
```bash
python gantt_chart.py
```
You should see a simple Gantt chart displayed, visualizing the tasks and their durations.

## 3. Creating Interactive Gantt Charts with Plotly

### Example Project: Interactive Gantt Chart

#### Step 1: Create the Interactive Gantt Chart Script
Create a file named `interactive_gantt_chart.py` and open it in your IDE. Add the following code:
```python
import plotly.express as px
import pandas as pd

# Sample data
data = {
    'Task': ['Task A', 'Task B', 'Task C', 'Task D'],
    'Start': ['2024-07-01', '2024-07-02', '2024-07-03', '2024-07-04'],
    'Finish': ['2024-07-05', '2024-07-06', '2024-07-07', '2024-07-08'],
    'Resource': ['Team 1', 'Team 2', 'Team 1', 'Team 2']
}

# Create DataFrame
df = pd.DataFrame(data)
df['Start'] = pd.to_datetime(df['Start'])
df['Finish'] = pd.to_datetime(df['Finish'])

# Plot Gantt chart
fig = px.timeline(df, x_start='Start', x_end='Finish', y='Task', color='Resource', title='Project Gantt Chart')
fig.update_yaxes(categoryorder='total ascending')

# Show plot
fig.show()
```

#### Step 2: Run Your Script
Run your script from the terminal:
```bash
python interactive_gantt_chart.py
```
You should see an interactive Gantt chart displayed in your web browser, allowing you to hover over tasks to see details and zoom in/out for a better view.

## 4. Integrating Project Management Theories

### Planning
Define the scope, objectives, and deliverables of your project. For example, in our Gantt chart project, the objective is to visualize the project schedule and track task durations.

### Analysis
Gather and analyze requirements. Determine the necessary tasks, their start and end dates, and any dependencies or resources involved.

### Design
Design the architecture of your Gantt chart. Decide which libraries to use (Matplotlib for static charts, Plotly for interactive charts) and the structure of your data.

### Implementation
Write the code to create the Gantt chart, as shown in the examples above.

### Testing
Test your Gantt chart with different datasets to ensure it accurately represents the project schedule. Verify that the durations and task orders are correct.

### Deployment
Deploy your Gantt chart to a server or share it with stakeholders via a web platform. Ensure that it is accessible and easy to use.

### Maintenance
Update your Gantt chart as needed to reflect changes in the project schedule. Add new tasks, adjust dates, and modify resources as the project progresses.

## Detailed Discussion: Creating Detailed Project Timelines

### Example Project: Detailed Project Timeline

#### Step 1: Create a Project Directory
Create a new directory for your project and navigate into it:
```bash
mkdir project_timeline
cd project_timeline
```

#### Step 2: Create the Project Timeline Script
Create a file named `project_timeline.py` and open it in your IDE. Add the following code:
```python
import plotly.express as px
import pandas as pd

# Sample data
data = {
    'Task': ['Project Initiation', 'Requirements Gathering', 'Design Phase', 'Development Phase', 'Testing Phase', 'Deployment'],
    'Start': ['2024-07-01', '2024-07-05', '2024-07-10', '2024-07-20', '2024-08-10', '2024-08-25'],
    'Finish': ['2024-07-04', '2024-07-09', '2024-07-19', '2024-08-09', '2024-08-24', '2024-08-30'],
    'Milestone': ['Kickoff Meeting', '', 'Design Review', '', 'Testing Complete', 'Go Live'],
    'Resource': ['PMO', 'Business Analysts', 'Design Team', 'Development Team', 'QA Team', 'IT Operations']
}

# Create DataFrame
df = pd.DataFrame(data)
df['Start'] = pd.to_datetime(df['Start'])
df['Finish'] = pd.to_datetime(df['Finish'])

# Add milestone markers
milestones = df[df['Milestone'] != '']

# Plot Project Timeline
fig = px.timeline(df, x_start='Start', x_end='Finish', y='Task', color='Resource', title='Detailed Project Timeline')
fig.update_yaxes(categoryorder='total ascending')

# Add milestone annotations
for i, row in milestones.iterrows():
    fig.add_annotation(x=row['Finish'], y=row['Task'], text=row['Milestone'], showarrow=True, arrowhead=1, ax=-40, ay=-40)

# Show plot
fig.show()
```

#### Step 3: Run Your Script
Run your script from the terminal:
```bash
python project_timeline.py
```
You should see a detailed project timeline displayed in your web browser, showing tasks, their durations, and milestone markers.

## Conclusion
By following this tutorial, you've learned to use Python for creating Gantt charts and project timelines using Matplotlib and Plotly. You have gained practical knowledge in visualizing project schedules, tracking milestones, and managing timelines effectively. Integrating these technical skills with project management theories will enhance your ability to oversee projects from conception to completion.

Happy coding!